import type { Protocol } from 'devtools-protocol';
import { Deferred } from '../../../utils/Deferred.js';
import type { EventManager } from '../session/EventManager.js';
declare class NavigationState {
    readonly navigationId: `${string}-${string}-${string}-${string}-${string}`;
    url?: string;
    constructor(url?: string);
}
export declare class NavigationTracker {
    #private;
    navigation: {
        withinDocument: Deferred<void>;
    };
    constructor(url: string, browsingContextId: string, eventManager: EventManager);
    get currentNavigationId(): `${string}-${string}-${string}-${string}-${string}`;
    get initialNavigation(): boolean;
    get pendingCommandNavigation(): Deferred<void> | undefined;
    get url(): string;
    dispose(): void;
    onTargetInfoChanged(url: string): void;
    frameNavigated(url: string): void;
    navigatedWithinDocument(url: string, navigationType: Protocol.Page.NavigatedWithinDocumentEvent['navigationType']): void;
    frameStartedLoading(): void;
    frameScheduledNavigation(url: string): void;
    frameRequestedNavigation(url: string): void;
    navigationFinishedWithinSameDocument(): void;
    lifecycleEventLoad(): void;
    createCommandNavigation(url: string): NavigationState;
    failCommandNavigation(navigation: NavigationState): void;
    finishCommandNavigation(navigation: NavigationState, finishedByWaitNone: boolean): void;
}
export {};
