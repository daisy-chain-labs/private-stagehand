// typespecs/api_types.ts
import { extendZodWithOpenApi as extendZodWithOpenApi9 } from "@asteasolutions/zod-to-openapi";
import { z as z12 } from "zod";

// typespecs/app_types.ts
import { extendZodWithOpenApi as extendZodWithOpenApi8 } from "@asteasolutions/zod-to-openapi";
import { z as z11 } from "zod";

// src/zod_util.ts
import { z } from "zod";
function objectNullish(object) {
  return new z.ZodObject({
    ...object._def,
    shape: () => Object.fromEntries(
      Object.entries(object.shape).map(([k, v]) => [k, v.nullish()])
    )
  });
}

// typespecs/common_types.ts
import { z as z2 } from "zod";
import { extendZodWithOpenApi } from "@asteasolutions/zod-to-openapi";
extendZodWithOpenApi(z2);
var literalSchema = z2.union([
  z2.string().openapi({ title: "string" }),
  z2.number().openapi({ title: "number" }),
  z2.boolean().openapi({ title: "boolean" }),
  z2.null().openapi({ title: "null" })
]);
var jsonSchema = z2.lazy(
  () => z2.union([
    literalSchema,
    z2.array(jsonSchema).openapi({ title: "array" }),
    z2.record(jsonSchema).openapi({ title: "object" })
  ])
);
var datetimeStringSchema = z2.string().transform((x, ctx) => {
  const d = new Date(x);
  if (isNaN(d.getTime())) {
    ctx.addIssue({
      code: z2.ZodIssueCode.invalid_string,
      validation: "datetime",
      message: "Invalid datetime"
    });
    return z2.NEVER;
  }
  return d.toISOString();
}).openapi({ format: "date-time" });
var objectTypes = z2.enum([
  "project",
  "experiment",
  "dataset",
  "prompt",
  "prompt_session",
  "role",
  "group",
  "acl",
  "user",
  "project_score",
  "project_tag",
  "span_iframe",
  "function",
  "view",
  "organization",
  "api_key",
  "ai_secret",
  "env_var"
]);
var objectTypesWithEvent = z2.enum([
  "project",
  "experiment",
  "dataset",
  "prompt",
  "function",
  "prompt_session"
]);
var eventObjectType = objectTypesWithEvent.exclude(["project"]).or(z2.enum(["project_logs"]));
function getEventObjectType(objectType) {
  return objectType === "project" ? "project_logs" : objectType;
}
function getEventObjectDescription(objectType) {
  return getEventObjectType(objectType).replace("_", " ");
}
function getObjectArticle(objectType) {
  return [
    "acl",
    "api_key",
    "experiment",
    "organization",
    "ai_secret",
    "env_var"
  ].includes(objectType) ? "an" : "a";
}

// typespecs/custom_types.ts
import { extendZodWithOpenApi as extendZodWithOpenApi2 } from "@asteasolutions/zod-to-openapi";
import { z as z3 } from "zod";
extendZodWithOpenApi2(z3);
var modeSchema = z3.enum(["default", "stainless"]);
var mode = modeSchema.parse(
  typeof process === "undefined" ? "default" : "stainless"
);
var modeToTypes = {
  default: {
    unknown: z3.unknown(),
    literalTrue: z3.literal(true),
    literalFalse: z3.literal(false)
  },
  stainless: {
    // Stainless requires schemas which are completely permissive to be
    // tagged.
    unknown: z3.unknown().openapi({ ["x-stainless-any"]: true }),
    // Stainless does not support boolean literals in all SDKs.
    literalTrue: z3.boolean(),
    literalFalse: z3.boolean()
  }
};
var customTypes = modeToTypes[mode];
var customTypesMode = mode;

// typespecs/prompt.ts
import { extendZodWithOpenApi as extendZodWithOpenApi5 } from "@asteasolutions/zod-to-openapi";
import { z as z7 } from "zod";

// typespecs/openai/messages.ts
import { extendZodWithOpenApi as extendZodWithOpenApi3 } from "@asteasolutions/zod-to-openapi";
import { z as z4 } from "zod";
extendZodWithOpenApi3(z4);
var messageRoleSchema = z4.enum(["system", "user", "assistant", "function", "tool", "model"]).openapi("MessageRole");
var chatCompletionSystemMessageParamSchema = z4.object({
  content: z4.string().default(""),
  role: z4.literal("system"),
  name: z4.string().optional()
});
var chatCompletionContentPartTextSchema = z4.object({
  text: z4.string().default(""),
  type: z4.literal("text")
}).openapi("ChatCompletionContentPartText");
var imageURLSchema = z4.object({
  url: z4.string(),
  detail: z4.union([
    z4.literal("auto").openapi({ title: "auto" }),
    z4.literal("low").openapi({ title: "low" }),
    z4.literal("high").openapi({ title: "high" })
  ]).optional()
});
var chatCompletionContentPartImageSchema = z4.object({
  image_url: imageURLSchema,
  type: z4.literal("image_url")
}).openapi("ChatCompletionContentPartImage");
var chatCompletionContentPartSchema = z4.union([
  chatCompletionContentPartTextSchema.openapi({ title: "text" }),
  chatCompletionContentPartImageSchema.openapi({ title: "image_url" })
]).openapi("ChatCompletionContentPart");
var chatCompletionContentSchema = z4.union([
  z4.string().default("").openapi({ title: "text" }),
  z4.array(
    chatCompletionContentPartSchema.openapi({
      title: "chat_completion_content_part"
    })
  ).openapi({ title: "array" })
]).openapi("ChatCompletionContent");
var chatCompletionUserMessageParamSchema = z4.object({
  content: chatCompletionContentSchema,
  role: z4.literal("user"),
  name: z4.string().optional()
});
var functionCallSchema = z4.object({
  arguments: z4.string(),
  name: z4.string()
});
var functionSchema = z4.object({
  arguments: z4.string(),
  name: z4.string()
});
var chatCompletionToolMessageParamSchema = z4.object({
  content: z4.string().default(""),
  role: z4.literal("tool"),
  tool_call_id: z4.string().default("")
});
var chatCompletionFunctionMessageParamSchema = z4.object({
  content: z4.string().default(""),
  name: z4.string(),
  role: z4.literal("function")
});
var chatCompletionMessageToolCallSchema = z4.object({
  id: z4.string(),
  function: functionSchema,
  type: z4.literal("function")
}).openapi("ChatCompletionMessageToolCall");
var chatCompletionAssistantMessageParamSchema = z4.object({
  role: z4.literal("assistant"),
  content: z4.string().nullish(),
  // NOTE: It's important to keep these optional, rather than nullish, to stay
  // inline with the OpenAI SDK's type definition.
  function_call: functionCallSchema.nullish().transform((x) => x != null ? x : void 0),
  name: z4.string().nullish().transform((x) => x != null ? x : void 0),
  tool_calls: z4.array(chatCompletionMessageToolCallSchema).nullish().transform((x) => x != null ? x : void 0)
});
var chatCompletionFallbackMessageParamSchema = z4.object({
  role: messageRoleSchema.exclude([
    "system",
    "user",
    "assistant",
    "tool",
    "function"
  ]),
  content: z4.string().nullish()
});
var chatCompletionOpenAIMessageParamSchema = z4.union([
  chatCompletionSystemMessageParamSchema.openapi({ title: "system" }),
  chatCompletionUserMessageParamSchema.openapi({ title: "user" }),
  chatCompletionAssistantMessageParamSchema.openapi({ title: "assistant" }),
  chatCompletionToolMessageParamSchema.openapi({ title: "tool" }),
  chatCompletionFunctionMessageParamSchema.openapi({ title: "function" })
]);
var chatCompletionMessageParamSchema = z4.union([
  chatCompletionOpenAIMessageParamSchema.openapi({ title: "openai" }),
  chatCompletionFallbackMessageParamSchema.openapi({ title: "fallback" })
]).openapi("ChatCompletionMessageParam");

// typespecs/function_id.ts
import { extendZodWithOpenApi as extendZodWithOpenApi4 } from "@asteasolutions/zod-to-openapi";
import { z as z5 } from "zod";
extendZodWithOpenApi4(z5);
var savedFunctionIdSchema = z5.union([
  z5.object({
    type: z5.literal("function"),
    id: z5.string()
  }).openapi({ title: "function" }),
  z5.object({
    type: z5.literal("global"),
    name: z5.string()
  }).openapi({ title: "global" })
]).openapi("SavedFunctionId");
var extendedSavedFunctionIdSchema = savedFunctionIdSchema.or(
  z5.object({
    type: z5.literal("slug"),
    project_id: z5.string(),
    slug: z5.string()
  })
);

// typespecs/openai/tools.ts
import { z as z6 } from "zod";
var functionParametersSchema = z6.record(customTypes.unknown);
var functionDefinitionSchema = z6.object({
  name: z6.string(),
  description: z6.string().optional(),
  parameters: functionParametersSchema.optional()
});
var chatCompletionToolSchema = z6.object({
  function: functionDefinitionSchema,
  type: z6.literal("function")
});
var toolsSchema = z6.array(chatCompletionToolSchema);

// typespecs/prompt.ts
extendZodWithOpenApi5(z7);
var promptBlockDataSchema = z7.union([
  z7.object({
    type: z7.literal("completion"),
    content: z7.string()
  }).openapi({ title: "completion" }),
  z7.object({
    type: z7.literal("chat"),
    messages: z7.array(chatCompletionMessageParamSchema),
    tools: z7.string().optional()
  }).openapi({ title: "chat" })
]);
var braintrustModelParamsSchema = z7.object({
  use_cache: z7.boolean().optional()
});
var BRAINTRUST_PARAMS = Object.keys(braintrustModelParamsSchema.shape);
var openAIModelParamsSchema = z7.object({
  temperature: z7.number().optional(),
  top_p: z7.number().optional(),
  max_tokens: z7.number().optional(),
  frequency_penalty: z7.number().optional(),
  presence_penalty: z7.number().optional(),
  response_format: z7.union([
    z7.object({ type: z7.literal("json_object") }).openapi({ title: "json_object" }),
    z7.object({
      type: z7.literal("json_schema"),
      json_schema: z7.object({
        name: z7.string(),
        description: z7.string().optional(),
        schema: z7.record(customTypes.unknown).optional(),
        strict: z7.boolean().nullish()
      })
    }).openapi({ title: "json_schema" }),
    z7.object({ type: z7.literal("text") }).openapi({ title: "text" })
  ]).nullish(),
  tool_choice: z7.union([
    z7.literal("auto").openapi({ title: "auto" }),
    z7.literal("none").openapi({ title: "none" }),
    z7.literal("required").openapi({ title: "required" }),
    z7.object({
      type: z7.literal("function"),
      function: z7.object({ name: z7.string() })
    }).openapi({ title: "function" })
  ]).optional(),
  function_call: z7.union([
    z7.literal("auto").openapi({ title: "auto" }),
    z7.literal("none").openapi({ title: "none" }),
    z7.object({
      name: z7.string()
    }).openapi({ title: "function" })
  ]).optional(),
  n: z7.number().optional(),
  stop: z7.array(z7.string()).optional()
});
var anthropicModelParamsSchema = z7.object({
  max_tokens: z7.number(),
  temperature: z7.number(),
  top_p: z7.number().optional(),
  top_k: z7.number().optional(),
  stop_sequences: z7.array(z7.string()).optional(),
  max_tokens_to_sample: z7.number().optional().describe("This is a legacy parameter that should not be used.")
}).openapi("AntrhopicModelParams");
var googleModelParamsSchema = z7.object({
  temperature: z7.number().optional(),
  maxOutputTokens: z7.number().optional(),
  topP: z7.number().optional(),
  topK: z7.number().optional()
}).openapi("GoogleModelParams");
var windowAIModelParamsSchema = z7.object({
  temperature: z7.number().optional(),
  topK: z7.number().optional()
}).openapi("WindowAIModelParams");
var jsCompletionParamsSchema = z7.object({}).openapi("JsCompletionParams");
var modelParamsSchema = z7.union([
  braintrustModelParamsSchema.merge(openAIModelParamsSchema).passthrough().openapi({ title: "OpenAIModelParams" }),
  braintrustModelParamsSchema.merge(anthropicModelParamsSchema).passthrough().openapi({ title: "AnthropicModelParams" }),
  braintrustModelParamsSchema.merge(googleModelParamsSchema).passthrough().openapi({ title: "GoogleModelParams" }),
  braintrustModelParamsSchema.merge(windowAIModelParamsSchema).passthrough().openapi({ title: "WindowAIModelParams" }),
  braintrustModelParamsSchema.merge(jsCompletionParamsSchema).passthrough().openapi({ title: "JsCompletionParams" })
]).openapi("ModelParams");
var anyModelParamsSchema = openAIModelParamsSchema.merge(anthropicModelParamsSchema).merge(googleModelParamsSchema).merge(braintrustModelParamsSchema);
var promptOptionsSchema = z7.object({
  model: z7.string().optional(),
  params: modelParamsSchema.optional(),
  position: z7.string().optional()
}).openapi("PromptOptions");
var promptParserSchema = z7.object({
  type: z7.literal("llm_classifier"),
  use_cot: z7.boolean(),
  choice_scores: z7.record(z7.number().min(0).max(1))
});
var promptDataSchema = z7.object({
  prompt: promptBlockDataSchema.nullish(),
  options: promptOptionsSchema.nullish(),
  // This should be a union once we support multiple parser types
  parser: promptParserSchema.nullish(),
  tool_functions: z7.array(savedFunctionIdSchema).nullish(),
  origin: z7.object({
    prompt_id: z7.string().optional(),
    project_id: z7.string().optional(),
    prompt_version: z7.string().optional()
  }).nullish()
}).openapi("PromptData");
var strictPromptDataSchema = promptDataSchema.extend({
  parser: promptParserSchema.extend({
    choice_scores: promptParserSchema.shape.choice_scores.refine(
      (r) => Object.keys(r).length > 0,
      "choice_scores must be nonempty"
    )
  }).nullish()
});

// typespecs/view.ts
import { z as z8 } from "zod";
var viewTypeEnum = z8.enum([
  "projects",
  "logs",
  "experiments",
  "datasets",
  "prompts",
  "playgrounds",
  "experiment",
  "dataset"
]).describe("Type of table that the view corresponds to.");
var viewDataSearchSchema = z8.object({
  filter: z8.array(customTypes.unknown).nullish(),
  tag: z8.array(customTypes.unknown).nullish(),
  match: z8.array(customTypes.unknown).nullish(),
  sort: z8.array(customTypes.unknown).nullish()
}).strip().openapi("ViewDataSearch");
var viewDataSchema = z8.object({
  search: viewDataSearchSchema.nullish()
}).strip().openapi("ViewData");
var viewOptionsSchema = z8.object({
  columnVisibility: z8.record(z8.boolean()).nullish(),
  columnOrder: z8.array(z8.string()).nullish(),
  columnSizing: z8.record(z8.number()).nullish()
}).strip().openapi("ViewOptions");

// typespecs/functions.ts
import { extendZodWithOpenApi as extendZodWithOpenApi7 } from "@asteasolutions/zod-to-openapi";
import { z as z10 } from "zod";

// typespecs/git_types.ts
import { extendZodWithOpenApi as extendZodWithOpenApi6 } from "@asteasolutions/zod-to-openapi";
import { z as z9 } from "zod";
extendZodWithOpenApi6(z9);
var repoInfoSchema = z9.object({
  commit: z9.string().nullish().describe("SHA of most recent commit"),
  branch: z9.string().nullish().describe("Name of the branch the most recent commit belongs to"),
  tag: z9.string().nullish().describe("Name of the tag on the most recent commit"),
  dirty: z9.boolean().nullish().describe(
    "Whether or not the repo had uncommitted changes when snapshotted"
  ),
  author_name: z9.string().nullish().describe("Name of the author of the most recent commit"),
  author_email: z9.string().nullish().describe("Email of the author of the most recent commit"),
  commit_message: z9.string().nullish().describe("Most recent commit message"),
  commit_time: z9.string().nullish().describe("Time of the most recent commit"),
  git_diff: z9.string().nullish().describe(
    "If the repo was dirty when run, this includes the diff between the current state of the repo and the most recent commit."
  )
}).describe(
  "Metadata about the state of the repo when the experiment was created"
).openapi("RepoInfo");
var gitFieldsSchema = repoInfoSchema.keyof();
var collectMetadataEnum = z9.enum(["all", "none", "some"]);
var gitMetadataSettingsSchema = z9.strictObject({
  collect: collectMetadataEnum,
  fields: z9.array(gitFieldsSchema).optional()
});

// typespecs/functions.ts
extendZodWithOpenApi7(z10);
var validRuntimesEnum = z10.enum(["node", "python"]);
var functionTypeEnum = z10.enum(["llm", "scorer", "task", "tool"]);
var runtimeContextSchema = z10.object({
  runtime: validRuntimesEnum,
  version: z10.string()
});
var functionIdSchema = z10.union([
  z10.object({
    function_id: z10.string().describe("The ID of the function"),
    version: z10.string().optional().describe("The version of the function")
  }).describe("Function id").openapi({ title: "function_id" }),
  z10.object({
    project_name: z10.string().describe("The name of the project containing the function"),
    slug: z10.string().describe("The slug of the function"),
    version: z10.string().optional().describe("The version of the function")
  }).describe("Project name and slug").openapi({ title: "project_slug" }),
  z10.object({
    global_function: z10.string().describe(
      "The name of the global function. Currently, the global namespace includes the functions in autoevals"
    )
  }).describe("Global function name").openapi({ title: "global_function" }),
  z10.object({
    prompt_session_id: z10.string().describe("The ID of the prompt session"),
    prompt_session_function_id: z10.string().describe("The ID of the function in the prompt session"),
    version: z10.string().optional().describe("The version of the function")
  }).describe("Prompt session id").openapi({ title: "prompt_session_id" }),
  z10.object({
    inline_context: runtimeContextSchema,
    code: z10.string().describe("The inline code to execute"),
    name: z10.string().nullish().describe("The name of the inline code function")
  }).describe("Inline code function").openapi({ title: "inline_code" }),
  z10.object({
    inline_prompt: promptDataSchema,
    name: z10.string().nullish().describe("The name of the inline prompt")
  }).describe("Inline prompt definition").openapi({ title: "inline_prompt" })
]).describe("Options for identifying a function").openapi("FunctionId");
var useFunctionSchema = functionIdSchema;
var streamingModeEnum = z10.enum(["auto", "parallel"]);
var invokeFunctionNonIdArgsSchema = z10.object({
  input: customTypes.unknown.optional().describe(
    "Argument to the function, which can be any JSON serializable value"
  ),
  messages: z10.array(chatCompletionMessageParamSchema).optional().describe(
    "If the function is an LLM, additional messages to pass along to it"
  ),
  parent: z10.union([
    z10.object({
      object_type: z10.enum(["project_logs", "experiment"]),
      object_id: z10.string().describe("The id of the container object you are logging to"),
      row_ids: z10.object({
        id: z10.string().describe("The id of the row"),
        span_id: z10.string().describe("The span_id of the row"),
        root_span_id: z10.string().describe("The root_span_id of the row")
      }).nullish().describe("Identifiers for the row to to log a subspan under"),
      propagated_event: z10.record(customTypes.unknown).nullish().describe(
        "Include these properties in every span created under this parent"
      )
    }).describe("Span parent properties").openapi({ title: "span_parent_struct" }),
    z10.string().optional().describe(
      "The parent's span identifier, created by calling `.export()` on a span"
    )
  ]).describe("Options for tracing the function call"),
  stream: z10.boolean().nullish().describe(
    "Whether to stream the response. If true, results will be returned in the Braintrust SSE format."
  ),
  mode: streamingModeEnum.nullish().describe("The mode format of the returned value (defaults to 'auto')")
});
var invokeFunctionSchema = functionIdSchema.and(invokeFunctionNonIdArgsSchema).openapi("InvokeFunction");
var invokeApiSchema = invokeFunctionNonIdArgsSchema.merge(
  z10.object({
    version: z10.string().optional().describe("The version of the function")
  })
).describe("The request to invoke a function").openapi("InvokeApi");
var runEvalSchema = z10.object({
  project_id: z10.string().describe("Unique identifier for the project to run the eval in"),
  data: z10.union([
    z10.object({
      dataset_id: z10.string()
    }).describe("Dataset id").openapi({ title: "dataset_id" }),
    z10.object({
      project_name: z10.string(),
      dataset_name: z10.string()
    }).describe("Project and dataset name").openapi({ title: "project_dataset_name" })
  ]).describe("The dataset to use"),
  task: functionIdSchema.describe("The function to evaluate"),
  scores: z10.array(functionIdSchema).describe("The functions to score the eval on"),
  experiment_name: z10.string().optional().describe(
    "An optional name for the experiment created by this eval. If it conflicts with an existing experiment, it will be suffixed with a unique identifier."
  ),
  metadata: z10.record(customTypes.unknown).optional().describe(
    "Optional experiment-level metadata to store about the evaluation. You can later use this to slice & dice across experiments."
  ),
  stream: z10.boolean().optional().describe(
    "Whether to stream the results of the eval. If true, the request will return two events: one to indicate the experiment has started, and another upon completion. If false, the request will return the evaluation's summary upon completion."
  ),
  trial_count: z10.number().nullish().describe(
    "The number of times to run the evaluator per input. This is useful for evaluating applications that have non-deterministic behavior and gives you both a stronger aggregate measure and a sense of the variance in the results."
  ),
  is_public: z10.boolean().nullish().describe("Whether the experiment should be public. Defaults to false."),
  timeout: z10.number().nullish().describe(
    "The maximum duration, in milliseconds, to run the evaluation. Defaults to undefined, in which case there is no timeout."
  ),
  max_concurrency: z10.number().nullish().describe(
    "The maximum number of tasks/scorers that will be run concurrently. Defaults to undefined, in which case there is no max concurrency."
  ),
  base_experiment_name: z10.string().nullish().describe(
    "An optional experiment name to use as a base. If specified, the new experiment will be summarized and compared to this experiment."
  ),
  base_experiment_id: z10.string().nullish().describe(
    "An optional experiment id to use as a base. If specified, the new experiment will be summarized and compared to this experiment."
  ),
  git_metadata_settings: gitMetadataSettingsSchema.nullish().describe(
    "Optional settings for collecting git metadata. By default, will collect all git metadata fields allowed in org-level settings."
  ),
  repo_info: repoInfoSchema.nullish().describe(
    "Optionally explicitly specify the git metadata for this experiment. This takes precedence over `gitMetadataSettings` if specified."
  )
}).openapi("RunEval");
var baseSSEEventSchema = z10.object({
  id: z10.string().optional(),
  data: z10.string()
});
var sseTextEventSchema = baseSSEEventSchema.merge(
  z10.object({
    event: z10.literal("text_delta")
  })
);
var sseDataEventSchema = baseSSEEventSchema.merge(
  z10.object({
    event: z10.literal("json_delta")
  })
);
var sseErrorEventSchema = baseSSEEventSchema.merge(
  z10.object({
    event: z10.literal("error")
  })
);
var sseProgressEventSchema = baseSSEEventSchema.merge(
  z10.object({
    event: z10.literal("progress")
  })
);
var sseConsoleEventSchema = baseSSEEventSchema.merge(
  z10.object({
    event: z10.literal("console")
  })
);
var sseStartEventSchema = baseSSEEventSchema.omit({ data: true }).merge(
  z10.object({
    event: z10.literal("start"),
    data: z10.literal("")
  })
);
var sseDoneEventSchema = baseSSEEventSchema.omit({ data: true }).merge(
  z10.object({
    event: z10.literal("done"),
    data: z10.literal("")
  })
);
var functionObjectTypeEnum = z10.enum(["prompt", "tool", "scorer", "task"]).openapi("FunctionObjectType");
var functionFormatEnum = z10.enum(["llm", "code", "global"]).openapi("FunctionFormat");
var functionOutputTypeEnum = z10.enum(["completion", "score", "any"]).openapi("FunctionOutputType");
var sseProgressEventDataSchema = z10.object({
  id: z10.string().describe("The id of the span this event is for"),
  object_type: functionObjectTypeEnum,
  format: functionFormatEnum,
  output_type: functionOutputTypeEnum,
  name: z10.string(),
  event: z10.enum([
    "text_delta",
    "json_delta",
    "error",
    "console",
    "start",
    "done"
  ]),
  data: z10.string()
  // This is the text_delta or json_delta
}).openapi("SSEProgressEventData");
var sseConsoleEventDataSchema = z10.object({
  stream: z10.enum(["stderr", "stdout"]),
  message: z10.string()
});
var callEventSchema = z10.union([
  sseTextEventSchema.openapi({ title: "text_delta" }),
  sseDataEventSchema.openapi({ title: "json_delta" }),
  sseProgressEventSchema.openapi({ title: "progress" }),
  sseErrorEventSchema.openapi({ title: "error" }),
  sseConsoleEventSchema.openapi({ title: "console" }),
  sseStartEventSchema.openapi({ title: "start" }),
  sseDoneEventSchema.openapi({ title: "done" })
]).openapi("CallEvent");
var scoreSchema = z10.union([
  z10.object({
    name: z10.string(),
    score: z10.number().min(0).max(1).nullable().default(null),
    // Sometimes we get an empty value over the wire
    metadata: z10.record(customTypes.unknown).optional().transform((data) => data != null ? data : void 0)
  }),
  z10.number().min(0).max(1),
  z10.boolean().transform((b) => b ? 1 : 0),
  z10.null()
]).openapi("ScorerScore");
var ifExistsEnum = z10.enum(["error", "ignore", "replace"]);
var DEFAULT_IF_EXISTS = "error";

// typespecs/app_types.ts
extendZodWithOpenApi8(z11);
function generateBaseTableSchema(objectName, opts) {
  let nameDescription = `Name of the ${objectName}`;
  if (opts == null ? void 0 : opts.uniqueName) {
    nameDescription += `. Within a project, ${objectName} names are unique`;
  }
  return z11.object({
    id: z11.string().uuid().describe(`Unique identifier for the ${objectName}`),
    project_id: z11.string().uuid().describe(
      `Unique identifier for the project that the ${objectName} belongs under`
    ),
    name: z11.string().describe(nameDescription),
    description: z11.string().nullish().describe(`Textual description of the ${objectName}`),
    created: datetimeStringSchema.nullish().describe(`Date of ${objectName} creation`),
    deleted_at: datetimeStringSchema.nullish().describe(
      `Date of ${objectName} deletion, or null if the ${objectName} is still active`
    ),
    user_id: z11.string().uuid().nullish().describe(`Identifies the user who created the ${objectName}`),
    metadata: z11.record(customTypes.unknown).nullish().describe(`User-controlled metadata about the ${objectName}`)
  });
}
var aclObjectTypeEnum = z11.enum([
  "organization",
  "project",
  "experiment",
  "dataset",
  "prompt",
  "prompt_session",
  "group",
  "role",
  "org_member",
  "project_log",
  "org_project"
]).describe("The object type that the ACL applies to").openapi("AclObjectType");
var userBaseSchema = generateBaseTableSchema("user");
var userSchema = z11.object({
  id: userBaseSchema.shape.id,
  given_name: z11.string().nullish().describe("Given name of the user"),
  family_name: z11.string().nullish().describe("Family name of the user"),
  email: z11.string().nullish().describe("The user's email"),
  avatar_url: z11.string().nullish().describe("URL of the user's Avatar image"),
  created: userBaseSchema.shape.created
}).openapi("User");
var organizationBaseSchema = generateBaseTableSchema("organization");
var organizationSchema = z11.object({
  id: organizationBaseSchema.shape.id,
  name: organizationBaseSchema.shape.name,
  api_url: z11.string().nullish(),
  is_universal_api: z11.boolean().nullish(),
  proxy_url: z11.string().nullish(),
  realtime_url: z11.string().nullish(),
  created: organizationBaseSchema.shape.created
}).openapi("Organization");
var maxOverWindowSchema = z11.object({
  window_size_days: z11.number().int().positive(),
  max_value: z11.number().nonnegative()
}).openapi("MaxOverWindow");
var resourcesSchema = z11.object({
  org_id: organizationSchema.shape.id,
  forbid_toggle_experiment_public_to_private: z11.boolean().nullish(),
  num_private_experiment_row_actions: maxOverWindowSchema.nullish(),
  forbid_insert_datasets: z11.boolean().nullish(),
  forbid_insert_prompt_sessions: z11.boolean().nullish(),
  forbid_access_sql_explorer: z11.boolean().nullish(),
  num_production_log_row_actions: maxOverWindowSchema.nullish(),
  num_dataset_row_actions: maxOverWindowSchema.nullish()
}).openapi("Resources");
var memberSchema = z11.object({
  org_id: organizationSchema.shape.id,
  user_id: userSchema.shape.id
}).openapi("Member");
var aiSecretBaseSchema = generateBaseTableSchema("AI secret");
var aiSecretSchema = z11.object({
  id: aiSecretBaseSchema.shape.id,
  created: aiSecretBaseSchema.shape.created,
  org_id: organizationSchema.shape.id,
  name: aiSecretBaseSchema.shape.name,
  type: z11.string().nullish(),
  metadata: z11.record(customTypes.unknown).nullish(),
  preview_secret: z11.string().nullish()
}).openapi("AISecret");
var envVarObjectTypeEnum = z11.enum(["organization", "project", "function"]).describe("The type of the object the environment variable is scoped for");
var envVarBaseSchema = generateBaseTableSchema("environment variable");
var envVarSchema = z11.object({
  id: envVarBaseSchema.shape.id,
  object_type: envVarObjectTypeEnum,
  object_id: z11.string().uuid().describe("The id of the object the environment variable is scoped for"),
  name: z11.string().describe("The name of the environment variable"),
  created: envVarBaseSchema.shape.created,
  used: datetimeStringSchema.nullish().describe(`Date the environment variable was last used`)
}).openapi("EnvVar");
var customColumnBaseSchema = generateBaseTableSchema("custom columns");
var customColumnSchema = z11.object({
  id: customColumnBaseSchema.shape.id,
  object_type: aclObjectTypeEnum,
  object_id: z11.string().uuid().describe("The id of the object the custom column is scoped for"),
  subtype: aclObjectTypeEnum.nullable(),
  name: z11.string().describe("The name of the custom column"),
  expr: z11.string().describe(
    "The expression used to extract the value for the custom column"
  ),
  created: customColumnBaseSchema.shape.created
}).openapi("CustomColumn");
var apiKeyBaseSchema = generateBaseTableSchema("api key");
var apiKeySchema = z11.object({
  id: apiKeyBaseSchema.shape.id,
  created: apiKeyBaseSchema.shape.created,
  name: apiKeyBaseSchema.shape.name,
  preview_name: z11.string(),
  user_id: userSchema.shape.id.nullish(),
  org_id: organizationSchema.shape.id.nullish()
}).openapi("ApiKey");
var projectSettingsSchema = z11.object({
  comparison_key: z11.string().nullish().describe("The key used to join two experiments (defaults to `input`).")
}).openapi("ProjectSettings");
var projectBaseSchema = generateBaseTableSchema("project");
var projectSchema = z11.object({
  id: projectBaseSchema.shape.id,
  org_id: z11.string().uuid().describe(
    "Unique id for the organization that the project belongs under"
  ),
  name: projectBaseSchema.shape.name,
  created: projectBaseSchema.shape.created,
  deleted_at: projectBaseSchema.shape.deleted_at,
  user_id: projectBaseSchema.shape.user_id,
  settings: projectSettingsSchema.nullish()
}).openapi("Project");
var datasetBaseSchema = generateBaseTableSchema("dataset", {
  uniqueName: true
});
var datasetSchema = z11.object({
  id: datasetBaseSchema.shape.id,
  project_id: datasetBaseSchema.shape.project_id,
  name: datasetBaseSchema.shape.name,
  description: datasetBaseSchema.shape.description,
  created: datasetBaseSchema.shape.created,
  deleted_at: datasetBaseSchema.shape.deleted_at,
  user_id: datasetBaseSchema.shape.user_id,
  metadata: datasetBaseSchema.shape.metadata
}).openapi("Dataset");
var promptLogIdLiteralSchema = z11.literal("p").describe("A literal 'p' which identifies the object as a project prompt");
var promptBaseSchema = generateBaseTableSchema("prompt");
var promptSchemaObject = z11.object({
  id: promptBaseSchema.shape.id,
  // This has to be copy/pasted because zod blows up when there are circular dependencies
  _xact_id: z11.string().describe(
    `The transaction id of an event is unique to the network operation that processed the event insertion. Transaction ids are monotonically increasing over time and can be used to retrieve a versioned snapshot of the prompt (see the \`version\` parameter)`
  ),
  project_id: promptBaseSchema.shape.project_id,
  log_id: promptLogIdLiteralSchema,
  org_id: organizationSchema.shape.id,
  name: promptBaseSchema.shape.name,
  slug: z11.string().describe("Unique identifier for the prompt"),
  description: promptBaseSchema.shape.description,
  created: promptBaseSchema.shape.created,
  prompt_data: promptDataSchema.nullish().describe("The prompt, model, and its parameters"),
  tags: z11.array(z11.string()).nullish().describe("A list of tags for the prompt"),
  metadata: promptBaseSchema.shape.metadata,
  // An empty (unspecified) function_type is equivalent to "task".
  function_type: functionTypeEnum.nullish()
});
var promptSchema = promptSchemaObject.openapi("Prompt");
var codeBundleSchema = z11.object({
  runtime_context: runtimeContextSchema,
  location: z11.union([
    z11.object({
      type: z11.literal("experiment"),
      eval_name: z11.string(),
      position: z11.union([
        z11.object({ type: z11.literal("task") }),
        z11.object({
          type: z11.literal("scorer"),
          index: z11.number().int().nonnegative()
        }).openapi({ title: "scorer" })
      ])
    }).openapi({ title: "experiment" }),
    z11.object({
      type: z11.literal("function"),
      index: z11.number().int().nonnegative()
    }).openapi({ title: "function" })
  ]),
  bundle_id: z11.string(),
  preview: z11.string().nullish().describe("A preview of the code")
}).openapi("CodeBundle");
var functionDataSchema = z11.union([
  z11.object({
    type: z11.literal("prompt")
    // For backwards compatibility reasons, the prompt definition is hoisted out and stored
    // in the outer object
  }).openapi({ title: "prompt" }),
  z11.object({
    type: z11.literal("code"),
    data: z11.union([
      z11.object({
        type: z11.literal("bundle")
      }).and(codeBundleSchema).openapi({ title: "bundle" }),
      z11.object({
        type: z11.literal("inline"),
        runtime_context: runtimeContextSchema,
        code: z11.string()
      }).openapi({ title: "inline" })
    ])
  }).openapi({ title: "code" }),
  z11.object({
    type: z11.literal("global"),
    name: z11.string()
  }).openapi({ title: "global" })
]).openapi("FunctionData");
var functionSchema2 = promptSchemaObject.merge(
  z11.object({
    function_data: functionDataSchema,
    origin: z11.object({
      object_type: aclObjectTypeEnum,
      object_id: z11.string().uuid().describe("Id of the object the function is originating from"),
      internal: z11.boolean().nullish().describe(
        "The function exists for internal purposes and should not be displayed in the list of functions."
      )
    }).nullish(),
    function_schema: z11.object({
      parameters: customTypes.unknown,
      returns: customTypes.unknown.optional()
    }).nullish().describe("JSON schema for the function's parameters and return type")
  })
).openapi("Function");
var experimentBaseSchema = generateBaseTableSchema("experiment", {
  uniqueName: true
});
var experimentSchema = z11.object({
  id: experimentBaseSchema.shape.id,
  project_id: experimentBaseSchema.shape.project_id,
  name: experimentBaseSchema.shape.name,
  description: experimentBaseSchema.shape.description,
  created: experimentBaseSchema.shape.created,
  repo_info: repoInfoSchema.nullish(),
  commit: z11.string().nullish().describe("Commit, taken directly from `repo_info.commit`"),
  base_exp_id: z11.string().uuid().nullish().describe(
    "Id of default base experiment to compare against when viewing this experiment"
  ),
  deleted_at: experimentBaseSchema.shape.deleted_at,
  dataset_id: z11.string().uuid().nullish().describe(
    "Identifier of the linked dataset, or null if the experiment is not linked to a dataset"
  ),
  dataset_version: z11.string().nullish().describe(
    "Version number of the linked dataset the experiment was run against. This can be used to reproduce the experiment after the dataset has been modified."
  ),
  public: z11.boolean().describe(
    "Whether or not the experiment is public. Public experiments can be viewed by anybody inside or outside the organization"
  ),
  user_id: experimentBaseSchema.shape.user_id,
  metadata: experimentBaseSchema.shape.metadata
}).openapi("Experiment");
var promptSessionBaseSchema = generateBaseTableSchema("promptSession", {
  uniqueName: true
});
var promptSessionSchema = z11.object({
  id: promptSessionBaseSchema.shape.id,
  name: promptSessionBaseSchema.shape.name,
  description: promptSessionBaseSchema.shape.description,
  created: promptSessionBaseSchema.shape.created,
  deleted_at: promptSessionBaseSchema.shape.deleted_at,
  user_id: promptSessionBaseSchema.shape.user_id,
  project_id: promptSessionBaseSchema.shape.project_id,
  org_id: organizationSchema.shape.id.nullish().describe(
    "This field is deprecated and will be removed in a future revision"
  )
}).openapi("PromptSession");
var permissionEnum = z11.enum([
  "create",
  "read",
  "update",
  "delete",
  "create_acls",
  "read_acls",
  "update_acls",
  "delete_acls"
]).describe(
  [
    "Each permission permits a certain type of operation on an object in the system",
    "Permissions can be assigned to to objects on an individual basis, or grouped into roles"
  ].join("\n\n")
).openapi("Permission");
var roleBaseSchema = generateBaseTableSchema("role");
var roleSchema = z11.object({
  id: roleBaseSchema.shape.id,
  org_id: z11.string().uuid().nullish().describe(
    [
      "Unique id for the organization that the role belongs under",
      "A null org_id indicates a system role, which may be assigned to anybody and inherited by any other role, but cannot be edited.",
      "It is forbidden to change the org after creating a role"
    ].join("\n\n")
  ),
  user_id: roleBaseSchema.shape.user_id,
  created: roleBaseSchema.shape.created,
  name: roleBaseSchema.shape.name,
  description: roleBaseSchema.shape.description,
  deleted_at: roleBaseSchema.shape.deleted_at,
  member_permissions: z11.array(
    z11.object({
      permission: permissionEnum,
      restrict_object_type: aclObjectTypeEnum.nullish()
    })
  ).nullish().describe(
    "(permission, restrict_object_type) tuples which belong to this role"
  ),
  member_roles: z11.array(z11.string().uuid()).nullish().describe(
    [
      "Ids of the roles this role inherits from",
      "An inheriting role has all the permissions contained in its member roles, as well as all of their inherited permissions"
    ].join("\n\n")
  )
}).describe(
  [
    "A role is a collection of permissions which can be granted as part of an ACL",
    "Roles can consist of individual permissions, as well as a set of roles they inherit from"
  ].join("\n\n")
).openapi("Role");
var groupBaseSchema = generateBaseTableSchema("group");
var groupSchema = z11.object({
  id: groupBaseSchema.shape.id,
  org_id: z11.string().uuid().describe(
    [
      "Unique id for the organization that the group belongs under",
      "It is forbidden to change the org after creating a group"
    ].join("\n\n")
  ),
  user_id: groupBaseSchema.shape.user_id,
  created: groupBaseSchema.shape.created,
  name: groupBaseSchema.shape.name,
  description: groupBaseSchema.shape.description,
  deleted_at: groupBaseSchema.shape.deleted_at,
  member_users: z11.array(z11.string().uuid()).nullish().describe("Ids of users which belong to this group"),
  member_groups: z11.array(z11.string().uuid()).nullish().describe(
    [
      "Ids of the groups this group inherits from",
      "An inheriting group has all the users contained in its member groups, as well as all of their inherited users"
    ].join("\n\n")
  )
}).describe(
  [
    "A group is a collection of users which can be assigned an ACL",
    "Groups can consist of individual users, as well as a set of groups they inherit from"
  ].join("\n\n")
).openapi("Group");
var projectScoreTypeEnum = z11.enum(["slider", "categorical", "weighted", "minimum", "maximum", "online"]).describe("The type of the configured score").openapi("ProjectScoreType");
var projectScoreCategory = z11.object({
  name: z11.string().describe("Name of the category"),
  value: z11.number().describe(
    "Numerical value of the category. Must be between 0 and 1, inclusive"
  )
}).describe("For categorical-type project scores, defines a single category").openapi("ProjectScoreCategory");
var onlineScoreConfigSchema = z11.object({
  sampling_rate: z11.number().min(0).max(1).describe("The sampling rate for online scoring"),
  scorers: z11.array(savedFunctionIdSchema).describe("The list of scorers to use for online scoring"),
  apply_to_root_span: z11.boolean().nullish().describe(
    "Whether to trigger online scoring on the root span of each trace"
  ),
  apply_to_span_names: z11.string().array().nullish().describe("Trigger online scoring on any spans with a name in this list")
}).refine((val) => {
  var _a;
  return val.apply_to_root_span || ((_a = val.apply_to_span_names) == null ? void 0 : _a.length);
}, {
  message: "Online scoring rule does not apply to any rows"
}).openapi("OnlineScoreConfig");
var projectScoreBaseSchema = generateBaseTableSchema("project score");
var projectScoreSchema = z11.object({
  id: projectScoreBaseSchema.shape.id,
  project_id: projectScoreBaseSchema.shape.project_id,
  user_id: projectScoreBaseSchema.shape.user_id.unwrap().unwrap(),
  created: projectScoreBaseSchema.shape.created,
  name: projectScoreBaseSchema.shape.name,
  description: projectScoreBaseSchema.shape.description,
  score_type: projectScoreTypeEnum,
  categories: z11.union([
    projectScoreCategory.array().describe(
      "For categorical-type project scores, the list of all categories"
    ).openapi({ title: "categorical" }),
    z11.record(z11.number()).describe(
      "For weighted-type project scores, the weights of each score"
    ).openapi({ title: "weighted" }),
    z11.array(z11.string()).describe(
      "For minimum-type project scores, the list of included scores"
    ).openapi({ title: "minimum" })
  ]).nullish().openapi("ProjectScoreCategories"),
  config: z11.object({
    multi_select: z11.boolean().nullish(),
    destination: z11.literal("expected").nullish(),
    online: onlineScoreConfigSchema.nullish()
  }).nullish().openapi("ProjectScoreConfig"),
  position: z11.string().nullish().describe(
    "An optional LexoRank-based string that sets the sort position for the score in the UI"
  )
}).describe(
  "A project score is a user-configured score, which can be manually-labeled through the UI"
).openapi("ProjectScore");
var projectTagBaseSchema = generateBaseTableSchema("project tag");
var projectTagSchema = z11.object({
  id: projectTagBaseSchema.shape.id,
  project_id: projectTagBaseSchema.shape.project_id,
  user_id: projectTagBaseSchema.shape.user_id.unwrap().unwrap(),
  created: projectTagBaseSchema.shape.created,
  name: projectTagBaseSchema.shape.name,
  description: projectTagBaseSchema.shape.description,
  color: z11.string().nullish().describe("Color of the tag for the UI")
}).describe(
  "A project tag is a user-configured tag for tracking and filtering your experiments, logs, and other data"
).openapi("ProjectTag");
var spanIframeBaseSchema = generateBaseTableSchema("span iframe");
var spanIframeSchema = z11.object({
  id: spanIframeBaseSchema.shape.id,
  project_id: spanIframeBaseSchema.shape.project_id,
  user_id: spanIframeBaseSchema.shape.user_id,
  created: spanIframeBaseSchema.shape.created,
  deleted_at: spanIframeBaseSchema.shape.deleted_at,
  name: spanIframeBaseSchema.shape.name,
  description: spanIframeBaseSchema.shape.description,
  url: z11.string().describe("URL to embed the project viewer in an iframe"),
  post_message: z11.boolean().nullish().describe(
    "Whether to post messages to the iframe containing the span's data. This is useful when you want to render more data than fits in the URL."
  )
}).openapi("SpanIFrame");
var viewBaseSchema = generateBaseTableSchema("view");
var viewSchema = z11.object({
  id: viewBaseSchema.shape.id,
  object_type: aclObjectTypeEnum,
  object_id: z11.string().uuid().describe("The id of the object the view applies to"),
  view_type: viewTypeEnum,
  name: viewBaseSchema.shape.name,
  created: viewBaseSchema.shape.created,
  view_data: viewDataSchema.nullish().describe("The view definition"),
  options: viewOptionsSchema.nullish().describe("Options for the view in the app"),
  user_id: viewBaseSchema.shape.user_id,
  deleted_at: roleBaseSchema.shape.deleted_at
}).openapi("View");
var aclBaseSchema = generateBaseTableSchema("acl");
var aclSchema = z11.object({
  id: aclBaseSchema.shape.id,
  object_type: aclObjectTypeEnum,
  object_id: z11.string().uuid().describe("The id of the object the ACL applies to"),
  user_id: z11.string().uuid().nullish().describe(
    "Id of the user the ACL applies to. Exactly one of `user_id` and `group_id` will be provided"
  ),
  group_id: z11.string().uuid().nullish().describe(
    "Id of the group the ACL applies to. Exactly one of `user_id` and `group_id` will be provided"
  ),
  permission: permissionEnum.nullish().describe(
    "Permission the ACL grants. Exactly one of `permission` and `role_id` will be provided"
  ),
  restrict_object_type: aclObjectTypeEnum.nullish().describe(
    "When setting a permission directly, optionally restricts the permission grant to just the specified object type. Cannot be set alongside a `role_id`."
  ),
  role_id: z11.string().uuid().nullish().describe(
    "Id of the role the ACL grants. Exactly one of `permission` and `role_id` will be provided"
  ),
  _object_org_id: z11.string().uuid().describe("The organization the ACL's referred object belongs to"),
  created: aclBaseSchema.shape.created
}).describe(
  [
    "An ACL grants a certain permission or role to a certain user or group on an object.",
    "ACLs are inherited across the object hierarchy. So for example, if a user has read permissions on a project, they will also have read permissions on any experiment, dataset, etc. created within that project.",
    "To restrict a grant to a particular sub-object, you may specify `restrict_object_type` in the ACL, as part of a direct permission grant or as part of a role."
  ].join("\n\n")
).openapi("Acl");
var appLimitParamSchema = z11.coerce.number().int().nonnegative().describe("Limit the number of objects to return").openapi("AppLimit");
function generateBaseTableOpSchema(objectName) {
  return z11.object({
    org_name: z11.string().nullish().describe(
      `For nearly all users, this parameter should be unnecessary. But in the rare case that your API key belongs to multiple organizations, you may specify the name of the organization the ${objectName} belongs in.`
    )
  });
}
var startingAfterSchema = z11.string().uuid().describe(
  [
    "Pagination cursor id.",
    "For example, if the final item in the last page you fetched had an id of `foo`, pass `starting_after=foo` to fetch the next page. Note: you may only pass one of `starting_after` and `ending_before`"
  ].join("\n\n")
).openapi("StartingAfter");
var endingBeforeSchema = z11.string().uuid().describe(
  [
    "Pagination cursor id.",
    "For example, if the initial item in the last page you fetched had an id of `foo`, pass `ending_before=foo` to fetch the previous page. Note: you may only pass one of `starting_after` and `ending_before`"
  ].join("\n\n")
).openapi("EndingBefore");
function makeObjectIdsFilterSchema(objectName) {
  const item = z11.string().uuid();
  return z11.union([item, item.array()]).describe(
    `Filter search results to a particular set of ${objectName} IDs. To specify a list of IDs, include the query param multiple times`
  ).openapi(`${objectName}IdsFilter`);
}
function makeNonempty(s) {
  var _a;
  return ((_a = s.minLength) != null ? _a : 0) > 0 ? s : s.min(1);
}
var createProjectBaseSchema = generateBaseTableOpSchema("project");
var createProjectSchema = z11.object({
  name: makeNonempty(projectSchema.shape.name),
  org_name: createProjectBaseSchema.shape.org_name
}).openapi("CreateProject");
var patchProjectSchema = z11.object({
  name: projectSchema.shape.name.nullish(),
  settings: projectSchema.shape.settings.describe(
    "Project settings. Patch operations replace all settings, so make sure you include all settings you want to keep."
  ).nullish()
}).openapi("PatchProject");
var createExperimentSchema = z11.object({
  project_id: experimentSchema.shape.project_id,
  name: makeNonempty(experimentSchema.shape.name).nullish(),
  description: experimentSchema.shape.description,
  repo_info: experimentSchema.shape.repo_info,
  base_exp_id: experimentSchema.shape.base_exp_id,
  dataset_id: experimentSchema.shape.dataset_id,
  dataset_version: experimentSchema.shape.dataset_version,
  public: experimentSchema.shape.public.nullish(),
  metadata: experimentSchema.shape.metadata,
  ensure_new: z11.boolean().nullish().describe(
    "Normally, creating an experiment with the same name as an existing experiment will return the existing one un-modified. But if `ensure_new` is true, registration will generate a new experiment with a unique name in case of a conflict."
  )
}).openapi("CreateExperiment");
var patchExperimentSchema = createExperimentSchema.omit({ project_id: true, ensure_new: true }).extend({ name: experimentSchema.shape.name.nullish() }).openapi("PatchExperiment");
var createDatasetSchema = z11.object({
  project_id: datasetSchema.shape.project_id,
  name: makeNonempty(datasetSchema.shape.name),
  description: datasetSchema.shape.description,
  metadata: datasetSchema.shape.metadata
}).openapi("CreateDataset");
var patchDatasetSchema = z11.object({
  name: datasetSchema.shape.name.nullish(),
  description: datasetSchema.shape.description,
  metadata: datasetSchema.shape.metadata
}).openapi("PatchDataset");
var createPromptSchema = promptSchema.omit({
  id: true,
  _xact_id: true,
  org_id: true,
  log_id: true,
  created: true,
  metadata: true
}).extend({
  name: makeNonempty(promptSchema.shape.name),
  slug: makeNonempty(promptSchema.shape.slug)
}).openapi("CreatePrompt");
var createFunctionSchema = functionSchema2.omit({
  id: true,
  _xact_id: true,
  org_id: true,
  log_id: true,
  created: true,
  metadata: true
}).extend({
  name: makeNonempty(promptSchema.shape.name),
  slug: makeNonempty(promptSchema.shape.slug)
}).openapi("CreateFunction");
var patchPromptSchema = z11.object({
  name: promptSchema.shape.name.nullish(),
  slug: promptSchema.shape.slug.nullish(),
  description: promptSchema.shape.description.nullish(),
  prompt_data: promptSchema.shape.prompt_data.nullish(),
  tags: promptSchema.shape.tags.nullish()
}).openapi("PatchPrompt");
var patchFunctionSchema = z11.object({
  name: functionSchema2.shape.name.nullish(),
  description: functionSchema2.shape.description.nullish(),
  prompt_data: functionSchema2.shape.prompt_data.nullish(),
  function_data: functionSchema2.shape.function_data.nullish().openapi("FunctionDataNullish"),
  tags: functionSchema2.shape.tags.nullish()
}).openapi("PatchFunction");
var createRoleBaseSchema = generateBaseTableOpSchema("role");
var createRoleSchema = z11.object({
  name: makeNonempty(roleSchema.shape.name),
  description: roleSchema.shape.description,
  member_permissions: roleSchema.shape.member_permissions,
  member_roles: roleSchema.shape.member_roles,
  org_name: createRoleBaseSchema.shape.org_name
}).openapi("CreateRole");
var patchRoleSchema = createRoleSchema.omit({
  name: true,
  org_name: true,
  member_permissions: true,
  member_roles: true
}).merge(
  z11.object({
    name: createRoleSchema.shape.name.nullish(),
    add_member_permissions: roleSchema.shape.member_permissions.nullish().describe("A list of permissions to add to the role"),
    remove_member_permissions: roleSchema.shape.member_permissions.nullish().describe("A list of permissions to remove from the role"),
    add_member_roles: roleSchema.shape.member_roles.nullish().describe(
      "A list of role IDs to add to the role's inheriting-from set"
    ),
    remove_member_roles: roleSchema.shape.member_roles.nullish().describe(
      "A list of role IDs to remove from the role's inheriting-from set"
    )
  })
).openapi("PatchRole");
var createGroupBaseSchema = generateBaseTableOpSchema("group");
var createGroupSchema = z11.object({
  name: makeNonempty(groupSchema.shape.name),
  description: groupSchema.shape.description,
  member_users: groupSchema.shape.member_users,
  member_groups: groupSchema.shape.member_groups,
  org_name: createGroupBaseSchema.shape.org_name
}).openapi("CreateGroup");
var patchGroupSchema = createGroupSchema.omit({ name: true, org_name: true, member_users: true, member_groups: true }).merge(
  z11.object({
    name: createGroupSchema.shape.name.nullish(),
    add_member_users: groupSchema.shape.member_users.nullish().describe("A list of user IDs to add to the group"),
    remove_member_users: groupSchema.shape.member_users.nullish().describe("A list of user IDs to remove from the group"),
    add_member_groups: groupSchema.shape.member_groups.nullish().describe(
      "A list of group IDs to add to the group's inheriting-from set"
    ),
    remove_member_groups: groupSchema.shape.member_groups.nullish().describe(
      "A list of group IDs to remove from the group's inheriting-from set"
    )
  })
).openapi("PatchGroup");
var aclItemSchema = aclSchema.omit({
  id: true,
  created: true,
  _object_org_id: true
}).openapi("AclItem");
var aclBatchUpdateRequestSchema = z11.object({
  add_acls: aclItemSchema.array().nullish(),
  remove_acls: aclItemSchema.array().nullish()
}).openapi("AclBatchUpdateRequest");
var aclBatchUpdateResponseSchema = z11.object({
  added_acls: aclSchema.array(),
  removed_acls: aclSchema.array()
}).openapi("AclBatchUpdateResponse");
var createProjectScoreSchema = projectScoreSchema.pick({
  project_id: true,
  name: true,
  description: true,
  score_type: true,
  categories: true,
  config: true
}).openapi("CreateProjectScore");
var patchProjectScoreSchema = objectNullish(createProjectScoreSchema).omit({ project_id: true }).openapi("PatchProjectScore");
var createProjectTagSchema = z11.object({
  project_id: projectTagSchema.shape.project_id,
  name: projectTagSchema.shape.name,
  description: projectTagSchema.shape.description,
  color: projectTagSchema.shape.color
}).openapi("CreateProjectTag");
var patchProjectTagSchema = z11.object({
  name: projectTagSchema.shape.name.nullish(),
  description: projectTagSchema.shape.description,
  color: projectTagSchema.shape.color
}).openapi("PatchProjectTag");
var createSpanIframeSchema = spanIframeSchema.omit({
  id: true,
  created: true,
  deleted_at: true,
  user_id: true
}).openapi("CreateSpanIFrame");
var patchSpanIframeSchema = z11.object({
  name: spanIframeSchema.shape.name.nullish(),
  url: spanIframeSchema.shape.url.nullish(),
  post_message: spanIframeSchema.shape.post_message.nullish()
}).openapi("PatchSpanIFrame");
var createViewSchema = viewSchema.omit({
  id: true,
  created: true
}).openapi("CreateView");
var patchViewSchema = z11.object({
  object_type: viewSchema.shape.object_type,
  object_id: viewSchema.shape.object_id,
  view_type: viewSchema.shape.view_type.nullish(),
  name: viewSchema.shape.name.nullish(),
  view_data: viewSchema.shape.view_data,
  options: viewSchema.shape.options,
  user_id: viewSchema.shape.user_id
}).openapi("PatchView");
var deleteViewSchema = z11.object({
  object_type: viewSchema.shape.object_type,
  object_id: viewSchema.shape.object_id
}).openapi("DeleteView");
var patchOrganizationSchema = z11.object({
  name: organizationSchema.shape.name.nullish(),
  api_url: organizationSchema.shape.api_url.nullish(),
  is_universal_api: organizationSchema.shape.is_universal_api.nullish(),
  proxy_url: organizationSchema.shape.proxy_url.nullish(),
  realtime_url: organizationSchema.shape.realtime_url.nullish()
}).openapi("PatchOrganization");
var createApiKeyBaseSchema = generateBaseTableOpSchema("API key");
var createApiKeySchema = z11.object({
  name: z11.string().describe("Name of the api key. Does not have to be unique"),
  org_name: createApiKeyBaseSchema.shape.org_name
});
var createApiKeyOutputSchema = apiKeySchema.merge(
  z11.object({
    key: z11.string().describe("The raw API key. It will only be exposed this one time")
  })
).openapi("CreateApiKeyOutput");
var organizationMembersSchema = z11.object({
  members: userSchema.pick({ id: true, email: true }).array()
}).openapi("OrganizationMembers");
var patchOrganizationMembersSchema = z11.object({
  invite_users: z11.object({
    ids: userSchema.shape.id.array().nullish().describe("Ids of existing users to invite"),
    emails: userSchema.shape.email.unwrap().unwrap().array().nullish().describe("Emails of users to invite"),
    send_invite_emails: z11.boolean().nullish().describe(
      "If true, send invite emails to the users who wore actually added"
    ),
    group_ids: groupSchema.shape.id.array().nullish().describe(
      "Optional list of group ids to add newly-invited users to."
    ),
    group_names: groupSchema.shape.name.array().nullish().describe(
      "Optional list of group names to add newly-invited users to."
    ),
    group_id: groupSchema.shape.id.nullish().describe("Singular form of group_ids"),
    group_name: groupSchema.shape.name.nullish().describe("Singular form of group_names")
  }).nullish().describe("Users to invite to the organization"),
  remove_users: z11.object({
    ids: userSchema.shape.id.array().nullish().describe("Ids of users to remove"),
    emails: userSchema.shape.email.unwrap().unwrap().array().nullish().describe("Emails of users to remove")
  }).nullish().describe("Users to remove from the organization"),
  org_name: z11.string().nullish().describe(
    `For nearly all users, this parameter should be unnecessary. But in the rare case that your API key belongs to multiple organizations, or in case you want to explicitly assert the organization you are modifying, you may specify the name of the organization.`
  ),
  org_id: z11.string().nullish().describe(
    `For nearly all users, this parameter should be unnecessary. But in the rare case that your API key belongs to multiple organizations, or in case you want to explicitly assert the organization you are modifying, you may specify the id of the organization.`
  )
}).openapi("PatchOrganizationMembers");
var patchOrganizationMembersOutputSchema = z11.object({
  status: z11.literal("success"),
  org_id: z11.string().describe("The id of the org that was modified."),
  send_email_error: z11.string().nullish().describe(
    "If invite emails failed to send for some reason, the patch operation will still complete, but we will return an error message here"
  )
}).openapi("PatchOrganizationMembersOutput");
var createAISecretBaseSchema = generateBaseTableOpSchema("AI Secret");
var createAISecretSchema = z11.object({
  name: aiSecretSchema.shape.name,
  type: aiSecretSchema.shape.type,
  metadata: aiSecretSchema.shape.metadata,
  secret: z11.string().nullish().describe(
    "Secret value. If omitted in a PUT request, the existing secret value will be left intact, not replaced with null."
  ),
  org_name: createAISecretBaseSchema.shape.org_name
}).openapi("CreateAISecret");
var deleteAISecretSchema = z11.object({
  name: aiSecretSchema.shape.name,
  org_name: createAISecretBaseSchema.shape.org_name
}).openapi("DeleteAISecret");
var patchAISecretSchema = z11.object({
  name: aiSecretSchema.shape.name.nullish(),
  type: aiSecretSchema.shape.type,
  metadata: aiSecretSchema.shape.metadata,
  secret: z11.string().nullish()
}).openapi("PatchAISecret");
var createEnvVarSchema = envVarSchema.pick({ object_type: true, object_id: true, name: true }).extend({
  value: z11.string().nullish().describe(
    "The value of the environment variable. Will be encrypted at rest."
  )
});
var patchEnvVarSchema = envVarSchema.pick({ name: true }).extend({
  value: z11.string().nullish().describe(
    "The value of the environment variable. Will be encrypted at rest."
  )
});
var apiSpecObjectSchemas = {
  experiment: {
    object: experimentSchema,
    create: createExperimentSchema,
    patch_id: patchExperimentSchema
  },
  dataset: {
    object: datasetSchema,
    create: createDatasetSchema,
    patch_id: patchDatasetSchema
  },
  project: {
    object: projectSchema,
    create: createProjectSchema,
    patch_id: patchProjectSchema
  },
  prompt: {
    object: promptSchema,
    create: createPromptSchema,
    patch_id: patchPromptSchema
  },
  function: {
    object: functionSchema2,
    create: createFunctionSchema,
    patch_id: patchFunctionSchema
  },
  role: {
    object: roleSchema,
    create: createRoleSchema,
    patch_id: patchRoleSchema
  },
  group: {
    object: groupSchema,
    create: createGroupSchema,
    patch_id: patchGroupSchema
  },
  acl: {
    object: aclSchema,
    create: aclItemSchema,
    delete: aclItemSchema
  },
  user: {
    object: userSchema
  },
  prompt_session: {},
  project_score: {
    object: projectScoreSchema,
    create: createProjectScoreSchema,
    patch_id: patchProjectScoreSchema
  },
  project_tag: {
    object: projectTagSchema,
    create: createProjectTagSchema,
    patch_id: patchProjectTagSchema
  },
  span_iframe: {
    object: spanIframeSchema,
    create: createSpanIframeSchema,
    patch_id: patchSpanIframeSchema
  },
  view: {
    object: viewSchema,
    delete_id: deleteViewSchema,
    create: createViewSchema,
    patch_id: patchViewSchema
  },
  organization: {
    object: organizationSchema,
    patch_id: patchOrganizationSchema
  },
  api_key: {
    object: apiKeySchema,
    create: createApiKeySchema
  },
  ai_secret: {
    object: aiSecretSchema,
    create: createAISecretSchema,
    delete: deleteAISecretSchema,
    patch_id: patchAISecretSchema
  },
  env_var: {
    object: envVarSchema,
    create: createEnvVarSchema,
    patch_id: patchEnvVarSchema
  }
};

// src/string_util.ts
function capitalize(s, sep) {
  const items = sep ? s.split(sep) : [s];
  return items.map((s2) => s2 ? s2.charAt(0).toUpperCase() + s2.slice(1) : s2).join(sep || "");
}

// src/db_fields.ts
var TRANSACTION_ID_FIELD = "_xact_id";
var OBJECT_DELETE_FIELD = "_object_delete";
var IS_MERGE_FIELD = "_is_merge";
var MERGE_PATHS_FIELD = "_merge_paths";
var VALID_SOURCES = ["app", "api", "external"];
var PARENT_ID_FIELD = "_parent_id";

// src/span_types.ts
var spanTypeAttributeValues = [
  "llm",
  "score",
  "function",
  "eval",
  "task",
  "tool"
];

// typespecs/api_types.ts
extendZodWithOpenApi9(z12);
var auditSourcesSchema = z12.enum(VALID_SOURCES);
var spanTypeSchema = z12.enum(spanTypeAttributeValues).openapi("SpanType");
var spanAttributesSchema = z12.object({
  name: z12.string().nullish().describe("Name of the span, for display purposes only"),
  type: spanTypeSchema.nullish().describe("Type of the span, for display purposes only")
}).catchall(customTypes.unknown).describe(
  "Human-identifying attributes of the span, such as name, type, etc."
).openapi("SpanAttributes");
function generateBaseEventOpSchema(objectType) {
  const eventDescription = getEventObjectDescription(objectType);
  return z12.object({
    id: z12.string().describe(
      `A unique identifier for the ${eventDescription} event. If you don't provide one, BrainTrust will generate one for you`
    ),
    [TRANSACTION_ID_FIELD]: z12.string().describe(
      `The transaction id of an event is unique to the network operation that processed the event insertion. Transaction ids are monotonically increasing over time and can be used to retrieve a versioned snapshot of the ${eventDescription} (see the \`version\` parameter)`
    ),
    created: datetimeStringSchema.describe(
      `The timestamp the ${eventDescription} event was created`
    ),
    input: customTypes.unknown,
    output: customTypes.unknown,
    expected: customTypes.unknown,
    error: customTypes.unknown.describe("The error that occurred, if any."),
    tags: z12.array(z12.string()).nullish().describe("A list of tags to log"),
    scores: z12.record(z12.number().min(0).max(1).nullish()).nullish(),
    metadata: z12.record(customTypes.unknown).nullish().describe(
      "A dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings"
    ),
    metrics: z12.object({
      start: z12.number().nullish().describe(
        `A unix timestamp recording when the section of code which produced the ${eventDescription} event started`
      ),
      end: z12.number().nullish().describe(
        `A unix timestamp recording when the section of code which produced the ${eventDescription} event finished`
      ),
      prompt_tokens: z12.number().int().nullish().describe(
        `The number of tokens in the prompt used to generate the ${eventDescription} event (only set if this is an LLM span)`
      ),
      completion_tokens: z12.number().int().nullish().describe(
        `The number of tokens in the completion generated by the model (only set if this is an LLM span)`
      ),
      tokens: z12.number().int().nullish().describe(
        `The total number of tokens in the input and output of the ${eventDescription} event.`
      ),
      // Legacy non-numerical metrics.
      caller_functionname: customTypes.unknown.describe(
        "This metric is deprecated"
      ),
      caller_filename: customTypes.unknown.describe(
        "This metric is deprecated"
      ),
      caller_lineno: customTypes.unknown.describe(
        "This metric is deprecated"
      )
    }).catchall(z12.number()).nullish().describe(
      `Metrics are numerical measurements tracking the execution of the code that produced the ${eventDescription} event. Use "start" and "end" to track the time span over which the ${eventDescription} event was produced`
    ),
    context: z12.object({
      caller_functionname: z12.string().nullish().describe(
        `The function in code which created the ${eventDescription} event`
      ),
      caller_filename: z12.string().nullish().describe(
        `Name of the file in code where the ${eventDescription} event was created`
      ),
      caller_lineno: z12.number().int().nullish().describe(
        `Line of code where the ${eventDescription} event was created`
      )
    }).catchall(customTypes.unknown).nullish().describe(
      `Context is additional information about the code that produced the ${eventDescription} event. It is essentially the textual counterpart to \`metrics\`. Use the \`caller_*\` attributes to track the location in code which produced the ${eventDescription} event`
    ),
    span_id: z12.string().describe(
      `A unique identifier used to link different ${eventDescription} events together as part of a full trace. See the [tracing guide](https://www.braintrust.dev/docs/guides/tracing) for full details on tracing`
    ),
    span_parents: z12.string().array().nullish().describe(
      `An array of the parent \`span_ids\` of this ${eventDescription} event. This should be empty for the root span of a trace, and should most often contain just one parent element for subspans`
    ),
    root_span_id: z12.string().describe(
      `A unique identifier for the trace this ${eventDescription} event belongs to`
    ),
    span_attributes: spanAttributesSchema.nullish(),
    origin: objectReferenceSchema.nullish().describe("Indicates the event was copied from another object."),
    [OBJECT_DELETE_FIELD]: z12.boolean().nullish().describe(
      `Pass \`${OBJECT_DELETE_FIELD}=true\` to mark the ${eventDescription} event deleted. Deleted events will not show up in subsequent fetches for this ${eventDescription}`
    ),
    is_root: z12.boolean().nullish().describe(`Whether this span is a root span`)
  });
}
function generateBaseEventFeedbackSchema(objectType) {
  const eventObjectType2 = getEventObjectType(objectType);
  const eventDescription = getEventObjectDescription(objectType);
  return z12.object({
    id: z12.string().describe(
      `The id of the ${eventDescription} event to log feedback for. This is the row \`id\` returned by \`POST /v1/${eventObjectType2}/{${objectType}_id}/insert\``
    ),
    scores: z12.record(z12.number().min(0).max(1).nullish()).nullish().describe(
      `A dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the ${eventDescription} event`
    ),
    expected: customTypes.unknown.describe(
      "The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not"
    ),
    tags: z12.array(z12.string()).nullish().describe("A list of tags to log"),
    comment: z12.string().nullish().describe(
      `An optional comment string to log about the ${eventDescription} event`
    ),
    metadata: z12.record(customTypes.unknown).nullish().describe(
      "A dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event."
    ),
    source: auditSourcesSchema.nullish().describe(
      'The source of the feedback. Must be one of "external" (default), "app", or "api"'
    )
  });
}
var fetchLimitParamSchema = z12.coerce.number().int().nonnegative().describe(
  [
    "limit the number of traces fetched",
    `Fetch queries may be paginated if the total result size is expected to be large (e.g. project_logs which accumulate over a long time). Note that fetch queries only support pagination in descending time order (from latest to earliest \`${TRANSACTION_ID_FIELD}\`. Furthermore, later pages may return rows which showed up in earlier pages, except with an earlier \`${TRANSACTION_ID_FIELD}\`. This happens because pagination occurs over the whole version history of the event log. You will most likely want to exclude any such duplicate, outdated rows (by \`id\`) from your combined result set.`,
    `The \`limit\` parameter controls the number of full traces to return. So you may end up with more individual rows than the specified limit if you are fetching events containing traces.`
  ].join("\n\n")
).openapi("FetchLimit");
var fetchPaginationCursorDescription = [
  "DEPRECATION NOTICE: The manually-constructed pagination cursor is deprecated in favor of the explicit 'cursor' returned by object fetch requests. Please prefer the 'cursor' argument going forwards.",
  "Together, `max_xact_id` and `max_root_span_id` form a pagination cursor",
  `Since a paginated fetch query returns results in order from latest to earliest, the cursor for the next page can be found as the row with the minimum (earliest) value of the tuple \`(${TRANSACTION_ID_FIELD}, root_span_id)\`. See the documentation of \`limit\` for an overview of paginating fetch queries.`
].join("\n\n");
var maxXactIdSchema = z12.string().describe(fetchPaginationCursorDescription).openapi("MaxXactId");
var maxRootSpanIdSchema = z12.string().describe(fetchPaginationCursorDescription).openapi("MaxRootSpanId");
var fetchPaginationCursorSchema = z12.string().describe(
  [
    "An opaque string to be used as a cursor for the next page of results, in order from latest to earliest.",
    "The string can be obtained directly from the `cursor` property of the previous fetch query"
  ].join("\n\n")
).openapi("FetchPaginationCursor");
var versionSchema = z12.string().describe(
  [
    "Retrieve a snapshot of events from a past time",
    "The version id is essentially a filter on the latest event transaction id. You can use the `max_xact_id` returned by a past fetch as the version to reproduce that exact fetch."
  ].join("\n\n")
).openapi("Version");
var fetchEventsRequestSchema = z12.object({
  limit: fetchLimitParamSchema.nullish(),
  cursor: fetchPaginationCursorSchema.nullish(),
  max_xact_id: maxXactIdSchema.nullish(),
  max_root_span_id: maxRootSpanIdSchema.nullish(),
  version: versionSchema.nullish()
}).openapi("FetchEventsRequest");
function makeFetchEventsResponseSchema(objectType, eventSchema) {
  const eventName = capitalize(getEventObjectType(objectType), "_").replace(
    "_",
    ""
  );
  return z12.object({
    events: eventSchema.array().describe("A list of fetched events"),
    cursor: z12.string().nullish().describe(
      [
        "Pagination cursor",
        "Pass this string directly as the `cursor` param to your next fetch request to get the next page of results. Not provided if the returned result set is empty."
      ].join("\n\n")
    )
  }).openapi(`Fetch${eventName}EventsResponse`);
}
var objectReferenceSchema = z12.object({
  object_type: eventObjectType.describe(
    "Type of the object the event is originating from."
  ),
  object_id: z12.string().uuid().describe("ID of the object the event is originating from."),
  id: z12.string().describe("ID of the original event."),
  _xact_id: z12.string().describe("Transaction ID of the original event.")
});
var experimentEventBaseSchema = generateBaseEventOpSchema("experiment");
var experimentEventSchema = z12.object({
  id: experimentEventBaseSchema.shape.id,
  dataset_record_id: z12.string().nullish().describe(
    "If the experiment is associated to a dataset, this is the event-level dataset id this experiment event is tied to"
  ),
  [TRANSACTION_ID_FIELD]: experimentEventBaseSchema.shape[TRANSACTION_ID_FIELD],
  created: experimentEventBaseSchema.shape.created,
  project_id: experimentSchema.shape.project_id,
  experiment_id: experimentSchema.shape.id,
  input: experimentEventBaseSchema.shape.input.describe(
    "The arguments that uniquely define a test case (an arbitrary, JSON serializable object). Later on, Braintrust will use the `input` to know whether two test cases are the same between experiments, so they should not contain experiment-specific state. A simple rule of thumb is that if you run the same experiment twice, the `input` should be identical"
  ),
  output: experimentEventBaseSchema.shape.output.describe(
    "The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question"
  ),
  expected: experimentEventBaseSchema.shape.expected.describe(
    "The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate your experiments while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models"
  ),
  error: experimentEventBaseSchema.shape.error,
  scores: experimentEventBaseSchema.shape.scores.describe(
    "A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare experiments"
  ),
  metadata: experimentEventBaseSchema.shape.metadata,
  tags: experimentEventBaseSchema.shape.tags,
  metrics: experimentEventBaseSchema.shape.metrics,
  context: experimentEventBaseSchema.shape.context,
  span_id: experimentEventBaseSchema.shape.span_id,
  span_parents: experimentEventBaseSchema.shape.span_parents,
  root_span_id: experimentEventBaseSchema.shape.root_span_id,
  span_attributes: experimentEventBaseSchema.shape.span_attributes,
  is_root: experimentEventBaseSchema.shape.is_root,
  origin: experimentEventBaseSchema.shape.origin
}).openapi("ExperimentEvent");
var datasetEventBaseSchema = generateBaseEventOpSchema("dataset");
var datasetEventSchema = z12.object({
  id: datasetEventBaseSchema.shape.id,
  [TRANSACTION_ID_FIELD]: datasetEventBaseSchema.shape[TRANSACTION_ID_FIELD],
  created: datasetEventBaseSchema.shape.created,
  project_id: datasetSchema.shape.project_id,
  dataset_id: datasetSchema.shape.id,
  input: datasetEventBaseSchema.shape.input.describe(
    "The argument that uniquely define an input case (an arbitrary, JSON serializable object)"
  ),
  expected: datasetEventBaseSchema.shape.expected.describe(
    "The output of your application, including post-processing (an arbitrary, JSON serializable object)"
  ),
  metadata: datasetEventBaseSchema.shape.metadata,
  tags: datasetEventBaseSchema.shape.tags,
  span_id: datasetEventBaseSchema.shape.span_id,
  root_span_id: datasetEventBaseSchema.shape.root_span_id,
  is_root: datasetEventBaseSchema.shape.is_root,
  origin: datasetEventBaseSchema.shape.origin
}).openapi("DatasetEvent");
var promptSessionEventBaseSchema = generateBaseEventOpSchema("prompt_session");
var promptSessionEventSchema = z12.object({
  id: promptSessionEventBaseSchema.shape.id,
  [TRANSACTION_ID_FIELD]: promptSessionEventBaseSchema.shape[TRANSACTION_ID_FIELD],
  created: promptSessionEventBaseSchema.shape.created,
  project_id: promptSchema.shape.project_id,
  prompt_session_id: promptSchema.shape.id,
  prompt_session_data: customTypes.unknown.describe(
    "Data about the prompt session"
  ),
  prompt_data: customTypes.unknown.describe("Data about the prompt"),
  object_data: customTypes.unknown.describe("Data about the mapped data"),
  completion: customTypes.unknown.describe("Data about the completion"),
  tags: promptSessionEventBaseSchema.shape.tags
}).openapi("PromptSessionEvent");
var projectLogsEventBaseSchema = generateBaseEventOpSchema("project");
var projectLogsLogIdLiteralSchema = z12.literal("g").describe("A literal 'g' which identifies the log as a project log");
var projectLogsEventSchema = z12.object({
  id: projectLogsEventBaseSchema.shape.id,
  [TRANSACTION_ID_FIELD]: projectLogsEventBaseSchema.shape[TRANSACTION_ID_FIELD],
  created: projectLogsEventBaseSchema.shape.created,
  org_id: projectSchema.shape.org_id,
  project_id: projectSchema.shape.id,
  log_id: projectLogsLogIdLiteralSchema,
  input: projectLogsEventBaseSchema.shape.input.describe(
    "The arguments that uniquely define a user input (an arbitrary, JSON serializable object)."
  ),
  output: projectLogsEventBaseSchema.shape.output.describe(
    "The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question."
  ),
  expected: projectLogsEventBaseSchema.shape.expected.describe(
    "The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models."
  ),
  error: projectLogsEventBaseSchema.shape.error,
  scores: projectLogsEventBaseSchema.shape.scores.describe(
    "A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare logs."
  ),
  metadata: projectLogsEventBaseSchema.shape.metadata,
  tags: projectLogsEventBaseSchema.shape.tags,
  metrics: projectLogsEventBaseSchema.shape.metrics,
  context: projectLogsEventBaseSchema.shape.context,
  span_id: projectLogsEventBaseSchema.shape.span_id,
  span_parents: projectLogsEventBaseSchema.shape.span_parents,
  root_span_id: projectLogsEventBaseSchema.shape.root_span_id,
  is_root: projectLogsEventBaseSchema.shape.is_root,
  span_attributes: projectLogsEventBaseSchema.shape.span_attributes,
  origin: projectLogsEventBaseSchema.shape.origin
}).openapi("ProjectLogsEvent");
var spanIdsDescription = [
  "Use span_id, root_span_id, and span_parents as a more explicit alternative to _parent_id. The span_id is a unique identifier describing the row's place in the a trace, and the root_span_id is a unique identifier for the whole trace. See the [guide](https://www.braintrust.dev/docs/guides/tracing) for full details.",
  'For example, say we have logged a row `{"id": "abc", "span_id": "span0", "root_span_id": "root_span0", "input": "foo", "output": "bar", "expected": "boo", "scores": {"correctness": 0.33}}`. We can create a sub-span of the parent row by logging `{"id": "llm_call", "span_id": "span1", "root_span_id": "root_span0", "span_parents": ["span0"], "input": {"prompt": "What comes after foo?"}, "output": "bar", "metrics": {"tokens": 1}}`. In the webapp, only the root span row `"abc"` will show up in the summary view. You can view the full trace hierarchy (in this case, the `"llm_call"` row) by clicking on the "abc" row.',
  "If the row is being merged into an existing row, this field will be ignored."
].join("\n\n");
var insertSystemControlFieldsSchema = z12.object({
  [IS_MERGE_FIELD]: z12.boolean().nullish().describe(
    [
      "The `_is_merge` field controls how the row is merged with any existing row with the same id in the DB. By default (or when set to `false`), the existing row is completely replaced by the new row. When set to `true`, the new row is deep-merged into the existing row, if one is found. If no existing row is found, the new row is inserted as is.",
      'For example, say there is an existing row in the DB `{"id": "foo", "input": {"a": 5, "b": 10}}`. If we merge a new row as `{"_is_merge": true, "id": "foo", "input": {"b": 11, "c": 20}}`, the new row will be `{"id": "foo", "input": {"a": 5, "b": 11, "c": 20}}`. If we replace the new row as `{"id": "foo", "input": {"b": 11, "c": 20}}`, the new row will be `{"id": "foo", "input": {"b": 11, "c": 20}}`'
    ].join("\n\n")
  ),
  [MERGE_PATHS_FIELD]: z12.string().array().array().nullish().describe(
    [
      "The `_merge_paths` field allows controlling the depth of the merge, when `_is_merge=true`. `_merge_paths` is a list of paths, where each path is a list of field names. The deep merge will not descend below any of the specified merge paths.",
      'For example, say there is an existing row in the DB `{"id": "foo", "input": {"a": {"b": 10}, "c": {"d": 20}}, "output": {"a": 20}}`. If we merge a new row as `{"_is_merge": true, "_merge_paths": [["input", "a"], ["output"]], "input": {"a": {"q": 30}, "c": {"e": 30}, "bar": "baz"}, "output": {"d": 40}}`, the new row will be `{"id": "foo": "input": {"a": {"q": 30}, "c": {"d": 20, "e": 30}, "bar": "baz"}, "output": {"d": 40}}`. In this case, due to the merge paths, we have replaced `input.a` and `output`, but have still deep-merged `input` and `input.c`.'
    ].join("\n\n")
  ),
  [PARENT_ID_FIELD]: z12.string().nullish().describe(
    [
      "Use the `_parent_id` field to create this row as a subspan of an existing row. Tracking hierarchical relationships are important for tracing (see the [guide](https://www.braintrust.dev/docs/guides/tracing) for full details).",
      'For example, say we have logged a row `{"id": "abc", "input": "foo", "output": "bar", "expected": "boo", "scores": {"correctness": 0.33}}`. We can create a sub-span of the parent row by logging `{"_parent_id": "abc", "id": "llm_call", "input": {"prompt": "What comes after foo?"}, "output": "bar", "metrics": {"tokens": 1}}`. In the webapp, only the root span row `"abc"` will show up in the summary view. You can view the full trace hierarchy (in this case, the `"llm_call"` row) by clicking on the "abc" row.',
      "If the row is being merged into an existing row, this field will be ignored."
    ].join("\n\n")
  ),
  span_id: z12.string().nullish().describe(spanIdsDescription),
  root_span_id: z12.string().nullish().describe(spanIdsDescription),
  span_parents: z12.string().array().nullish().describe(spanIdsDescription)
});
function makeInsertEventSchemas(objectType, insertSchema) {
  const eventDescription = getEventObjectDescription(objectType);
  const article = getObjectArticle(objectType);
  const eventSchemaName = capitalize(
    getEventObjectType(objectType),
    "_"
  ).replace("_", "");
  const eventSchema = insertSchema.merge(insertSystemControlFieldsSchema).describe(`${capitalize(article)} ${eventDescription} event`).openapi(`Insert${eventSchemaName}Event`);
  const requestSchema = z12.object({
    events: eventSchema.array().describe(`A list of ${eventDescription} events to insert`)
  }).openapi(`Insert${eventSchemaName}EventRequest`);
  return { eventSchema, requestSchema };
}
var insertEventsResponseSchema = z12.object({
  row_ids: z12.string().array().describe(
    "The ids of all rows that were inserted, aligning one-to-one with the rows provided as input"
  )
}).openapi("InsertEventsResponse");
var feedbackResponseSchema = z12.object({
  status: z12.literal("success")
}).openapi("FeedbackResponseSchema");
var insertExperimentEventBaseSchema = objectNullish(
  experimentEventSchema.pick({
    input: true,
    output: true,
    expected: true,
    error: true,
    scores: true,
    metadata: true,
    tags: true,
    metrics: true,
    context: true,
    span_attributes: true,
    id: true,
    dataset_record_id: true,
    created: true
  }).extend({
    [OBJECT_DELETE_FIELD]: experimentEventBaseSchema.shape[OBJECT_DELETE_FIELD]
  })
);
var {
  eventSchema: insertExperimentEventSchema,
  requestSchema: insertExperimentEventsRequestSchema
} = makeInsertEventSchemas("experiment", insertExperimentEventBaseSchema);
var insertDatasetEventBaseSchema = objectNullish(
  datasetEventSchema.pick({
    input: true,
    expected: true,
    metadata: true,
    tags: true,
    id: true,
    created: true
  }).extend({
    [OBJECT_DELETE_FIELD]: datasetEventBaseSchema.shape[OBJECT_DELETE_FIELD]
  })
);
var {
  eventSchema: insertDatasetEventSchema,
  requestSchema: insertDatasetEventsRequestSchema
} = makeInsertEventSchemas("dataset", insertDatasetEventBaseSchema);
var insertProjectLogsEventBaseSchema = objectNullish(
  projectLogsEventSchema.pick({
    input: true,
    output: true,
    expected: true,
    error: true,
    scores: true,
    metadata: true,
    tags: true,
    metrics: true,
    context: true,
    span_attributes: true,
    id: true,
    created: true
  }).extend({
    [OBJECT_DELETE_FIELD]: projectLogsEventBaseSchema.shape[OBJECT_DELETE_FIELD]
  })
);
var {
  eventSchema: insertProjectLogsEventSchema,
  requestSchema: insertProjectLogsEventsRequestSchema
} = makeInsertEventSchemas("project", insertProjectLogsEventBaseSchema);
function makeFeedbackRequestSchema(objectType, feedbackSchema) {
  const eventDescription = getEventObjectDescription(objectType);
  const eventSchemaName = capitalize(
    getEventObjectType(objectType),
    "_"
  ).replace("_", "");
  return z12.object({
    feedback: feedbackSchema.array().describe(`A list of ${eventDescription} feedback items`)
  }).openapi(`Feedback${eventSchemaName}EventRequest`);
}
var feedbackExperimentRequestBaseSchema = generateBaseEventFeedbackSchema("experiment");
var feedbackExperimentItemSchema = feedbackExperimentRequestBaseSchema.pick({
  id: true,
  scores: true,
  expected: true,
  comment: true,
  metadata: true,
  source: true,
  tags: true
}).openapi("FeedbackExperimentItem");
var feedbackExperimentRequestSchema = makeFeedbackRequestSchema(
  "experiment",
  feedbackExperimentItemSchema
);
var feedbackDatasetRequestBaseSchema = generateBaseEventFeedbackSchema("dataset");
var feedbackDatasetItemSchema = feedbackDatasetRequestBaseSchema.pick({
  id: true,
  comment: true,
  metadata: true,
  source: true,
  tags: true
}).openapi("FeedbackDatasetItem");
var feedbackDatasetRequestSchema = makeFeedbackRequestSchema(
  "dataset",
  feedbackDatasetItemSchema
);
var feedbackProjectLogsRequestBaseSchema = generateBaseEventFeedbackSchema("project");
var feedbackProjectLogsItemSchema = feedbackProjectLogsRequestBaseSchema.pick({
  id: true,
  scores: true,
  expected: true,
  comment: true,
  metadata: true,
  source: true,
  tags: true
}).openapi("FeedbackProjectLogsItem");
var feedbackProjectLogsRequestSchema = makeFeedbackRequestSchema(
  "project",
  feedbackProjectLogsItemSchema
);
var apiSpecEventObjectSchemas = {
  experiment: {
    event: experimentEventSchema,
    fetchResponse: makeFetchEventsResponseSchema(
      "experiment",
      experimentEventSchema
    ),
    insertEvent: insertExperimentEventSchema,
    insertRequest: insertExperimentEventsRequestSchema,
    feedbackItem: feedbackExperimentItemSchema,
    feedbackRequest: feedbackExperimentRequestSchema
  },
  dataset: {
    event: datasetEventSchema,
    fetchResponse: makeFetchEventsResponseSchema("dataset", datasetEventSchema),
    insertEvent: insertDatasetEventSchema,
    insertRequest: insertDatasetEventsRequestSchema,
    feedbackItem: feedbackDatasetItemSchema,
    feedbackRequest: feedbackDatasetRequestSchema
  },
  project_logs: {
    event: projectLogsEventSchema,
    fetchResponse: makeFetchEventsResponseSchema(
      "project",
      projectLogsEventSchema
    ),
    insertEvent: insertProjectLogsEventSchema,
    insertRequest: insertProjectLogsEventsRequestSchema,
    feedbackItem: feedbackProjectLogsItemSchema,
    feedbackRequest: feedbackProjectLogsRequestSchema
  },
  prompt: {
    event: promptSchema
  },
  function: {
    event: functionSchema2
  },
  prompt_session: {}
};
function makeCrossObjectIndividualRequestSchema(objectType) {
  const eventObjectType2 = getEventObjectType(objectType);
  const eventDescription = getEventObjectDescription(objectType);
  const eventObjectSchema = apiSpecEventObjectSchemas[eventObjectType2];
  const insertObject = z12.object({
    ...eventObjectSchema.insertEvent ? {
      events: eventObjectSchema.insertEvent.array().nullish().describe(`A list of ${eventDescription} events to insert`)
    } : {},
    ...eventObjectSchema.feedbackItem ? {
      feedback: eventObjectSchema.feedbackItem.array().nullish().describe(`A list of ${eventDescription} feedback items`)
    } : {}
  });
  return z12.record(z12.string().uuid(), insertObject).nullish().describe(
    `A mapping from ${objectType} id to a set of log events and feedback items to insert`
  );
}
function makeCrossObjectIndividualResponseSchema(objectType) {
  return z12.record(z12.string().uuid(), insertEventsResponseSchema).nullish().describe(
    `A mapping from ${objectType} id to row ids for inserted \`events\``
  );
}
var crossObjectInsertRequestSchema = z12.object({
  experiment: makeCrossObjectIndividualRequestSchema("experiment"),
  dataset: makeCrossObjectIndividualRequestSchema("dataset"),
  project_logs: makeCrossObjectIndividualRequestSchema("project")
}).openapi("CrossObjectInsertRequest");
var crossObjectInsertResponseSchema = z12.object({
  experiment: makeCrossObjectIndividualResponseSchema("experiment"),
  dataset: makeCrossObjectIndividualResponseSchema("dataset"),
  project_logs: makeCrossObjectIndividualResponseSchema("project")
}).openapi("CrossObjectInsertResponse");
var summarizeScoresParamSchema = z12.coerce.boolean().describe(
  "Whether to summarize the scores and metrics. If false (or omitted), only the metadata will be returned."
);
var comparisonExperimentIdParamSchema = z12.string().uuid().describe(
  "The experiment to compare against, if summarizing scores and metrics. If omitted, will fall back to the `base_exp_id` stored in the experiment metadata, and then to the most recent experiment run in the same project. Must pass `summarize_scores=true` for this id to be used"
);
var summarizeDataParamSchema = z12.coerce.boolean().describe(
  "Whether to summarize the data. If false (or omitted), only the metadata will be returned."
);
var summarizeExperimentResponseSchema = z12.object({
  project_name: z12.string().describe("Name of the project that the experiment belongs to"),
  experiment_name: z12.string().describe("Name of the experiment"),
  project_url: z12.string().url().describe("URL to the project's page in the Braintrust app"),
  experiment_url: z12.string().url().describe("URL to the experiment's page in the Braintrust app"),
  comparison_experiment_name: z12.string().nullish().describe("The experiment which scores are baselined against"),
  scores: z12.record(
    z12.object({
      name: z12.string().describe("Name of the score"),
      score: z12.number().min(0).max(1).describe("Average score across all examples"),
      diff: z12.number().min(-1).max(1).optional().describe(
        "Difference in score between the current and comparison experiment"
      ),
      improvements: z12.number().int().min(0).describe("Number of improvements in the score"),
      regressions: z12.number().int().min(0).describe("Number of regressions in the score")
    }).describe("Summary of a score's performance").openapi("ScoreSummary")
  ).nullish().describe("Summary of the experiment's scores"),
  metrics: z12.record(
    z12.object({
      name: z12.string().describe("Name of the metric"),
      metric: z12.number().describe("Average metric across all examples"),
      unit: z12.string().describe("Unit label for the metric"),
      diff: z12.number().optional().describe(
        "Difference in metric between the current and comparison experiment"
      ),
      improvements: z12.number().int().min(0).describe("Number of improvements in the metric"),
      regressions: z12.number().int().min(0).describe("Number of regressions in the metric")
    }).describe("Summary of a metric's performance").openapi("MetricSummary")
  ).nullish().describe("Summary of the experiment's metrics")
}).describe("Summary of an experiment").openapi("SummarizeExperimentResponse");
var summarizeDatasetResponseSchema = z12.object({
  project_name: z12.string().describe("Name of the project that the dataset belongs to"),
  dataset_name: z12.string().describe("Name of the dataset"),
  project_url: z12.string().url().describe("URL to the project's page in the Braintrust app"),
  dataset_url: z12.string().url().describe("URL to the dataset's page in the Braintrust app"),
  data_summary: z12.object({
    total_records: z12.number().int().min(0).describe("Total number of records in the dataset")
  }).nullish().describe("Summary of a dataset's data").openapi("DataSummary")
}).describe("Summary of a dataset").openapi("SummarizeDatasetResponse");
var objectTypeSummarizeResponseSchemas = {
  experiment: summarizeExperimentResponseSchema,
  dataset: summarizeDatasetResponseSchema
};
var asyncScoringStateSchema = z12.union([
  z12.object({
    status: z12.literal("enabled"),
    token: z12.string(),
    function_ids: z12.array(functionIdSchema).nonempty()
  }),
  // Explicitly disabled.
  z12.object({
    status: z12.literal("disabled")
  }),
  // Inactive but may be selected later.
  z12.null()
]).openapi("AsyncScoringState");
var asyncScoringControlSchema = z12.discriminatedUnion("kind", [
  z12.object({
    kind: z12.literal("score_update"),
    token: z12.string()
  }),
  z12.object({
    kind: z12.literal("state_override"),
    state: asyncScoringStateSchema
  }),
  z12.object({
    kind: z12.literal("state_force_reselect")
  })
]).openapi("AsyncScoringControl");

// typespecs/attachment-reference.ts
import { z as z13 } from "zod";
var BRAINTRUST_ATTACHMENT = "braintrust_attachment";
var attachmentReferenceSchema = z13.object({
  type: z13.literal(BRAINTRUST_ATTACHMENT).describe("An identifier to help disambiguate parsing."),
  filename: z13.string().min(1).describe(
    "Human-readable filename for user interfaces. Not related to attachment storage."
  ),
  content_type: z13.string().min(1).describe("MIME type of this file."),
  key: z13.string().min(1).describe("Key in the object store bucket for this attachment.")
}).openapi("AttachmentReference");
var uploadStatusSchema = z13.enum(["uploading", "done", "error"]).openapi("UploadStatus");
var attachmentStatusSchema = z13.object({
  upload_status: uploadStatusSchema,
  error_message: z13.string().nullish().transform((x) => x || void 0).describe("Describes the error encountered while uploading.")
}).openapi("AttachmentStatus");
export {
  BRAINTRUST_ATTACHMENT,
  BRAINTRUST_PARAMS,
  DEFAULT_IF_EXISTS,
  aclBatchUpdateRequestSchema,
  aclBatchUpdateResponseSchema,
  aclItemSchema,
  aclObjectTypeEnum,
  aclSchema,
  aiSecretSchema,
  apiKeySchema,
  apiSpecEventObjectSchemas,
  apiSpecObjectSchemas,
  appLimitParamSchema,
  asyncScoringControlSchema,
  asyncScoringStateSchema,
  attachmentReferenceSchema,
  attachmentStatusSchema,
  baseSSEEventSchema,
  callEventSchema,
  chatCompletionContentPartImageSchema,
  chatCompletionContentPartSchema,
  chatCompletionContentPartTextSchema,
  chatCompletionMessageParamSchema,
  chatCompletionMessageToolCallSchema,
  codeBundleSchema,
  comparisonExperimentIdParamSchema,
  createAISecretSchema,
  createApiKeyOutputSchema,
  createApiKeySchema,
  createDatasetSchema,
  createEnvVarSchema,
  createExperimentSchema,
  createFunctionSchema,
  createGroupSchema,
  createProjectSchema,
  createProjectScoreSchema,
  createProjectTagSchema,
  createPromptSchema,
  createSpanIframeSchema,
  createViewSchema,
  crossObjectInsertRequestSchema,
  crossObjectInsertResponseSchema,
  customColumnSchema,
  customTypes,
  customTypesMode,
  datasetEventSchema,
  datasetSchema,
  datetimeStringSchema,
  deleteAISecretSchema,
  endingBeforeSchema,
  envVarObjectTypeEnum,
  envVarSchema,
  eventObjectType,
  experimentEventSchema,
  experimentSchema,
  extendedSavedFunctionIdSchema,
  feedbackResponseSchema,
  fetchEventsRequestSchema,
  fetchLimitParamSchema,
  fetchPaginationCursorSchema,
  functionDataSchema,
  functionFormatEnum,
  functionIdSchema,
  functionObjectTypeEnum,
  functionOutputTypeEnum,
  functionSchema2 as functionSchema,
  functionTypeEnum,
  getEventObjectDescription,
  getEventObjectType,
  getObjectArticle,
  gitFieldsSchema,
  gitMetadataSettingsSchema,
  groupSchema,
  ifExistsEnum,
  insertEventsResponseSchema,
  invokeApiSchema,
  invokeFunctionNonIdArgsSchema,
  invokeFunctionSchema,
  jsonSchema,
  literalSchema,
  makeObjectIdsFilterSchema,
  maxOverWindowSchema,
  maxRootSpanIdSchema,
  maxXactIdSchema,
  memberSchema,
  messageRoleSchema,
  modelParamsSchema,
  objectReferenceSchema,
  objectTypeSummarizeResponseSchemas,
  objectTypes,
  objectTypesWithEvent,
  onlineScoreConfigSchema,
  organizationMembersSchema,
  organizationSchema,
  patchAISecretSchema,
  patchDatasetSchema,
  patchEnvVarSchema,
  patchExperimentSchema,
  patchGroupSchema,
  patchOrganizationMembersOutputSchema,
  patchOrganizationMembersSchema,
  patchOrganizationSchema,
  patchProjectSchema,
  patchProjectScoreSchema,
  patchProjectTagSchema,
  patchPromptSchema,
  patchRoleSchema,
  patchSpanIframeSchema,
  patchViewSchema,
  permissionEnum,
  projectLogsEventSchema,
  projectLogsLogIdLiteralSchema,
  projectSchema,
  projectScoreCategory,
  projectScoreSchema,
  projectScoreTypeEnum,
  projectSettingsSchema,
  projectTagSchema,
  promptBaseSchema,
  promptBlockDataSchema,
  promptDataSchema,
  promptLogIdLiteralSchema,
  promptOptionsSchema,
  promptSchema,
  promptSessionEventSchema,
  promptSessionSchema,
  repoInfoSchema,
  resourcesSchema,
  roleSchema,
  runEvalSchema,
  runtimeContextSchema,
  savedFunctionIdSchema,
  scoreSchema,
  spanAttributesSchema,
  spanIframeBaseSchema,
  spanIframeSchema,
  spanTypeSchema,
  sseConsoleEventDataSchema,
  sseConsoleEventSchema,
  sseDataEventSchema,
  sseDoneEventSchema,
  sseErrorEventSchema,
  sseProgressEventDataSchema,
  sseProgressEventSchema,
  sseStartEventSchema,
  sseTextEventSchema,
  startingAfterSchema,
  streamingModeEnum,
  strictPromptDataSchema,
  summarizeDataParamSchema,
  summarizeScoresParamSchema,
  toolsSchema,
  uploadStatusSchema,
  useFunctionSchema,
  userSchema,
  validRuntimesEnum,
  versionSchema,
  viewDataSchema,
  viewDataSearchSchema,
  viewOptionsSchema,
  viewSchema,
  viewTypeEnum
};
