import { z } from 'zod';

declare const literalSchema: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull]>;
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | {
    [key: string]: Json;
} | Json[];
declare const jsonSchema: z.ZodType<Json>;
declare const datetimeStringSchema: z.ZodEffects<z.ZodString, string, string>;
declare const objectTypes: z.ZodEnum<["project", "experiment", "dataset", "prompt", "prompt_session", "role", "group", "acl", "user", "project_score", "project_tag", "span_iframe", "function", "view", "organization", "api_key", "ai_secret", "env_var"]>;
type ObjectType = z.infer<typeof objectTypes>;
declare const objectTypesWithEvent: z.ZodEnum<["project", "experiment", "dataset", "prompt", "function", "prompt_session"]>;
type ObjectTypeWithEvent = z.infer<typeof objectTypesWithEvent>;
declare const eventObjectType: z.ZodUnion<[z.ZodEnum<["experiment", "dataset", "prompt", "function", "prompt_session"]>, z.ZodEnum<["project_logs"]>]>;
type EventObjectType = z.infer<typeof eventObjectType>;
declare function getEventObjectType(objectType: ObjectTypeWithEvent): EventObjectType;
declare function getEventObjectDescription(objectType: ObjectTypeWithEvent): string;
declare function getObjectArticle(objectType: ObjectType): "an" | "a";

declare const spanTypeSchema: z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>;
declare const spanAttributesSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
}, "strip", z.ZodUnknown, z.objectOutputType<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
}, z.ZodUnknown, "strip">, z.objectInputType<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
}, z.ZodUnknown, "strip">>;
declare const fetchLimitParamSchema: z.ZodNumber;
declare const maxXactIdSchema: z.ZodString;
declare const maxRootSpanIdSchema: z.ZodString;
declare const fetchPaginationCursorSchema: z.ZodString;
declare const versionSchema: z.ZodString;
declare const fetchEventsRequestSchema: z.ZodObject<{
    limit: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    cursor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    max_xact_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    max_root_span_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    version: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    limit?: number | null | undefined;
    cursor?: string | null | undefined;
    max_xact_id?: string | null | undefined;
    max_root_span_id?: string | null | undefined;
    version?: string | null | undefined;
}, {
    limit?: number | null | undefined;
    cursor?: string | null | undefined;
    max_xact_id?: string | null | undefined;
    max_root_span_id?: string | null | undefined;
    version?: string | null | undefined;
}>;
declare const objectReferenceSchema: z.ZodObject<{
    object_type: z.ZodUnion<[z.ZodEnum<["experiment", "dataset", "prompt", "function", "prompt_session"]>, z.ZodEnum<["project_logs"]>]>;
    object_id: z.ZodString;
    id: z.ZodString;
    _xact_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
    object_id: string;
    _xact_id: string;
}, {
    id: string;
    object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
    object_id: string;
    _xact_id: string;
}>;
declare const experimentEventSchema: z.ZodObject<{
    id: z.ZodString;
    dataset_record_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    _xact_id: z.ZodString;
    created: z.ZodEffects<z.ZodString, string, string>;
    project_id: z.ZodString;
    experiment_id: z.ZodString;
    input: z.ZodUnknown;
    output: z.ZodUnknown;
    expected: z.ZodUnknown;
    error: z.ZodUnknown;
    scores: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodNullable<z.ZodNumber>>>>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    metrics: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, "strip", z.ZodNumber, z.objectOutputType<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, z.ZodNumber, "strip">, z.objectInputType<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, z.ZodNumber, "strip">>>>;
    context: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodUnknown, z.objectOutputType<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, z.ZodUnknown, "strip">, z.objectInputType<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, z.ZodUnknown, "strip">>>>;
    span_id: z.ZodString;
    span_parents: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    root_span_id: z.ZodString;
    span_attributes: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, "strip", z.ZodUnknown, z.objectOutputType<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, z.ZodUnknown, "strip">, z.objectInputType<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, z.ZodUnknown, "strip">>>>;
    is_root: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        object_type: z.ZodUnion<[z.ZodEnum<["experiment", "dataset", "prompt", "function", "prompt_session"]>, z.ZodEnum<["project_logs"]>]>;
        object_id: z.ZodString;
        id: z.ZodString;
        _xact_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    }, {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    project_id: string;
    span_id: string;
    root_span_id: string;
    created: string;
    _xact_id: string;
    experiment_id: string;
    dataset_record_id?: string | null | undefined;
    input?: unknown;
    output?: unknown;
    expected?: unknown;
    error?: unknown;
    scores?: Record<string, number | null | undefined> | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    tags?: string[] | null | undefined;
    metrics?: z.objectOutputType<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, z.ZodNumber, "strip"> | null | undefined;
    context?: z.objectOutputType<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, z.ZodUnknown, "strip"> | null | undefined;
    span_parents?: string[] | null | undefined;
    span_attributes?: z.objectOutputType<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, z.ZodUnknown, "strip"> | null | undefined;
    is_root?: boolean | null | undefined;
    origin?: {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    } | null | undefined;
}, {
    id: string;
    project_id: string;
    span_id: string;
    root_span_id: string;
    created: string;
    _xact_id: string;
    experiment_id: string;
    dataset_record_id?: string | null | undefined;
    input?: unknown;
    output?: unknown;
    expected?: unknown;
    error?: unknown;
    scores?: Record<string, number | null | undefined> | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    tags?: string[] | null | undefined;
    metrics?: z.objectInputType<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, z.ZodNumber, "strip"> | null | undefined;
    context?: z.objectInputType<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, z.ZodUnknown, "strip"> | null | undefined;
    span_parents?: string[] | null | undefined;
    span_attributes?: z.objectInputType<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, z.ZodUnknown, "strip"> | null | undefined;
    is_root?: boolean | null | undefined;
    origin?: {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    } | null | undefined;
}>;
type ExperimentEvent = z.infer<typeof experimentEventSchema>;
declare const datasetEventSchema: z.ZodObject<{
    id: z.ZodString;
    _xact_id: z.ZodString;
    created: z.ZodEffects<z.ZodString, string, string>;
    project_id: z.ZodString;
    dataset_id: z.ZodString;
    input: z.ZodUnknown;
    expected: z.ZodUnknown;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    span_id: z.ZodString;
    root_span_id: z.ZodString;
    is_root: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        object_type: z.ZodUnion<[z.ZodEnum<["experiment", "dataset", "prompt", "function", "prompt_session"]>, z.ZodEnum<["project_logs"]>]>;
        object_id: z.ZodString;
        id: z.ZodString;
        _xact_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    }, {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    project_id: string;
    span_id: string;
    root_span_id: string;
    dataset_id: string;
    created: string;
    _xact_id: string;
    input?: unknown;
    expected?: unknown;
    metadata?: Record<string, unknown> | null | undefined;
    tags?: string[] | null | undefined;
    is_root?: boolean | null | undefined;
    origin?: {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    } | null | undefined;
}, {
    id: string;
    project_id: string;
    span_id: string;
    root_span_id: string;
    dataset_id: string;
    created: string;
    _xact_id: string;
    input?: unknown;
    expected?: unknown;
    metadata?: Record<string, unknown> | null | undefined;
    tags?: string[] | null | undefined;
    is_root?: boolean | null | undefined;
    origin?: {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    } | null | undefined;
}>;
type DatasetEvent = z.infer<typeof datasetEventSchema>;
declare const promptSessionEventSchema: z.ZodObject<{
    id: z.ZodString;
    _xact_id: z.ZodString;
    created: z.ZodEffects<z.ZodString, string, string>;
    project_id: z.ZodString;
    prompt_session_id: z.ZodString;
    prompt_session_data: z.ZodUnknown;
    prompt_data: z.ZodUnknown;
    object_data: z.ZodUnknown;
    completion: z.ZodUnknown;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    project_id: string;
    prompt_session_id: string;
    created: string;
    _xact_id: string;
    prompt_session_data?: unknown;
    prompt_data?: unknown;
    object_data?: unknown;
    completion?: unknown;
    tags?: string[] | null | undefined;
}, {
    id: string;
    project_id: string;
    prompt_session_id: string;
    created: string;
    _xact_id: string;
    prompt_session_data?: unknown;
    prompt_data?: unknown;
    object_data?: unknown;
    completion?: unknown;
    tags?: string[] | null | undefined;
}>;
type PromptSessionEvent = z.infer<typeof promptSessionEventSchema>;
declare const projectLogsLogIdLiteralSchema: z.ZodLiteral<"g">;
declare const projectLogsEventSchema: z.ZodObject<{
    id: z.ZodString;
    _xact_id: z.ZodString;
    created: z.ZodEffects<z.ZodString, string, string>;
    org_id: z.ZodString;
    project_id: z.ZodString;
    log_id: z.ZodLiteral<"g">;
    input: z.ZodUnknown;
    output: z.ZodUnknown;
    expected: z.ZodUnknown;
    error: z.ZodUnknown;
    scores: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodNullable<z.ZodNumber>>>>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    metrics: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, "strip", z.ZodNumber, z.objectOutputType<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, z.ZodNumber, "strip">, z.objectInputType<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, z.ZodNumber, "strip">>>>;
    context: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodUnknown, z.objectOutputType<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, z.ZodUnknown, "strip">, z.objectInputType<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, z.ZodUnknown, "strip">>>>;
    span_id: z.ZodString;
    span_parents: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    root_span_id: z.ZodString;
    is_root: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    span_attributes: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, "strip", z.ZodUnknown, z.objectOutputType<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, z.ZodUnknown, "strip">, z.objectInputType<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, z.ZodUnknown, "strip">>>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        object_type: z.ZodUnion<[z.ZodEnum<["experiment", "dataset", "prompt", "function", "prompt_session"]>, z.ZodEnum<["project_logs"]>]>;
        object_id: z.ZodString;
        id: z.ZodString;
        _xact_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    }, {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    project_id: string;
    span_id: string;
    root_span_id: string;
    created: string;
    org_id: string;
    log_id: "g";
    _xact_id: string;
    input?: unknown;
    output?: unknown;
    expected?: unknown;
    error?: unknown;
    scores?: Record<string, number | null | undefined> | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    tags?: string[] | null | undefined;
    metrics?: z.objectOutputType<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, z.ZodNumber, "strip"> | null | undefined;
    context?: z.objectOutputType<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, z.ZodUnknown, "strip"> | null | undefined;
    span_parents?: string[] | null | undefined;
    is_root?: boolean | null | undefined;
    span_attributes?: z.objectOutputType<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, z.ZodUnknown, "strip"> | null | undefined;
    origin?: {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    } | null | undefined;
}, {
    id: string;
    project_id: string;
    span_id: string;
    root_span_id: string;
    created: string;
    org_id: string;
    log_id: "g";
    _xact_id: string;
    input?: unknown;
    output?: unknown;
    expected?: unknown;
    error?: unknown;
    scores?: Record<string, number | null | undefined> | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    tags?: string[] | null | undefined;
    metrics?: z.objectInputType<{
        start: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        end: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        prompt_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        caller_functionname: z.ZodUnknown;
        caller_filename: z.ZodUnknown;
        caller_lineno: z.ZodUnknown;
    }, z.ZodNumber, "strip"> | null | undefined;
    context?: z.objectInputType<{
        caller_functionname: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_filename: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        caller_lineno: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, z.ZodUnknown, "strip"> | null | undefined;
    span_parents?: string[] | null | undefined;
    is_root?: boolean | null | undefined;
    span_attributes?: z.objectInputType<{
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "score", "function", "eval", "task", "tool"]>>>;
    }, z.ZodUnknown, "strip"> | null | undefined;
    origin?: {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        _xact_id: string;
    } | null | undefined;
}>;
type ProjectLogsEvent = z.infer<typeof projectLogsEventSchema>;
declare const insertEventsResponseSchema: z.ZodObject<{
    row_ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    row_ids: string[];
}, {
    row_ids: string[];
}>;
declare const feedbackResponseSchema: z.ZodObject<{
    status: z.ZodLiteral<"success">;
}, "strip", z.ZodTypeAny, {
    status: "success";
}, {
    status: "success";
}>;
type EventObjectSchemasEntry = {
    event?: Zod.ZodTypeAny;
    fetchResponse?: Zod.ZodTypeAny;
    insertEvent?: Zod.ZodTypeAny;
    insertRequest?: Zod.ZodTypeAny;
    feedbackItem?: Zod.ZodTypeAny;
    feedbackRequest?: Zod.ZodTypeAny;
};
declare const apiSpecEventObjectSchemas: Record<EventObjectType, EventObjectSchemasEntry>;
declare const crossObjectInsertRequestSchema: z.ZodObject<{
    experiment: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        feedback?: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodTypeAny, "many">>> | undefined;
        events?: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodTypeAny, "many">>> | undefined;
    }, "strip", z.ZodTypeAny, {
        feedback?: unknown;
        events?: unknown;
    }, {
        feedback?: unknown;
        events?: unknown;
    }>>>>;
    dataset: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        feedback?: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodTypeAny, "many">>> | undefined;
        events?: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodTypeAny, "many">>> | undefined;
    }, "strip", z.ZodTypeAny, {
        feedback?: unknown;
        events?: unknown;
    }, {
        feedback?: unknown;
        events?: unknown;
    }>>>>;
    project_logs: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        feedback?: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodTypeAny, "many">>> | undefined;
        events?: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodTypeAny, "many">>> | undefined;
    }, "strip", z.ZodTypeAny, {
        feedback?: unknown;
        events?: unknown;
    }, {
        feedback?: unknown;
        events?: unknown;
    }>>>>;
}, "strip", z.ZodTypeAny, {
    experiment?: Record<string, {
        feedback?: unknown;
        events?: unknown;
    }> | null | undefined;
    dataset?: Record<string, {
        feedback?: unknown;
        events?: unknown;
    }> | null | undefined;
    project_logs?: Record<string, {
        feedback?: unknown;
        events?: unknown;
    }> | null | undefined;
}, {
    experiment?: Record<string, {
        feedback?: unknown;
        events?: unknown;
    }> | null | undefined;
    dataset?: Record<string, {
        feedback?: unknown;
        events?: unknown;
    }> | null | undefined;
    project_logs?: Record<string, {
        feedback?: unknown;
        events?: unknown;
    }> | null | undefined;
}>;
declare const crossObjectInsertResponseSchema: z.ZodObject<{
    experiment: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        row_ids: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        row_ids: string[];
    }, {
        row_ids: string[];
    }>>>>;
    dataset: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        row_ids: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        row_ids: string[];
    }, {
        row_ids: string[];
    }>>>>;
    project_logs: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        row_ids: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        row_ids: string[];
    }, {
        row_ids: string[];
    }>>>>;
}, "strip", z.ZodTypeAny, {
    experiment?: Record<string, {
        row_ids: string[];
    }> | null | undefined;
    dataset?: Record<string, {
        row_ids: string[];
    }> | null | undefined;
    project_logs?: Record<string, {
        row_ids: string[];
    }> | null | undefined;
}, {
    experiment?: Record<string, {
        row_ids: string[];
    }> | null | undefined;
    dataset?: Record<string, {
        row_ids: string[];
    }> | null | undefined;
    project_logs?: Record<string, {
        row_ids: string[];
    }> | null | undefined;
}>;
declare const summarizeScoresParamSchema: z.ZodBoolean;
declare const comparisonExperimentIdParamSchema: z.ZodString;
declare const summarizeDataParamSchema: z.ZodBoolean;
declare const objectTypeSummarizeResponseSchemas: {
    [K in ObjectType]?: z.ZodTypeAny;
};
declare const asyncScoringStateSchema: z.ZodUnion<[z.ZodObject<{
    status: z.ZodLiteral<"enabled">;
    token: z.ZodString;
    function_ids: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        function_id: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        function_id: string;
        version?: string | undefined;
    }, {
        function_id: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        project_name: z.ZodString;
        slug: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        slug: string;
        project_name: string;
        version?: string | undefined;
    }, {
        slug: string;
        project_name: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        global_function: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        global_function: string;
    }, {
        global_function: string;
    }>, z.ZodObject<{
        prompt_session_id: z.ZodString;
        prompt_session_function_id: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    }, {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        inline_context: z.ZodObject<{
            runtime: z.ZodEnum<["node", "python"]>;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            runtime: "node" | "python";
            version: string;
        }, {
            runtime: "node" | "python";
            version: string;
        }>;
        code: z.ZodString;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    }, {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    }>, z.ZodObject<{
        inline_prompt: z.ZodObject<{
            prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"completion">;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "completion";
                content: string;
            }, {
                type: "completion";
                content: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"chat">;
                messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    role: z.ZodLiteral<"system">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: string;
                    role: "system";
                    name?: string | undefined;
                }, {
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                    }, {
                        type: "text";
                        text?: string | undefined;
                    }>, z.ZodObject<{
                        image_url: z.ZodObject<{
                            url: z.ZodString;
                            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                        }, "strip", z.ZodTypeAny, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }>;
                        type: z.ZodLiteral<"image_url">;
                    }, "strip", z.ZodTypeAny, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }>]>, "many">]>;
                    role: z.ZodLiteral<"user">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                }, {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                }>, z.ZodObject<{
                    role: z.ZodLiteral<"assistant">;
                    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>>>, {
                        name: string;
                        arguments: string;
                    } | undefined, {
                        name: string;
                        arguments: string;
                    } | null | undefined>;
                    name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                    tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        function: z.ZodObject<{
                            arguments: z.ZodString;
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            arguments: string;
                        }, {
                            name: string;
                            arguments: string;
                        }>;
                        type: z.ZodLiteral<"function">;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }>, "many">>>, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                }, {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                }>, z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    role: z.ZodLiteral<"tool">;
                    tool_call_id: z.ZodDefault<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                }, {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    name: z.ZodString;
                    role: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    content: string;
                    role: "function";
                }, {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                }>]>, z.ZodObject<{
                    role: z.ZodEnum<["model"]>;
                    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    role: "model";
                    content?: string | null | undefined;
                }, {
                    role: "model";
                    content?: string | null | undefined;
                }>]>, "many">;
                tools: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }, {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }>]>>>;
            options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                model: z.ZodOptional<z.ZodString>;
                params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">>]>>;
                position: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            }, {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            }>>>;
            parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                type: z.ZodLiteral<"llm_classifier">;
                use_cot: z.ZodBoolean;
                choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }>>>;
            tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"function">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                id: string;
            }, {
                type: "function";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"global">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "global";
                name: string;
            }, {
                type: "global";
                name: string;
            }>]>, "many">>>;
            origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                prompt_id: z.ZodOptional<z.ZodString>;
                project_id: z.ZodOptional<z.ZodString>;
                prompt_version: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            }, {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        }, {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        }>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }, {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }>]>, "atleastone">;
}, "strip", z.ZodTypeAny, {
    status: "enabled";
    token: string;
    function_ids: [{
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }, ...({
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    })[]];
}, {
    status: "enabled";
    token: string;
    function_ids: [{
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }, ...({
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    })[]];
}>, z.ZodObject<{
    status: z.ZodLiteral<"disabled">;
}, "strip", z.ZodTypeAny, {
    status: "disabled";
}, {
    status: "disabled";
}>, z.ZodNull]>;
type AsyncScoringState = z.infer<typeof asyncScoringStateSchema>;
declare const asyncScoringControlSchema: z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
    kind: z.ZodLiteral<"score_update">;
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    token: string;
    kind: "score_update";
}, {
    token: string;
    kind: "score_update";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"state_override">;
    state: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"enabled">;
        token: z.ZodString;
        function_ids: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            function_id: z.ZodString;
            version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            function_id: string;
            version?: string | undefined;
        }, {
            function_id: string;
            version?: string | undefined;
        }>, z.ZodObject<{
            project_name: z.ZodString;
            slug: z.ZodString;
            version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            slug: string;
            project_name: string;
            version?: string | undefined;
        }, {
            slug: string;
            project_name: string;
            version?: string | undefined;
        }>, z.ZodObject<{
            global_function: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            global_function: string;
        }, {
            global_function: string;
        }>, z.ZodObject<{
            prompt_session_id: z.ZodString;
            prompt_session_function_id: z.ZodString;
            version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        }, {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        }>, z.ZodObject<{
            inline_context: z.ZodObject<{
                runtime: z.ZodEnum<["node", "python"]>;
                version: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                runtime: "node" | "python";
                version: string;
            }, {
                runtime: "node" | "python";
                version: string;
            }>;
            code: z.ZodString;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        }, {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        }>, z.ZodObject<{
            inline_prompt: z.ZodObject<{
                prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"completion">;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "completion";
                    content: string;
                }, {
                    type: "completion";
                    content: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"chat">;
                    messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                        content: z.ZodDefault<z.ZodString>;
                        role: z.ZodLiteral<"system">;
                        name: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        content: string;
                        role: "system";
                        name?: string | undefined;
                    }, {
                        role: "system";
                        content?: string | undefined;
                        name?: string | undefined;
                    }>, z.ZodObject<{
                        content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                            text: z.ZodDefault<z.ZodString>;
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                            text: string;
                        }, {
                            type: "text";
                            text?: string | undefined;
                        }>, z.ZodObject<{
                            image_url: z.ZodObject<{
                                url: z.ZodString;
                                detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                            }, "strip", z.ZodTypeAny, {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            }, {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            }>;
                            type: z.ZodLiteral<"image_url">;
                        }, "strip", z.ZodTypeAny, {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        }, {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        }>]>, "many">]>;
                        role: z.ZodLiteral<"user">;
                        name: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        content: (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[]) & (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined);
                        role: "user";
                        name?: string | undefined;
                    }, {
                        role: "user";
                        content?: string | ({
                            type: "text";
                            text?: string | undefined;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined;
                        name?: string | undefined;
                    }>, z.ZodObject<{
                        role: z.ZodLiteral<"assistant">;
                        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                        function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                            arguments: z.ZodString;
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            arguments: string;
                        }, {
                            name: string;
                            arguments: string;
                        }>>>, {
                            name: string;
                            arguments: string;
                        } | undefined, {
                            name: string;
                            arguments: string;
                        } | null | undefined>;
                        name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                        tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                            id: z.ZodString;
                            function: z.ZodObject<{
                                arguments: z.ZodString;
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                arguments: string;
                            }, {
                                name: string;
                                arguments: string;
                            }>;
                            type: z.ZodLiteral<"function">;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }, {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }>, "many">>>, {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined, {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined>;
                    }, "strip", z.ZodTypeAny, {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | undefined;
                        name?: string | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined;
                    }, {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | null | undefined;
                        name?: string | null | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined;
                    }>, z.ZodObject<{
                        content: z.ZodDefault<z.ZodString>;
                        role: z.ZodLiteral<"tool">;
                        tool_call_id: z.ZodDefault<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        content: string;
                        role: "tool";
                        tool_call_id: string;
                    }, {
                        role: "tool";
                        content?: string | undefined;
                        tool_call_id?: string | undefined;
                    }>, z.ZodObject<{
                        content: z.ZodDefault<z.ZodString>;
                        name: z.ZodString;
                        role: z.ZodLiteral<"function">;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        content: string;
                        role: "function";
                    }, {
                        name: string;
                        role: "function";
                        content?: string | undefined;
                    }>]>, z.ZodObject<{
                        role: z.ZodEnum<["model"]>;
                        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    }, "strip", z.ZodTypeAny, {
                        role: "model";
                        content?: string | null | undefined;
                    }, {
                        role: "model";
                        content?: string | null | undefined;
                    }>]>, "many">;
                    tools: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    type: "chat";
                    messages: ({
                        content: string;
                        role: "system";
                        name?: string | undefined;
                    } | {
                        content: (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[]) & (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined);
                        role: "user";
                        name?: string | undefined;
                    } | {
                        content: string;
                        role: "tool";
                        tool_call_id: string;
                    } | {
                        name: string;
                        content: string;
                        role: "function";
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | undefined;
                        name?: string | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                }, {
                    type: "chat";
                    messages: ({
                        role: "system";
                        content?: string | undefined;
                        name?: string | undefined;
                    } | {
                        role: "user";
                        content?: string | ({
                            type: "text";
                            text?: string | undefined;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined;
                        name?: string | undefined;
                    } | {
                        role: "tool";
                        content?: string | undefined;
                        tool_call_id?: string | undefined;
                    } | {
                        name: string;
                        role: "function";
                        content?: string | undefined;
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | null | undefined;
                        name?: string | null | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                }>]>>>;
                options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    model: z.ZodOptional<z.ZodString>;
                    params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough">>]>>;
                    position: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    model?: string | undefined;
                    params?: z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                }, {
                    model?: string | undefined;
                    params?: z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                }>>>;
                parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    type: z.ZodLiteral<"llm_classifier">;
                    use_cot: z.ZodBoolean;
                    choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                }, {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                }>>>;
                tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "function";
                    id: string;
                }, {
                    type: "function";
                    id: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"global">;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "global";
                    name: string;
                }, {
                    type: "global";
                    name: string;
                }>]>, "many">>>;
                origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    prompt_id: z.ZodOptional<z.ZodString>;
                    project_id: z.ZodOptional<z.ZodString>;
                    prompt_version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                }, {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        content: string;
                        role: "system";
                        name?: string | undefined;
                    } | {
                        content: (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[]) & (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined);
                        role: "user";
                        name?: string | undefined;
                    } | {
                        content: string;
                        role: "tool";
                        tool_call_id: string;
                    } | {
                        name: string;
                        content: string;
                        role: "function";
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | undefined;
                        name?: string | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            }, {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        role: "system";
                        content?: string | undefined;
                        name?: string | undefined;
                    } | {
                        role: "user";
                        content?: string | ({
                            type: "text";
                            text?: string | undefined;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined;
                        name?: string | undefined;
                    } | {
                        role: "tool";
                        content?: string | undefined;
                        tool_call_id?: string | undefined;
                    } | {
                        name: string;
                        role: "function";
                        content?: string | undefined;
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | null | undefined;
                        name?: string | null | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            }>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        content: string;
                        role: "system";
                        name?: string | undefined;
                    } | {
                        content: (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[]) & (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined);
                        role: "user";
                        name?: string | undefined;
                    } | {
                        content: string;
                        role: "tool";
                        tool_call_id: string;
                    } | {
                        name: string;
                        content: string;
                        role: "function";
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | undefined;
                        name?: string | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        }, {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        role: "system";
                        content?: string | undefined;
                        name?: string | undefined;
                    } | {
                        role: "user";
                        content?: string | ({
                            type: "text";
                            text?: string | undefined;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined;
                        name?: string | undefined;
                    } | {
                        role: "tool";
                        content?: string | undefined;
                        tool_call_id?: string | undefined;
                    } | {
                        name: string;
                        role: "function";
                        content?: string | undefined;
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | null | undefined;
                        name?: string | null | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        }>]>, "atleastone">;
    }, "strip", z.ZodTypeAny, {
        status: "enabled";
        token: string;
        function_ids: [{
            function_id: string;
            version?: string | undefined;
        } | {
            slug: string;
            project_name: string;
            version?: string | undefined;
        } | {
            global_function: string;
        } | {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        } | {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        } | {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        content: string;
                        role: "system";
                        name?: string | undefined;
                    } | {
                        content: (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[]) & (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined);
                        role: "user";
                        name?: string | undefined;
                    } | {
                        content: string;
                        role: "tool";
                        tool_call_id: string;
                    } | {
                        name: string;
                        content: string;
                        role: "function";
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | undefined;
                        name?: string | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        }, ...({
            function_id: string;
            version?: string | undefined;
        } | {
            slug: string;
            project_name: string;
            version?: string | undefined;
        } | {
            global_function: string;
        } | {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        } | {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        } | {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        content: string;
                        role: "system";
                        name?: string | undefined;
                    } | {
                        content: (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[]) & (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined);
                        role: "user";
                        name?: string | undefined;
                    } | {
                        content: string;
                        role: "tool";
                        tool_call_id: string;
                    } | {
                        name: string;
                        content: string;
                        role: "function";
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | undefined;
                        name?: string | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        })[]];
    }, {
        status: "enabled";
        token: string;
        function_ids: [{
            function_id: string;
            version?: string | undefined;
        } | {
            slug: string;
            project_name: string;
            version?: string | undefined;
        } | {
            global_function: string;
        } | {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        } | {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        } | {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        role: "system";
                        content?: string | undefined;
                        name?: string | undefined;
                    } | {
                        role: "user";
                        content?: string | ({
                            type: "text";
                            text?: string | undefined;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined;
                        name?: string | undefined;
                    } | {
                        role: "tool";
                        content?: string | undefined;
                        tool_call_id?: string | undefined;
                    } | {
                        name: string;
                        role: "function";
                        content?: string | undefined;
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | null | undefined;
                        name?: string | null | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        }, ...({
            function_id: string;
            version?: string | undefined;
        } | {
            slug: string;
            project_name: string;
            version?: string | undefined;
        } | {
            global_function: string;
        } | {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        } | {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        } | {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        role: "system";
                        content?: string | undefined;
                        name?: string | undefined;
                    } | {
                        role: "user";
                        content?: string | ({
                            type: "text";
                            text?: string | undefined;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined;
                        name?: string | undefined;
                    } | {
                        role: "tool";
                        content?: string | undefined;
                        tool_call_id?: string | undefined;
                    } | {
                        name: string;
                        role: "function";
                        content?: string | undefined;
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | null | undefined;
                        name?: string | null | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        })[]];
    }>, z.ZodObject<{
        status: z.ZodLiteral<"disabled">;
    }, "strip", z.ZodTypeAny, {
        status: "disabled";
    }, {
        status: "disabled";
    }>, z.ZodNull]>;
}, "strip", z.ZodTypeAny, {
    kind: "state_override";
    state: {
        status: "enabled";
        token: string;
        function_ids: [{
            function_id: string;
            version?: string | undefined;
        } | {
            slug: string;
            project_name: string;
            version?: string | undefined;
        } | {
            global_function: string;
        } | {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        } | {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        } | {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        content: string;
                        role: "system";
                        name?: string | undefined;
                    } | {
                        content: (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[]) & (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined);
                        role: "user";
                        name?: string | undefined;
                    } | {
                        content: string;
                        role: "tool";
                        tool_call_id: string;
                    } | {
                        name: string;
                        content: string;
                        role: "function";
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | undefined;
                        name?: string | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        }, ...({
            function_id: string;
            version?: string | undefined;
        } | {
            slug: string;
            project_name: string;
            version?: string | undefined;
        } | {
            global_function: string;
        } | {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        } | {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        } | {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        content: string;
                        role: "system";
                        name?: string | undefined;
                    } | {
                        content: (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[]) & (string | ({
                            type: "text";
                            text: string;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined);
                        role: "user";
                        name?: string | undefined;
                    } | {
                        content: string;
                        role: "tool";
                        tool_call_id: string;
                    } | {
                        name: string;
                        content: string;
                        role: "function";
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | undefined;
                        name?: string | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        })[]];
    } | {
        status: "disabled";
    } | null;
}, {
    kind: "state_override";
    state: {
        status: "enabled";
        token: string;
        function_ids: [{
            function_id: string;
            version?: string | undefined;
        } | {
            slug: string;
            project_name: string;
            version?: string | undefined;
        } | {
            global_function: string;
        } | {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        } | {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        } | {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        role: "system";
                        content?: string | undefined;
                        name?: string | undefined;
                    } | {
                        role: "user";
                        content?: string | ({
                            type: "text";
                            text?: string | undefined;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined;
                        name?: string | undefined;
                    } | {
                        role: "tool";
                        content?: string | undefined;
                        tool_call_id?: string | undefined;
                    } | {
                        name: string;
                        role: "function";
                        content?: string | undefined;
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | null | undefined;
                        name?: string | null | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        }, ...({
            function_id: string;
            version?: string | undefined;
        } | {
            slug: string;
            project_name: string;
            version?: string | undefined;
        } | {
            global_function: string;
        } | {
            prompt_session_id: string;
            prompt_session_function_id: string;
            version?: string | undefined;
        } | {
            code: string;
            inline_context: {
                runtime: "node" | "python";
                version: string;
            };
            name?: string | null | undefined;
        } | {
            inline_prompt: {
                prompt?: {
                    type: "completion";
                    content: string;
                } | {
                    type: "chat";
                    messages: ({
                        role: "system";
                        content?: string | undefined;
                        name?: string | undefined;
                    } | {
                        role: "user";
                        content?: string | ({
                            type: "text";
                            text?: string | undefined;
                        } | {
                            type: "image_url";
                            image_url: {
                                url: string;
                                detail?: "auto" | "low" | "high" | undefined;
                            };
                        })[] | undefined;
                        name?: string | undefined;
                    } | {
                        role: "tool";
                        content?: string | undefined;
                        tool_call_id?: string | undefined;
                    } | {
                        name: string;
                        role: "function";
                        content?: string | undefined;
                    } | {
                        role: "assistant";
                        content?: string | null | undefined;
                        function_call?: {
                            name: string;
                            arguments: string;
                        } | null | undefined;
                        name?: string | null | undefined;
                        tool_calls?: {
                            function: {
                                name: string;
                                arguments: string;
                            };
                            type: "function";
                            id: string;
                        }[] | null | undefined;
                    } | {
                        role: "model";
                        content?: string | null | undefined;
                    })[];
                    tools?: string | undefined;
                } | null | undefined;
                options?: {
                    model?: string | undefined;
                    params?: z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        max_tokens: z.ZodOptional<z.ZodNumber>;
                        frequency_penalty: z.ZodOptional<z.ZodNumber>;
                        presence_penalty: z.ZodOptional<z.ZodNumber>;
                        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"json_object">;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_object";
                        }, {
                            type: "json_object";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"json_schema">;
                            json_schema: z.ZodObject<{
                                name: z.ZodString;
                                description: z.ZodOptional<z.ZodString>;
                                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }, {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }, {
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                description?: string | undefined;
                                schema?: Record<string, unknown> | undefined;
                                strict?: boolean | null | undefined;
                            };
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"text">;
                        }, "strip", z.ZodTypeAny, {
                            type: "text";
                        }, {
                            type: "text";
                        }>]>>>;
                        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                            type: z.ZodLiteral<"function">;
                            function: z.ZodObject<{
                                name: z.ZodString;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                            }, {
                                name: string;
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }, {
                            function: {
                                name: string;
                            };
                            type: "function";
                        }>]>>;
                        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>]>>;
                        n: z.ZodOptional<z.ZodNumber>;
                        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        max_tokens: z.ZodNumber;
                        temperature: z.ZodNumber;
                        top_p: z.ZodOptional<z.ZodNumber>;
                        top_k: z.ZodOptional<z.ZodNumber>;
                        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                        topP: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                        temperature: z.ZodOptional<z.ZodNumber>;
                        topK: z.ZodOptional<z.ZodNumber>;
                    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                        use_cache: z.ZodOptional<z.ZodBoolean>;
                    }, z.ZodTypeAny, "passthrough"> | undefined;
                    position?: string | undefined;
                } | null | undefined;
                parser?: {
                    type: "llm_classifier";
                    use_cot: boolean;
                    choice_scores: Record<string, number>;
                } | null | undefined;
                tool_functions?: ({
                    type: "function";
                    id: string;
                } | {
                    type: "global";
                    name: string;
                })[] | null | undefined;
                origin?: {
                    prompt_id?: string | undefined;
                    project_id?: string | undefined;
                    prompt_version?: string | undefined;
                } | null | undefined;
            };
            name?: string | null | undefined;
        })[]];
    } | {
        status: "disabled";
    } | null;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"state_force_reselect">;
}, "strip", z.ZodTypeAny, {
    kind: "state_force_reselect";
}, {
    kind: "state_force_reselect";
}>]>;
type AsyncScoringControl = z.infer<typeof asyncScoringControlSchema>;

declare const aclObjectTypeEnum: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
type AclObjectType = z.infer<typeof aclObjectTypeEnum>;
declare const userSchema: z.ZodObject<{
    id: z.ZodString;
    given_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    family_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    avatar_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    given_name?: string | null | undefined;
    family_name?: string | null | undefined;
    email?: string | null | undefined;
    avatar_url?: string | null | undefined;
    created?: string | null | undefined;
}, {
    id: string;
    given_name?: string | null | undefined;
    family_name?: string | null | undefined;
    email?: string | null | undefined;
    avatar_url?: string | null | undefined;
    created?: string | null | undefined;
}>;
type User = z.infer<typeof userSchema>;
declare const organizationSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    api_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_universal_api: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    proxy_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    realtime_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    api_url?: string | null | undefined;
    is_universal_api?: boolean | null | undefined;
    proxy_url?: string | null | undefined;
    realtime_url?: string | null | undefined;
    created?: string | null | undefined;
}, {
    name: string;
    id: string;
    api_url?: string | null | undefined;
    is_universal_api?: boolean | null | undefined;
    proxy_url?: string | null | undefined;
    realtime_url?: string | null | undefined;
    created?: string | null | undefined;
}>;
type Organization = z.infer<typeof organizationSchema>;
declare const maxOverWindowSchema: z.ZodObject<{
    window_size_days: z.ZodNumber;
    max_value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    window_size_days: number;
    max_value: number;
}, {
    window_size_days: number;
    max_value: number;
}>;
type MaxOverWindow = z.infer<typeof maxOverWindowSchema>;
declare const resourcesSchema: z.ZodObject<{
    org_id: z.ZodString;
    forbid_toggle_experiment_public_to_private: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    num_private_experiment_row_actions: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        window_size_days: z.ZodNumber;
        max_value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        window_size_days: number;
        max_value: number;
    }, {
        window_size_days: number;
        max_value: number;
    }>>>;
    forbid_insert_datasets: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    forbid_insert_prompt_sessions: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    forbid_access_sql_explorer: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    num_production_log_row_actions: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        window_size_days: z.ZodNumber;
        max_value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        window_size_days: number;
        max_value: number;
    }, {
        window_size_days: number;
        max_value: number;
    }>>>;
    num_dataset_row_actions: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        window_size_days: z.ZodNumber;
        max_value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        window_size_days: number;
        max_value: number;
    }, {
        window_size_days: number;
        max_value: number;
    }>>>;
}, "strip", z.ZodTypeAny, {
    org_id: string;
    forbid_toggle_experiment_public_to_private?: boolean | null | undefined;
    num_private_experiment_row_actions?: {
        window_size_days: number;
        max_value: number;
    } | null | undefined;
    forbid_insert_datasets?: boolean | null | undefined;
    forbid_insert_prompt_sessions?: boolean | null | undefined;
    forbid_access_sql_explorer?: boolean | null | undefined;
    num_production_log_row_actions?: {
        window_size_days: number;
        max_value: number;
    } | null | undefined;
    num_dataset_row_actions?: {
        window_size_days: number;
        max_value: number;
    } | null | undefined;
}, {
    org_id: string;
    forbid_toggle_experiment_public_to_private?: boolean | null | undefined;
    num_private_experiment_row_actions?: {
        window_size_days: number;
        max_value: number;
    } | null | undefined;
    forbid_insert_datasets?: boolean | null | undefined;
    forbid_insert_prompt_sessions?: boolean | null | undefined;
    forbid_access_sql_explorer?: boolean | null | undefined;
    num_production_log_row_actions?: {
        window_size_days: number;
        max_value: number;
    } | null | undefined;
    num_dataset_row_actions?: {
        window_size_days: number;
        max_value: number;
    } | null | undefined;
}>;
type Resources = z.infer<typeof resourcesSchema>;
declare const memberSchema: z.ZodObject<{
    org_id: z.ZodString;
    user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    user_id: string;
    org_id: string;
}, {
    user_id: string;
    org_id: string;
}>;
type Member = z.infer<typeof memberSchema>;
declare const aiSecretSchema: z.ZodObject<{
    id: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    org_id: z.ZodString;
    name: z.ZodString;
    type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    preview_secret: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    org_id: string;
    created?: string | null | undefined;
    type?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    preview_secret?: string | null | undefined;
}, {
    name: string;
    id: string;
    org_id: string;
    created?: string | null | undefined;
    type?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    preview_secret?: string | null | undefined;
}>;
type AISecret = z.infer<typeof aiSecretSchema>;
declare const envVarObjectTypeEnum: z.ZodEnum<["organization", "project", "function"]>;
declare const envVarSchema: z.ZodObject<{
    id: z.ZodString;
    object_type: z.ZodEnum<["organization", "project", "function"]>;
    object_id: z.ZodString;
    name: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    used: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    object_type: "function" | "project" | "organization";
    object_id: string;
    created?: string | null | undefined;
    used?: string | null | undefined;
}, {
    name: string;
    id: string;
    object_type: "function" | "project" | "organization";
    object_id: string;
    created?: string | null | undefined;
    used?: string | null | undefined;
}>;
type EnvVar = z.infer<typeof envVarSchema>;
declare const customColumnSchema: z.ZodObject<{
    id: z.ZodString;
    object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
    object_id: z.ZodString;
    subtype: z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>;
    name: z.ZodString;
    expr: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    subtype: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null;
    expr: string;
    created?: string | null | undefined;
}, {
    name: string;
    id: string;
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    subtype: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null;
    expr: string;
    created?: string | null | undefined;
}>;
type CustomColumn = z.infer<typeof customColumnSchema>;
declare const apiKeySchema: z.ZodObject<{
    id: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    name: z.ZodString;
    preview_name: z.ZodString;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    org_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    preview_name: string;
    created?: string | null | undefined;
    user_id?: string | null | undefined;
    org_id?: string | null | undefined;
}, {
    name: string;
    id: string;
    preview_name: string;
    created?: string | null | undefined;
    user_id?: string | null | undefined;
    org_id?: string | null | undefined;
}>;
type ApiKey = z.infer<typeof apiKeySchema>;
declare const projectSettingsSchema: z.ZodObject<{
    comparison_key: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    comparison_key?: string | null | undefined;
}, {
    comparison_key?: string | null | undefined;
}>;
type ProjectSettings = z.infer<typeof projectSettingsSchema>;
declare const projectSchema: z.ZodObject<{
    id: z.ZodString;
    org_id: z.ZodString;
    name: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    settings: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        comparison_key: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        comparison_key?: string | null | undefined;
    }, {
        comparison_key?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    org_id: string;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    settings?: {
        comparison_key?: string | null | undefined;
    } | null | undefined;
}, {
    name: string;
    id: string;
    org_id: string;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    settings?: {
        comparison_key?: string | null | undefined;
    } | null | undefined;
}>;
type Project = z.infer<typeof projectSchema>;
declare const datasetSchema: z.ZodObject<{
    id: z.ZodString;
    project_id: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    project_id: string;
    description?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}, {
    name: string;
    id: string;
    project_id: string;
    description?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}>;
type Dataset = z.infer<typeof datasetSchema>;
declare const promptLogIdLiteralSchema: z.ZodLiteral<"p">;
declare const promptBaseSchema: z.ZodObject<{
    id: z.ZodString;
    project_id: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    project_id: string;
    description?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}, {
    name: string;
    id: string;
    project_id: string;
    description?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}>;
declare const promptSchema: z.ZodObject<{
    id: z.ZodString;
    _xact_id: z.ZodString;
    project_id: z.ZodString;
    log_id: z.ZodLiteral<"p">;
    org_id: z.ZodString;
    name: z.ZodString;
    slug: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    prompt_data: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "system";
                name?: string | undefined;
            }, {
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                }, {
                    type: "text";
                    text?: string | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            }, {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>>, {
                    name: string;
                    arguments: string;
                } | undefined, {
                    name: string;
                    arguments: string;
                } | null | undefined>;
                name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>>, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            }, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "tool";
                tool_call_id: string;
            }, {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                content: string;
                role: "function";
            }, {
                name: string;
                role: "function";
                content?: string | undefined;
            }>]>, z.ZodObject<{
                role: z.ZodEnum<["model"]>;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>>>;
        options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }, {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }>>>;
        parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>>>;
        tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    function_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "scorer", "task", "tool"]>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    slug: string;
    project_id: string;
    org_id: string;
    _xact_id: string;
    log_id: "p";
    description?: string | null | undefined;
    created?: string | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    function_type?: "tool" | "llm" | "scorer" | "task" | null | undefined;
}, {
    name: string;
    id: string;
    slug: string;
    project_id: string;
    org_id: string;
    _xact_id: string;
    log_id: "p";
    description?: string | null | undefined;
    created?: string | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    function_type?: "tool" | "llm" | "scorer" | "task" | null | undefined;
}>;
type Prompt = z.infer<typeof promptSchema>;
declare const codeBundleSchema: z.ZodObject<{
    runtime_context: z.ZodObject<{
        runtime: z.ZodEnum<["node", "python"]>;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        runtime: "node" | "python";
        version: string;
    }, {
        runtime: "node" | "python";
        version: string;
    }>;
    location: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"experiment">;
        eval_name: z.ZodString;
        position: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"task">;
        }, "strip", z.ZodTypeAny, {
            type: "task";
        }, {
            type: "task";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"scorer">;
            index: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "scorer";
            index: number;
        }, {
            type: "scorer";
            index: number;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "experiment";
        position: {
            type: "task";
        } | {
            type: "scorer";
            index: number;
        };
        eval_name: string;
    }, {
        type: "experiment";
        position: {
            type: "task";
        } | {
            type: "scorer";
            index: number;
        };
        eval_name: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        index: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "function";
        index: number;
    }, {
        type: "function";
        index: number;
    }>]>;
    bundle_id: z.ZodString;
    preview: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    runtime_context: {
        runtime: "node" | "python";
        version: string;
    };
    location: {
        type: "experiment";
        position: {
            type: "task";
        } | {
            type: "scorer";
            index: number;
        };
        eval_name: string;
    } | {
        type: "function";
        index: number;
    };
    bundle_id: string;
    preview?: string | null | undefined;
}, {
    runtime_context: {
        runtime: "node" | "python";
        version: string;
    };
    location: {
        type: "experiment";
        position: {
            type: "task";
        } | {
            type: "scorer";
            index: number;
        };
        eval_name: string;
    } | {
        type: "function";
        index: number;
    };
    bundle_id: string;
    preview?: string | null | undefined;
}>;
type CodeBundle = z.infer<typeof codeBundleSchema>;
declare const functionDataSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"prompt">;
}, "strip", z.ZodTypeAny, {
    type: "prompt";
}, {
    type: "prompt";
}>, z.ZodObject<{
    type: z.ZodLiteral<"code">;
    data: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"bundle">;
    }, "strip", z.ZodTypeAny, {
        type: "bundle";
    }, {
        type: "bundle";
    }>, z.ZodObject<{
        runtime_context: z.ZodObject<{
            runtime: z.ZodEnum<["node", "python"]>;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            runtime: "node" | "python";
            version: string;
        }, {
            runtime: "node" | "python";
            version: string;
        }>;
        location: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"experiment">;
            eval_name: z.ZodString;
            position: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"task">;
            }, "strip", z.ZodTypeAny, {
                type: "task";
            }, {
                type: "task";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"scorer">;
                index: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "scorer";
                index: number;
            }, {
                type: "scorer";
                index: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "experiment";
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
            eval_name: string;
        }, {
            type: "experiment";
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
            eval_name: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            index: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            index: number;
        }, {
            type: "function";
            index: number;
        }>]>;
        bundle_id: z.ZodString;
        preview: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
        location: {
            type: "experiment";
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
            eval_name: string;
        } | {
            type: "function";
            index: number;
        };
        bundle_id: string;
        preview?: string | null | undefined;
    }, {
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
        location: {
            type: "experiment";
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
            eval_name: string;
        } | {
            type: "function";
            index: number;
        };
        bundle_id: string;
        preview?: string | null | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"inline">;
        runtime_context: z.ZodObject<{
            runtime: z.ZodEnum<["node", "python"]>;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            runtime: "node" | "python";
            version: string;
        }, {
            runtime: "node" | "python";
            version: string;
        }>;
        code: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        type: "inline";
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
    }, {
        code: string;
        type: "inline";
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "code";
    data: ({
        type: "bundle";
    } & {
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
        location: {
            type: "experiment";
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
            eval_name: string;
        } | {
            type: "function";
            index: number;
        };
        bundle_id: string;
        preview?: string | null | undefined;
    }) | {
        code: string;
        type: "inline";
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
    };
}, {
    type: "code";
    data: ({
        type: "bundle";
    } & {
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
        location: {
            type: "experiment";
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
            eval_name: string;
        } | {
            type: "function";
            index: number;
        };
        bundle_id: string;
        preview?: string | null | undefined;
    }) | {
        code: string;
        type: "inline";
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"global">;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "global";
    name: string;
}, {
    type: "global";
    name: string;
}>]>;
declare const functionSchema: z.ZodObject<{
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodString;
    id: z.ZodString;
    slug: z.ZodString;
    project_id: z.ZodString;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    org_id: z.ZodString;
    _xact_id: z.ZodString;
    log_id: z.ZodLiteral<"p">;
    prompt_data: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "system";
                name?: string | undefined;
            }, {
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                }, {
                    type: "text";
                    text?: string | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            }, {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>>, {
                    name: string;
                    arguments: string;
                } | undefined, {
                    name: string;
                    arguments: string;
                } | null | undefined>;
                name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>>, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            }, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "tool";
                tool_call_id: string;
            }, {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                content: string;
                role: "function";
            }, {
                name: string;
                role: "function";
                content?: string | undefined;
            }>]>, z.ZodObject<{
                role: z.ZodEnum<["model"]>;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>>>;
        options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }, {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }>>>;
        parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>>>;
        tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    function_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "scorer", "task", "tool"]>>>;
    function_data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"prompt">;
    }, "strip", z.ZodTypeAny, {
        type: "prompt";
    }, {
        type: "prompt";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"code">;
        data: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"bundle">;
        }, "strip", z.ZodTypeAny, {
            type: "bundle";
        }, {
            type: "bundle";
        }>, z.ZodObject<{
            runtime_context: z.ZodObject<{
                runtime: z.ZodEnum<["node", "python"]>;
                version: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                runtime: "node" | "python";
                version: string;
            }, {
                runtime: "node" | "python";
                version: string;
            }>;
            location: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"experiment">;
                eval_name: z.ZodString;
                position: z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"task">;
                }, "strip", z.ZodTypeAny, {
                    type: "task";
                }, {
                    type: "task";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"scorer">;
                    index: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "scorer";
                    index: number;
                }, {
                    type: "scorer";
                    index: number;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            }, {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                index: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                index: number;
            }, {
                type: "function";
                index: number;
            }>]>;
            bundle_id: z.ZodString;
            preview: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }, {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"inline">;
            runtime_context: z.ZodObject<{
                runtime: z.ZodEnum<["node", "python"]>;
                version: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                runtime: "node" | "python";
                version: string;
            }, {
                runtime: "node" | "python";
                version: string;
            }>;
            code: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        }, {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "code";
        data: ({
            type: "bundle";
        } & {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }) | {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        };
    }, {
        type: "code";
        data: ({
            type: "bundle";
        } & {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }) | {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"global">;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "global";
        name: string;
    }, {
        type: "global";
        name: string;
    }>]>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
        object_id: z.ZodString;
        internal: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        internal?: boolean | null | undefined;
    }, {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        internal?: boolean | null | undefined;
    }>>>;
    function_schema: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        parameters: z.ZodUnknown;
        returns: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        parameters?: unknown;
        returns?: unknown;
    }, {
        parameters?: unknown;
        returns?: unknown;
    }>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    slug: string;
    project_id: string;
    org_id: string;
    _xact_id: string;
    log_id: "p";
    function_data: {
        type: "prompt";
    } | {
        type: "code";
        data: ({
            type: "bundle";
        } & {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }) | {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        };
    } | {
        type: "global";
        name: string;
    };
    description?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    created?: string | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
    function_type?: "tool" | "llm" | "scorer" | "task" | null | undefined;
    origin?: {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        internal?: boolean | null | undefined;
    } | null | undefined;
    function_schema?: {
        parameters?: unknown;
        returns?: unknown;
    } | null | undefined;
}, {
    name: string;
    id: string;
    slug: string;
    project_id: string;
    org_id: string;
    _xact_id: string;
    log_id: "p";
    function_data: {
        type: "prompt";
    } | {
        type: "code";
        data: ({
            type: "bundle";
        } & {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }) | {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        };
    } | {
        type: "global";
        name: string;
    };
    description?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    created?: string | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
    function_type?: "tool" | "llm" | "scorer" | "task" | null | undefined;
    origin?: {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        internal?: boolean | null | undefined;
    } | null | undefined;
    function_schema?: {
        parameters?: unknown;
        returns?: unknown;
    } | null | undefined;
}>;
type FunctionObject = z.infer<typeof functionSchema>;
declare const experimentSchema: z.ZodObject<{
    id: z.ZodString;
    project_id: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    repo_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        commit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        branch: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        dirty: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        author_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author_email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        commit_message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        commit_time: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        git_diff: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    }, {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    }>>>;
    commit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    base_exp_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    dataset_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dataset_version: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    public: z.ZodBoolean;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    project_id: string;
    public: boolean;
    description?: string | null | undefined;
    created?: string | null | undefined;
    repo_info?: {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    } | null | undefined;
    commit?: string | null | undefined;
    base_exp_id?: string | null | undefined;
    deleted_at?: string | null | undefined;
    dataset_id?: string | null | undefined;
    dataset_version?: string | null | undefined;
    user_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}, {
    name: string;
    id: string;
    project_id: string;
    public: boolean;
    description?: string | null | undefined;
    created?: string | null | undefined;
    repo_info?: {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    } | null | undefined;
    commit?: string | null | undefined;
    base_exp_id?: string | null | undefined;
    deleted_at?: string | null | undefined;
    dataset_id?: string | null | undefined;
    dataset_version?: string | null | undefined;
    user_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}>;
type Experiment = z.infer<typeof experimentSchema>;
declare const promptSessionSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    project_id: z.ZodString;
    org_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    project_id: string;
    description?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    org_id?: string | null | undefined;
}, {
    name: string;
    id: string;
    project_id: string;
    description?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    org_id?: string | null | undefined;
}>;
type PromptSession = z.infer<typeof promptSessionSchema>;
declare const permissionEnum: z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>;
type Permission = z.infer<typeof permissionEnum>;
declare const roleSchema: z.ZodObject<{
    id: z.ZodString;
    org_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    member_permissions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        permission: z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>;
        restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
    }, "strip", z.ZodTypeAny, {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }, {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }>, "many">>>;
    member_roles: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    org_id?: string | null | undefined;
    user_id?: string | null | undefined;
    created?: string | null | undefined;
    description?: string | null | undefined;
    deleted_at?: string | null | undefined;
    member_permissions?: {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }[] | null | undefined;
    member_roles?: string[] | null | undefined;
}, {
    name: string;
    id: string;
    org_id?: string | null | undefined;
    user_id?: string | null | undefined;
    created?: string | null | undefined;
    description?: string | null | undefined;
    deleted_at?: string | null | undefined;
    member_permissions?: {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }[] | null | undefined;
    member_roles?: string[] | null | undefined;
}>;
type Role = z.infer<typeof roleSchema>;
declare const groupSchema: z.ZodObject<{
    id: z.ZodString;
    org_id: z.ZodString;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    member_users: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    member_groups: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    org_id: string;
    user_id?: string | null | undefined;
    created?: string | null | undefined;
    description?: string | null | undefined;
    deleted_at?: string | null | undefined;
    member_users?: string[] | null | undefined;
    member_groups?: string[] | null | undefined;
}, {
    name: string;
    id: string;
    org_id: string;
    user_id?: string | null | undefined;
    created?: string | null | undefined;
    description?: string | null | undefined;
    deleted_at?: string | null | undefined;
    member_users?: string[] | null | undefined;
    member_groups?: string[] | null | undefined;
}>;
type Group = z.infer<typeof groupSchema>;
declare const projectScoreTypeEnum: z.ZodEnum<["slider", "categorical", "weighted", "minimum", "maximum", "online"]>;
type ProjectScoreType = z.infer<typeof projectScoreTypeEnum>;
declare const projectScoreCategory: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: number;
    name: string;
}, {
    value: number;
    name: string;
}>;
type ProjectScoreCategory = z.infer<typeof projectScoreCategory>;
declare const onlineScoreConfigSchema: z.ZodEffects<z.ZodObject<{
    sampling_rate: z.ZodNumber;
    scorers: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"function">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "function";
        id: string;
    }, {
        type: "function";
        id: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"global">;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "global";
        name: string;
    }, {
        type: "global";
        name: string;
    }>]>, "many">;
    apply_to_root_span: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    apply_to_span_names: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    sampling_rate: number;
    scorers: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[];
    apply_to_root_span?: boolean | null | undefined;
    apply_to_span_names?: string[] | null | undefined;
}, {
    sampling_rate: number;
    scorers: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[];
    apply_to_root_span?: boolean | null | undefined;
    apply_to_span_names?: string[] | null | undefined;
}>, {
    sampling_rate: number;
    scorers: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[];
    apply_to_root_span?: boolean | null | undefined;
    apply_to_span_names?: string[] | null | undefined;
}, {
    sampling_rate: number;
    scorers: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[];
    apply_to_root_span?: boolean | null | undefined;
    apply_to_span_names?: string[] | null | undefined;
}>;
type OnlineScoreConfig = z.infer<typeof onlineScoreConfigSchema>;
declare const projectScoreSchema: z.ZodObject<{
    id: z.ZodString;
    project_id: z.ZodString;
    user_id: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    score_type: z.ZodEnum<["slider", "categorical", "weighted", "minimum", "maximum", "online"]>;
    categories: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        name: string;
    }, {
        value: number;
        name: string;
    }>, "many">, z.ZodRecord<z.ZodString, z.ZodNumber>, z.ZodArray<z.ZodString, "many">]>>>;
    config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        multi_select: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        destination: z.ZodOptional<z.ZodNullable<z.ZodLiteral<"expected">>>;
        online: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodObject<{
            sampling_rate: z.ZodNumber;
            scorers: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"function">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                id: string;
            }, {
                type: "function";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"global">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "global";
                name: string;
            }, {
                type: "global";
                name: string;
            }>]>, "many">;
            apply_to_root_span: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            apply_to_span_names: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }>, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    }, {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    }>>>;
    position: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    project_id: string;
    user_id: string;
    score_type: "minimum" | "maximum" | "slider" | "categorical" | "weighted" | "online";
    created?: string | null | undefined;
    description?: string | null | undefined;
    categories?: string[] | Record<string, number> | {
        value: number;
        name: string;
    }[] | null | undefined;
    config?: {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    position?: string | null | undefined;
}, {
    name: string;
    id: string;
    project_id: string;
    user_id: string;
    score_type: "minimum" | "maximum" | "slider" | "categorical" | "weighted" | "online";
    created?: string | null | undefined;
    description?: string | null | undefined;
    categories?: string[] | Record<string, number> | {
        value: number;
        name: string;
    }[] | null | undefined;
    config?: {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    position?: string | null | undefined;
}>;
type ProjectScore = z.infer<typeof projectScoreSchema>;
declare const projectTagSchema: z.ZodObject<{
    id: z.ZodString;
    project_id: z.ZodString;
    user_id: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    color: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    project_id: string;
    user_id: string;
    created?: string | null | undefined;
    description?: string | null | undefined;
    color?: string | null | undefined;
}, {
    name: string;
    id: string;
    project_id: string;
    user_id: string;
    created?: string | null | undefined;
    description?: string | null | undefined;
    color?: string | null | undefined;
}>;
type ProjectTag = z.infer<typeof projectTagSchema>;
declare const spanIframeBaseSchema: z.ZodObject<{
    id: z.ZodString;
    project_id: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    project_id: string;
    description?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}, {
    name: string;
    id: string;
    project_id: string;
    description?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}>;
declare const spanIframeSchema: z.ZodObject<{
    id: z.ZodString;
    project_id: z.ZodString;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    url: z.ZodString;
    post_message: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    url: string;
    id: string;
    project_id: string;
    user_id?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    description?: string | null | undefined;
    post_message?: boolean | null | undefined;
}, {
    name: string;
    url: string;
    id: string;
    project_id: string;
    user_id?: string | null | undefined;
    created?: string | null | undefined;
    deleted_at?: string | null | undefined;
    description?: string | null | undefined;
    post_message?: boolean | null | undefined;
}>;
type SpanIFrame = z.infer<typeof spanIframeSchema>;
declare const viewSchema: z.ZodObject<{
    id: z.ZodString;
    object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
    object_id: z.ZodString;
    view_type: z.ZodEnum<["projects", "logs", "experiments", "datasets", "prompts", "playgrounds", "experiment", "dataset"]>;
    name: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    view_data: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        search: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            filter: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            tag: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            match: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            sort: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
        }, "strip", z.ZodTypeAny, {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        }, {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    }, {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    }>>>;
    options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        columnVisibility: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodBoolean>>>;
        columnOrder: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        columnSizing: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
    }, "strip", z.ZodTypeAny, {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    }, {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    }>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    view_type: "experiment" | "dataset" | "projects" | "logs" | "experiments" | "datasets" | "prompts" | "playgrounds";
    created?: string | null | undefined;
    view_data?: {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    options?: {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    } | null | undefined;
    user_id?: string | null | undefined;
    deleted_at?: string | null | undefined;
}, {
    name: string;
    id: string;
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    view_type: "experiment" | "dataset" | "projects" | "logs" | "experiments" | "datasets" | "prompts" | "playgrounds";
    created?: string | null | undefined;
    view_data?: {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    options?: {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    } | null | undefined;
    user_id?: string | null | undefined;
    deleted_at?: string | null | undefined;
}>;
type View = z.infer<typeof viewSchema>;
declare const aclSchema: z.ZodObject<{
    id: z.ZodString;
    object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
    object_id: z.ZodString;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    group_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    permission: z.ZodOptional<z.ZodNullable<z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>>>;
    restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
    role_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    _object_org_id: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    _object_org_id: string;
    user_id?: string | null | undefined;
    group_id?: string | null | undefined;
    permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
    restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    role_id?: string | null | undefined;
    created?: string | null | undefined;
}, {
    id: string;
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    _object_org_id: string;
    user_id?: string | null | undefined;
    group_id?: string | null | undefined;
    permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
    restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    role_id?: string | null | undefined;
    created?: string | null | undefined;
}>;
type Acl = z.infer<typeof aclSchema>;
declare const appLimitParamSchema: z.ZodNumber;
declare const startingAfterSchema: z.ZodString;
declare const endingBeforeSchema: z.ZodString;
declare function makeObjectIdsFilterSchema(objectName: string): z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
declare const createProjectSchema: z.ZodObject<{
    name: z.ZodString;
    org_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    org_name?: string | null | undefined;
}, {
    name: string;
    org_name?: string | null | undefined;
}>;
declare const patchProjectSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    settings: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodObject<{
        comparison_key: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        comparison_key?: string | null | undefined;
    }, {
        comparison_key?: string | null | undefined;
    }>>>>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    settings?: {
        comparison_key?: string | null | undefined;
    } | null | undefined;
}, {
    name?: string | null | undefined;
    settings?: {
        comparison_key?: string | null | undefined;
    } | null | undefined;
}>;
declare const createExperimentSchema: z.ZodObject<{
    project_id: z.ZodString;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    repo_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        commit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        branch: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        dirty: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        author_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author_email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        commit_message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        commit_time: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        git_diff: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    }, {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    }>>>;
    base_exp_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dataset_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dataset_version: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    public: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    ensure_new: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    project_id: string;
    name?: string | null | undefined;
    description?: string | null | undefined;
    repo_info?: {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    } | null | undefined;
    base_exp_id?: string | null | undefined;
    dataset_id?: string | null | undefined;
    dataset_version?: string | null | undefined;
    public?: boolean | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    ensure_new?: boolean | null | undefined;
}, {
    project_id: string;
    name?: string | null | undefined;
    description?: string | null | undefined;
    repo_info?: {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    } | null | undefined;
    base_exp_id?: string | null | undefined;
    dataset_id?: string | null | undefined;
    dataset_version?: string | null | undefined;
    public?: boolean | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    ensure_new?: boolean | null | undefined;
}>;
declare const patchExperimentSchema: z.ZodObject<{
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dataset_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    repo_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        commit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        branch: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        dirty: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        author_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author_email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        commit_message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        commit_time: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        git_diff: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    }, {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    }>>>;
    base_exp_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dataset_version: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    public: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    description?: string | null | undefined;
    dataset_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    repo_info?: {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    } | null | undefined;
    base_exp_id?: string | null | undefined;
    dataset_version?: string | null | undefined;
    public?: boolean | null | undefined;
    name?: string | null | undefined;
}, {
    description?: string | null | undefined;
    dataset_id?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    repo_info?: {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    } | null | undefined;
    base_exp_id?: string | null | undefined;
    dataset_version?: string | null | undefined;
    public?: boolean | null | undefined;
    name?: string | null | undefined;
}>;
declare const createDatasetSchema: z.ZodObject<{
    project_id: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    project_id: string;
    description?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}, {
    name: string;
    project_id: string;
    description?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}>;
declare const patchDatasetSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    description?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}, {
    name?: string | null | undefined;
    description?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
}>;
declare const createPromptSchema: z.ZodObject<{
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    project_id: z.ZodString;
    prompt_data: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "system";
                name?: string | undefined;
            }, {
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                }, {
                    type: "text";
                    text?: string | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            }, {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>>, {
                    name: string;
                    arguments: string;
                } | undefined, {
                    name: string;
                    arguments: string;
                } | null | undefined>;
                name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>>, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            }, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "tool";
                tool_call_id: string;
            }, {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                content: string;
                role: "function";
            }, {
                name: string;
                role: "function";
                content?: string | undefined;
            }>]>, z.ZodObject<{
                role: z.ZodEnum<["model"]>;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>>>;
        options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }, {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }>>>;
        parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>>>;
        tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    function_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "scorer", "task", "tool"]>>>;
    name: z.ZodString;
    slug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    slug: string;
    project_id: string;
    description?: string | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
    function_type?: "tool" | "llm" | "scorer" | "task" | null | undefined;
}, {
    name: string;
    slug: string;
    project_id: string;
    description?: string | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
    function_type?: "tool" | "llm" | "scorer" | "task" | null | undefined;
}>;
declare const createFunctionSchema: z.ZodObject<{
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    project_id: z.ZodString;
    origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
        object_id: z.ZodString;
        internal: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        internal?: boolean | null | undefined;
    }, {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        internal?: boolean | null | undefined;
    }>>>;
    prompt_data: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "system";
                name?: string | undefined;
            }, {
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                }, {
                    type: "text";
                    text?: string | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            }, {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>>, {
                    name: string;
                    arguments: string;
                } | undefined, {
                    name: string;
                    arguments: string;
                } | null | undefined>;
                name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>>, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            }, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "tool";
                tool_call_id: string;
            }, {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                content: string;
                role: "function";
            }, {
                name: string;
                role: "function";
                content?: string | undefined;
            }>]>, z.ZodObject<{
                role: z.ZodEnum<["model"]>;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>>>;
        options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }, {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }>>>;
        parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>>>;
        tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    function_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["llm", "scorer", "task", "tool"]>>>;
    function_data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"prompt">;
    }, "strip", z.ZodTypeAny, {
        type: "prompt";
    }, {
        type: "prompt";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"code">;
        data: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
            type: z.ZodLiteral<"bundle">;
        }, "strip", z.ZodTypeAny, {
            type: "bundle";
        }, {
            type: "bundle";
        }>, z.ZodObject<{
            runtime_context: z.ZodObject<{
                runtime: z.ZodEnum<["node", "python"]>;
                version: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                runtime: "node" | "python";
                version: string;
            }, {
                runtime: "node" | "python";
                version: string;
            }>;
            location: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"experiment">;
                eval_name: z.ZodString;
                position: z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"task">;
                }, "strip", z.ZodTypeAny, {
                    type: "task";
                }, {
                    type: "task";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"scorer">;
                    index: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    type: "scorer";
                    index: number;
                }, {
                    type: "scorer";
                    index: number;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            }, {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                index: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                index: number;
            }, {
                type: "function";
                index: number;
            }>]>;
            bundle_id: z.ZodString;
            preview: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }, {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }>>, z.ZodObject<{
            type: z.ZodLiteral<"inline">;
            runtime_context: z.ZodObject<{
                runtime: z.ZodEnum<["node", "python"]>;
                version: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                runtime: "node" | "python";
                version: string;
            }, {
                runtime: "node" | "python";
                version: string;
            }>;
            code: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        }, {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "code";
        data: ({
            type: "bundle";
        } & {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }) | {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        };
    }, {
        type: "code";
        data: ({
            type: "bundle";
        } & {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }) | {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"global">;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "global";
        name: string;
    }, {
        type: "global";
        name: string;
    }>]>;
    function_schema: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        parameters: z.ZodUnknown;
        returns: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        parameters?: unknown;
        returns?: unknown;
    }, {
        parameters?: unknown;
        returns?: unknown;
    }>>>;
    name: z.ZodString;
    slug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    slug: string;
    project_id: string;
    function_data: {
        type: "prompt";
    } | {
        type: "code";
        data: ({
            type: "bundle";
        } & {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }) | {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        };
    } | {
        type: "global";
        name: string;
    };
    description?: string | null | undefined;
    origin?: {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        internal?: boolean | null | undefined;
    } | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
    function_type?: "tool" | "llm" | "scorer" | "task" | null | undefined;
    function_schema?: {
        parameters?: unknown;
        returns?: unknown;
    } | null | undefined;
}, {
    name: string;
    slug: string;
    project_id: string;
    function_data: {
        type: "prompt";
    } | {
        type: "code";
        data: ({
            type: "bundle";
        } & {
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
            location: {
                type: "experiment";
                position: {
                    type: "task";
                } | {
                    type: "scorer";
                    index: number;
                };
                eval_name: string;
            } | {
                type: "function";
                index: number;
            };
            bundle_id: string;
            preview?: string | null | undefined;
        }) | {
            code: string;
            type: "inline";
            runtime_context: {
                runtime: "node" | "python";
                version: string;
            };
        };
    } | {
        type: "global";
        name: string;
    };
    description?: string | null | undefined;
    origin?: {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        internal?: boolean | null | undefined;
    } | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
    function_type?: "tool" | "llm" | "scorer" | "task" | null | undefined;
    function_schema?: {
        parameters?: unknown;
        returns?: unknown;
    } | null | undefined;
}>;
declare const patchPromptSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    slug: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
    prompt_data: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "system";
                name?: string | undefined;
            }, {
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                }, {
                    type: "text";
                    text?: string | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            }, {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>>, {
                    name: string;
                    arguments: string;
                } | undefined, {
                    name: string;
                    arguments: string;
                } | null | undefined>;
                name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>>, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            }, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "tool";
                tool_call_id: string;
            }, {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                content: string;
                role: "function";
            }, {
                name: string;
                role: "function";
                content?: string | undefined;
            }>]>, z.ZodObject<{
                role: z.ZodEnum<["model"]>;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>>>;
        options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }, {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }>>>;
        parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>>>;
        tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }>>>>>;
    tags: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    slug?: string | null | undefined;
    description?: string | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
}, {
    name?: string | null | undefined;
    slug?: string | null | undefined;
    description?: string | null | undefined;
    prompt_data?: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    } | null | undefined;
    tags?: string[] | null | undefined;
}>;
declare const patchRoleSchema: z.ZodObject<{
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    add_member_permissions: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        permission: z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>;
        restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
    }, "strip", z.ZodTypeAny, {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }, {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }>, "many">>>>>;
    remove_member_permissions: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        permission: z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>;
        restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
    }, "strip", z.ZodTypeAny, {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }, {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }>, "many">>>>>;
    add_member_roles: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>>;
    remove_member_roles: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>>;
}, "strip", z.ZodTypeAny, {
    description?: string | null | undefined;
    name?: string | null | undefined;
    add_member_permissions?: {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }[] | null | undefined;
    remove_member_permissions?: {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }[] | null | undefined;
    add_member_roles?: string[] | null | undefined;
    remove_member_roles?: string[] | null | undefined;
}, {
    description?: string | null | undefined;
    name?: string | null | undefined;
    add_member_permissions?: {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }[] | null | undefined;
    remove_member_permissions?: {
        permission: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls";
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    }[] | null | undefined;
    add_member_roles?: string[] | null | undefined;
    remove_member_roles?: string[] | null | undefined;
}>;
declare const createGroupSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    member_users: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    member_groups: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    org_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description?: string | null | undefined;
    member_users?: string[] | null | undefined;
    member_groups?: string[] | null | undefined;
    org_name?: string | null | undefined;
}, {
    name: string;
    description?: string | null | undefined;
    member_users?: string[] | null | undefined;
    member_groups?: string[] | null | undefined;
    org_name?: string | null | undefined;
}>;
declare const patchGroupSchema: z.ZodObject<{
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    add_member_users: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>>;
    remove_member_users: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>>;
    add_member_groups: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>>;
    remove_member_groups: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>>;
}, "strip", z.ZodTypeAny, {
    description?: string | null | undefined;
    name?: string | null | undefined;
    add_member_users?: string[] | null | undefined;
    remove_member_users?: string[] | null | undefined;
    add_member_groups?: string[] | null | undefined;
    remove_member_groups?: string[] | null | undefined;
}, {
    description?: string | null | undefined;
    name?: string | null | undefined;
    add_member_users?: string[] | null | undefined;
    remove_member_users?: string[] | null | undefined;
    add_member_groups?: string[] | null | undefined;
    remove_member_groups?: string[] | null | undefined;
}>;
declare const aclItemSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
    object_id: z.ZodString;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    group_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    permission: z.ZodOptional<z.ZodNullable<z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>>>;
    restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
    role_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    _object_org_id: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
}, "id" | "created" | "_object_org_id">, "strip", z.ZodTypeAny, {
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    user_id?: string | null | undefined;
    permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
    restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    group_id?: string | null | undefined;
    role_id?: string | null | undefined;
}, {
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    user_id?: string | null | undefined;
    permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
    restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
    group_id?: string | null | undefined;
    role_id?: string | null | undefined;
}>;
type AclItem = z.infer<typeof aclItemSchema>;
declare const aclBatchUpdateRequestSchema: z.ZodObject<{
    add_acls: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<Omit<{
        id: z.ZodString;
        object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
        object_id: z.ZodString;
        user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        group_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        permission: z.ZodOptional<z.ZodNullable<z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>>>;
        restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
        role_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        _object_org_id: z.ZodString;
        created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    }, "id" | "created" | "_object_org_id">, "strip", z.ZodTypeAny, {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        user_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        group_id?: string | null | undefined;
        role_id?: string | null | undefined;
    }, {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        user_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        group_id?: string | null | undefined;
        role_id?: string | null | undefined;
    }>, "many">>>;
    remove_acls: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<Omit<{
        id: z.ZodString;
        object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
        object_id: z.ZodString;
        user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        group_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        permission: z.ZodOptional<z.ZodNullable<z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>>>;
        restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
        role_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        _object_org_id: z.ZodString;
        created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    }, "id" | "created" | "_object_org_id">, "strip", z.ZodTypeAny, {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        user_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        group_id?: string | null | undefined;
        role_id?: string | null | undefined;
    }, {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        user_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        group_id?: string | null | undefined;
        role_id?: string | null | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    add_acls?: {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        user_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        group_id?: string | null | undefined;
        role_id?: string | null | undefined;
    }[] | null | undefined;
    remove_acls?: {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        user_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        group_id?: string | null | undefined;
        role_id?: string | null | undefined;
    }[] | null | undefined;
}, {
    add_acls?: {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        user_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        group_id?: string | null | undefined;
        role_id?: string | null | undefined;
    }[] | null | undefined;
    remove_acls?: {
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        user_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        group_id?: string | null | undefined;
        role_id?: string | null | undefined;
    }[] | null | undefined;
}>;
type AclBatchUpdateRequest = z.infer<typeof aclBatchUpdateRequestSchema>;
declare const aclBatchUpdateResponseSchema: z.ZodObject<{
    added_acls: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
        object_id: z.ZodString;
        user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        group_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        permission: z.ZodOptional<z.ZodNullable<z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>>>;
        restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
        role_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        _object_org_id: z.ZodString;
        created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        _object_org_id: string;
        user_id?: string | null | undefined;
        group_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        role_id?: string | null | undefined;
        created?: string | null | undefined;
    }, {
        id: string;
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        _object_org_id: string;
        user_id?: string | null | undefined;
        group_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        role_id?: string | null | undefined;
        created?: string | null | undefined;
    }>, "many">;
    removed_acls: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
        object_id: z.ZodString;
        user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        group_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        permission: z.ZodOptional<z.ZodNullable<z.ZodEnum<["create", "read", "update", "delete", "create_acls", "read_acls", "update_acls", "delete_acls"]>>>;
        restrict_object_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>>>;
        role_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        _object_org_id: z.ZodString;
        created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        _object_org_id: string;
        user_id?: string | null | undefined;
        group_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        role_id?: string | null | undefined;
        created?: string | null | undefined;
    }, {
        id: string;
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        _object_org_id: string;
        user_id?: string | null | undefined;
        group_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        role_id?: string | null | undefined;
        created?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    added_acls: {
        id: string;
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        _object_org_id: string;
        user_id?: string | null | undefined;
        group_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        role_id?: string | null | undefined;
        created?: string | null | undefined;
    }[];
    removed_acls: {
        id: string;
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        _object_org_id: string;
        user_id?: string | null | undefined;
        group_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        role_id?: string | null | undefined;
        created?: string | null | undefined;
    }[];
}, {
    added_acls: {
        id: string;
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        _object_org_id: string;
        user_id?: string | null | undefined;
        group_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        role_id?: string | null | undefined;
        created?: string | null | undefined;
    }[];
    removed_acls: {
        id: string;
        object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
        object_id: string;
        _object_org_id: string;
        user_id?: string | null | undefined;
        group_id?: string | null | undefined;
        permission?: "create" | "read" | "update" | "delete" | "create_acls" | "read_acls" | "update_acls" | "delete_acls" | null | undefined;
        restrict_object_type?: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project" | null | undefined;
        role_id?: string | null | undefined;
        created?: string | null | undefined;
    }[];
}>;
type AclBatchUpdateResponse = z.infer<typeof aclBatchUpdateResponseSchema>;
declare const createProjectScoreSchema: z.ZodObject<Pick<{
    id: z.ZodString;
    project_id: z.ZodString;
    user_id: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    score_type: z.ZodEnum<["slider", "categorical", "weighted", "minimum", "maximum", "online"]>;
    categories: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        name: string;
    }, {
        value: number;
        name: string;
    }>, "many">, z.ZodRecord<z.ZodString, z.ZodNumber>, z.ZodArray<z.ZodString, "many">]>>>;
    config: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        multi_select: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        destination: z.ZodOptional<z.ZodNullable<z.ZodLiteral<"expected">>>;
        online: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodObject<{
            sampling_rate: z.ZodNumber;
            scorers: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"function">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                id: string;
            }, {
                type: "function";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"global">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "global";
                name: string;
            }, {
                type: "global";
                name: string;
            }>]>, "many">;
            apply_to_root_span: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            apply_to_span_names: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }>, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    }, {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    }>>>;
    position: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "description" | "name" | "project_id" | "score_type" | "categories" | "config">, "strip", z.ZodTypeAny, {
    name: string;
    project_id: string;
    score_type: "minimum" | "maximum" | "slider" | "categorical" | "weighted" | "online";
    description?: string | null | undefined;
    categories?: string[] | Record<string, number> | {
        value: number;
        name: string;
    }[] | null | undefined;
    config?: {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
}, {
    name: string;
    project_id: string;
    score_type: "minimum" | "maximum" | "slider" | "categorical" | "weighted" | "online";
    description?: string | null | undefined;
    categories?: string[] | Record<string, number> | {
        value: number;
        name: string;
    }[] | null | undefined;
    config?: {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
}>;
declare const patchProjectScoreSchema: z.ZodObject<Omit<{
    description: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    project_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    score_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["slider", "categorical", "weighted", "minimum", "maximum", "online"]>>>;
    categories: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        name: string;
    }, {
        value: number;
        name: string;
    }>, "many">, z.ZodRecord<z.ZodString, z.ZodNumber>, z.ZodArray<z.ZodString, "many">]>>>>>;
    config: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodObject<{
        multi_select: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        destination: z.ZodOptional<z.ZodNullable<z.ZodLiteral<"expected">>>;
        online: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodObject<{
            sampling_rate: z.ZodNumber;
            scorers: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"function">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                id: string;
            }, {
                type: "function";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"global">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "global";
                name: string;
            }, {
                type: "global";
                name: string;
            }>]>, "many">;
            apply_to_root_span: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            apply_to_span_names: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strip", z.ZodTypeAny, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }>, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }, {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    }, {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    }>>>>>;
}, "project_id">, "strip", z.ZodTypeAny, {
    description?: string | null | undefined;
    name?: string | null | undefined;
    score_type?: "minimum" | "maximum" | "slider" | "categorical" | "weighted" | "online" | null | undefined;
    categories?: string[] | Record<string, number> | {
        value: number;
        name: string;
    }[] | null | undefined;
    config?: {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
}, {
    description?: string | null | undefined;
    name?: string | null | undefined;
    score_type?: "minimum" | "maximum" | "slider" | "categorical" | "weighted" | "online" | null | undefined;
    categories?: string[] | Record<string, number> | {
        value: number;
        name: string;
    }[] | null | undefined;
    config?: {
        multi_select?: boolean | null | undefined;
        destination?: "expected" | null | undefined;
        online?: {
            sampling_rate: number;
            scorers: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[];
            apply_to_root_span?: boolean | null | undefined;
            apply_to_span_names?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
}>;
declare const createProjectTagSchema: z.ZodObject<{
    project_id: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    color: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    project_id: string;
    description?: string | null | undefined;
    color?: string | null | undefined;
}, {
    name: string;
    project_id: string;
    description?: string | null | undefined;
    color?: string | null | undefined;
}>;
declare const patchProjectTagSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    color: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    description?: string | null | undefined;
    color?: string | null | undefined;
}, {
    name?: string | null | undefined;
    description?: string | null | undefined;
    color?: string | null | undefined;
}>;
declare const createSpanIframeSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    project_id: z.ZodString;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    url: z.ZodString;
    post_message: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "id" | "created" | "deleted_at" | "user_id">, "strip", z.ZodTypeAny, {
    name: string;
    url: string;
    project_id: string;
    description?: string | null | undefined;
    post_message?: boolean | null | undefined;
}, {
    name: string;
    url: string;
    project_id: string;
    description?: string | null | undefined;
    post_message?: boolean | null | undefined;
}>;
declare const patchSpanIframeSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    post_message: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    url?: string | null | undefined;
    post_message?: boolean | null | undefined;
}, {
    name?: string | null | undefined;
    url?: string | null | undefined;
    post_message?: boolean | null | undefined;
}>;
declare const createViewSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
    object_id: z.ZodString;
    view_type: z.ZodEnum<["projects", "logs", "experiments", "datasets", "prompts", "playgrounds", "experiment", "dataset"]>;
    name: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    view_data: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        search: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            filter: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            tag: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            match: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            sort: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
        }, "strip", z.ZodTypeAny, {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        }, {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    }, {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    }>>>;
    options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        columnVisibility: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodBoolean>>>;
        columnOrder: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        columnSizing: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
    }, "strip", z.ZodTypeAny, {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    }, {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    }>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deleted_at: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
}, "id" | "created">, "strip", z.ZodTypeAny, {
    name: string;
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    view_type: "experiment" | "dataset" | "projects" | "logs" | "experiments" | "datasets" | "prompts" | "playgrounds";
    options?: {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    } | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    view_data?: {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
}, {
    name: string;
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    view_type: "experiment" | "dataset" | "projects" | "logs" | "experiments" | "datasets" | "prompts" | "playgrounds";
    options?: {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    } | null | undefined;
    deleted_at?: string | null | undefined;
    user_id?: string | null | undefined;
    view_data?: {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
}>;
declare const patchViewSchema: z.ZodObject<{
    object_type: z.ZodEnum<["organization", "project", "experiment", "dataset", "prompt", "prompt_session", "group", "role", "org_member", "project_log", "org_project"]>;
    object_id: z.ZodString;
    view_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["projects", "logs", "experiments", "datasets", "prompts", "playgrounds", "experiment", "dataset"]>>>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    view_data: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        search: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            filter: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            tag: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            match: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
            sort: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
        }, "strip", z.ZodTypeAny, {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        }, {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    }, {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    }>>>;
    options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        columnVisibility: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodBoolean>>>;
        columnOrder: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        columnSizing: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
    }, "strip", z.ZodTypeAny, {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    }, {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    }>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    view_type?: "experiment" | "dataset" | "projects" | "logs" | "experiments" | "datasets" | "prompts" | "playgrounds" | null | undefined;
    name?: string | null | undefined;
    view_data?: {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    options?: {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    } | null | undefined;
    user_id?: string | null | undefined;
}, {
    object_type: "project" | "experiment" | "dataset" | "prompt" | "prompt_session" | "role" | "group" | "organization" | "org_member" | "project_log" | "org_project";
    object_id: string;
    view_type?: "experiment" | "dataset" | "projects" | "logs" | "experiments" | "datasets" | "prompts" | "playgrounds" | null | undefined;
    name?: string | null | undefined;
    view_data?: {
        search?: {
            filter?: unknown[] | null | undefined;
            tag?: unknown[] | null | undefined;
            match?: unknown[] | null | undefined;
            sort?: unknown[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    options?: {
        columnVisibility?: Record<string, boolean> | null | undefined;
        columnOrder?: string[] | null | undefined;
        columnSizing?: Record<string, number> | null | undefined;
    } | null | undefined;
    user_id?: string | null | undefined;
}>;
declare const patchOrganizationSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    api_url: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
    is_universal_api: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>>;
    proxy_url: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
    realtime_url: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    api_url?: string | null | undefined;
    is_universal_api?: boolean | null | undefined;
    proxy_url?: string | null | undefined;
    realtime_url?: string | null | undefined;
}, {
    name?: string | null | undefined;
    api_url?: string | null | undefined;
    is_universal_api?: boolean | null | undefined;
    proxy_url?: string | null | undefined;
    realtime_url?: string | null | undefined;
}>;
declare const createApiKeySchema: z.ZodObject<{
    name: z.ZodString;
    org_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    org_name?: string | null | undefined;
}, {
    name: string;
    org_name?: string | null | undefined;
}>;
declare const createApiKeyOutputSchema: z.ZodObject<{
    name: z.ZodString;
    id: z.ZodString;
    created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    org_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    preview_name: z.ZodString;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    preview_name: string;
    key: string;
    created?: string | null | undefined;
    user_id?: string | null | undefined;
    org_id?: string | null | undefined;
}, {
    name: string;
    id: string;
    preview_name: string;
    key: string;
    created?: string | null | undefined;
    user_id?: string | null | undefined;
    org_id?: string | null | undefined;
}>;
declare const organizationMembersSchema: z.ZodObject<{
    members: z.ZodArray<z.ZodObject<Pick<{
        id: z.ZodString;
        given_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        family_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        avatar_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        created: z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>>;
    }, "email" | "id">, "strip", z.ZodTypeAny, {
        id: string;
        email?: string | null | undefined;
    }, {
        id: string;
        email?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    members: {
        id: string;
        email?: string | null | undefined;
    }[];
}, {
    members: {
        id: string;
        email?: string | null | undefined;
    }[];
}>;
declare const patchOrganizationMembersSchema: z.ZodObject<{
    invite_users: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        ids: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        emails: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        send_invite_emails: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        group_ids: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        group_names: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        group_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        group_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        ids?: string[] | null | undefined;
        emails?: string[] | null | undefined;
        send_invite_emails?: boolean | null | undefined;
        group_ids?: string[] | null | undefined;
        group_names?: string[] | null | undefined;
        group_id?: string | null | undefined;
        group_name?: string | null | undefined;
    }, {
        ids?: string[] | null | undefined;
        emails?: string[] | null | undefined;
        send_invite_emails?: boolean | null | undefined;
        group_ids?: string[] | null | undefined;
        group_names?: string[] | null | undefined;
        group_id?: string | null | undefined;
        group_name?: string | null | undefined;
    }>>>;
    remove_users: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        ids: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        emails: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        ids?: string[] | null | undefined;
        emails?: string[] | null | undefined;
    }, {
        ids?: string[] | null | undefined;
        emails?: string[] | null | undefined;
    }>>>;
    org_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    org_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    invite_users?: {
        ids?: string[] | null | undefined;
        emails?: string[] | null | undefined;
        send_invite_emails?: boolean | null | undefined;
        group_ids?: string[] | null | undefined;
        group_names?: string[] | null | undefined;
        group_id?: string | null | undefined;
        group_name?: string | null | undefined;
    } | null | undefined;
    remove_users?: {
        ids?: string[] | null | undefined;
        emails?: string[] | null | undefined;
    } | null | undefined;
    org_name?: string | null | undefined;
    org_id?: string | null | undefined;
}, {
    invite_users?: {
        ids?: string[] | null | undefined;
        emails?: string[] | null | undefined;
        send_invite_emails?: boolean | null | undefined;
        group_ids?: string[] | null | undefined;
        group_names?: string[] | null | undefined;
        group_id?: string | null | undefined;
        group_name?: string | null | undefined;
    } | null | undefined;
    remove_users?: {
        ids?: string[] | null | undefined;
        emails?: string[] | null | undefined;
    } | null | undefined;
    org_name?: string | null | undefined;
    org_id?: string | null | undefined;
}>;
declare const patchOrganizationMembersOutputSchema: z.ZodObject<{
    status: z.ZodLiteral<"success">;
    org_id: z.ZodString;
    send_email_error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status: "success";
    org_id: string;
    send_email_error?: string | null | undefined;
}, {
    status: "success";
    org_id: string;
    send_email_error?: string | null | undefined;
}>;
declare const createAISecretSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    secret: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    org_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    secret?: string | null | undefined;
    org_name?: string | null | undefined;
}, {
    name: string;
    type?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    secret?: string | null | undefined;
    org_name?: string | null | undefined;
}>;
declare const deleteAISecretSchema: z.ZodObject<{
    name: z.ZodString;
    org_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    org_name?: string | null | undefined;
}, {
    name: string;
    org_name?: string | null | undefined;
}>;
declare const patchAISecretSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    secret: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    type?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    secret?: string | null | undefined;
}, {
    name?: string | null | undefined;
    type?: string | null | undefined;
    metadata?: Record<string, unknown> | null | undefined;
    secret?: string | null | undefined;
}>;
declare const createEnvVarSchema: z.ZodObject<{
    name: z.ZodString;
    object_type: z.ZodEnum<["organization", "project", "function"]>;
    object_id: z.ZodString;
    value: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    object_type: "function" | "project" | "organization";
    object_id: string;
    value?: string | null | undefined;
}, {
    name: string;
    object_type: "function" | "project" | "organization";
    object_id: string;
    value?: string | null | undefined;
}>;
declare const patchEnvVarSchema: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    value?: string | null | undefined;
}, {
    name: string;
    value?: string | null | undefined;
}>;
type ObjectSchemasEntry = {
    object?: z.ZodTypeAny;
    create?: z.ZodTypeAny;
    delete?: z.ZodTypeAny;
    patch_id?: z.ZodTypeAny;
    delete_id?: z.ZodTypeAny;
};
declare const apiSpecObjectSchemas: Record<ObjectType, ObjectSchemasEntry>;

declare const BRAINTRUST_ATTACHMENT = "braintrust_attachment";
declare const attachmentReferenceSchema: z.ZodObject<{
    type: z.ZodLiteral<"braintrust_attachment">;
    filename: z.ZodString;
    content_type: z.ZodString;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "braintrust_attachment";
    key: string;
    filename: string;
    content_type: string;
}, {
    type: "braintrust_attachment";
    key: string;
    filename: string;
    content_type: string;
}>;
/**
 * Represents an attachment in an external object store.
 *
 * @property type An identifier to help disambiguate parsing.
 * @property filename Human-readable filename for user interfaces. Not related to attachment storage.
 * @property content_type MIME type of this file.
 * @property key Key in the object store bucket for this attachment.
 */
type AttachmentReference = z.infer<typeof attachmentReferenceSchema>;
declare const uploadStatusSchema: z.ZodEnum<["uploading", "done", "error"]>;
/**
 * - `uploading`: The span has uploaded but attachment upload is still in progress.
 * - `done`: Attachment can be read at the key.
 * - `error`: The attachment couldn't be uploaded.
 */
type UploadStatus = z.infer<typeof uploadStatusSchema>;
declare const attachmentStatusSchema: z.ZodObject<{
    upload_status: z.ZodEnum<["uploading", "done", "error"]>;
    error_message: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
}, "strip", z.ZodTypeAny, {
    upload_status: "error" | "done" | "uploading";
    error_message?: string | undefined;
}, {
    upload_status: "error" | "done" | "uploading";
    error_message?: string | null | undefined;
}>;
/**
 * Attachments may be uploaded asynchronously with respect to the containing
 * log. This object is used to track the status and error, if any.
 *
 * @property upload_status See {@link UploadStatus}.
 * @property error_message Describes the error encountered while uploading.
 */
type AttachmentStatus = z.infer<typeof attachmentStatusSchema>;

declare const customTypes: {
    readonly unknown: z.ZodUnknown;
    readonly literalTrue: z.ZodLiteral<true>;
    readonly literalFalse: z.ZodLiteral<false>;
} | {
    readonly unknown: z.ZodUnknown;
    readonly literalTrue: z.ZodBoolean;
    readonly literalFalse: z.ZodBoolean;
};
declare const customTypesMode: "default" | "stainless";

declare const validRuntimesEnum: z.ZodEnum<["node", "python"]>;
type Runtime = z.infer<typeof validRuntimesEnum>;
declare const functionTypeEnum: z.ZodEnum<["llm", "scorer", "task", "tool"]>;
type FunctionType = z.infer<typeof functionTypeEnum>;
declare const runtimeContextSchema: z.ZodObject<{
    runtime: z.ZodEnum<["node", "python"]>;
    version: z.ZodString;
}, "strip", z.ZodTypeAny, {
    runtime: "node" | "python";
    version: string;
}, {
    runtime: "node" | "python";
    version: string;
}>;
type RuntimeContext = z.infer<typeof runtimeContextSchema>;
declare const functionIdSchema: z.ZodUnion<[z.ZodObject<{
    function_id: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    function_id: string;
    version?: string | undefined;
}, {
    function_id: string;
    version?: string | undefined;
}>, z.ZodObject<{
    project_name: z.ZodString;
    slug: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    slug: string;
    project_name: string;
    version?: string | undefined;
}, {
    slug: string;
    project_name: string;
    version?: string | undefined;
}>, z.ZodObject<{
    global_function: z.ZodString;
}, "strip", z.ZodTypeAny, {
    global_function: string;
}, {
    global_function: string;
}>, z.ZodObject<{
    prompt_session_id: z.ZodString;
    prompt_session_function_id: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    prompt_session_id: string;
    prompt_session_function_id: string;
    version?: string | undefined;
}, {
    prompt_session_id: string;
    prompt_session_function_id: string;
    version?: string | undefined;
}>, z.ZodObject<{
    inline_context: z.ZodObject<{
        runtime: z.ZodEnum<["node", "python"]>;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        runtime: "node" | "python";
        version: string;
    }, {
        runtime: "node" | "python";
        version: string;
    }>;
    code: z.ZodString;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    inline_context: {
        runtime: "node" | "python";
        version: string;
    };
    name?: string | null | undefined;
}, {
    code: string;
    inline_context: {
        runtime: "node" | "python";
        version: string;
    };
    name?: string | null | undefined;
}>, z.ZodObject<{
    inline_prompt: z.ZodObject<{
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "system";
                name?: string | undefined;
            }, {
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                }, {
                    type: "text";
                    text?: string | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            }, {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>>, {
                    name: string;
                    arguments: string;
                } | undefined, {
                    name: string;
                    arguments: string;
                } | null | undefined>;
                name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>>, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            }, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "tool";
                tool_call_id: string;
            }, {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                content: string;
                role: "function";
            }, {
                name: string;
                role: "function";
                content?: string | undefined;
            }>]>, z.ZodObject<{
                role: z.ZodEnum<["model"]>;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>>>;
        options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }, {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }>>>;
        parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>>>;
        tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    inline_prompt: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    };
    name?: string | null | undefined;
}, {
    inline_prompt: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    };
    name?: string | null | undefined;
}>]>;
type FunctionId = z.infer<typeof functionIdSchema>;
declare const useFunctionSchema: z.ZodUnion<[z.ZodObject<{
    function_id: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    function_id: string;
    version?: string | undefined;
}, {
    function_id: string;
    version?: string | undefined;
}>, z.ZodObject<{
    project_name: z.ZodString;
    slug: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    slug: string;
    project_name: string;
    version?: string | undefined;
}, {
    slug: string;
    project_name: string;
    version?: string | undefined;
}>, z.ZodObject<{
    global_function: z.ZodString;
}, "strip", z.ZodTypeAny, {
    global_function: string;
}, {
    global_function: string;
}>, z.ZodObject<{
    prompt_session_id: z.ZodString;
    prompt_session_function_id: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    prompt_session_id: string;
    prompt_session_function_id: string;
    version?: string | undefined;
}, {
    prompt_session_id: string;
    prompt_session_function_id: string;
    version?: string | undefined;
}>, z.ZodObject<{
    inline_context: z.ZodObject<{
        runtime: z.ZodEnum<["node", "python"]>;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        runtime: "node" | "python";
        version: string;
    }, {
        runtime: "node" | "python";
        version: string;
    }>;
    code: z.ZodString;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    inline_context: {
        runtime: "node" | "python";
        version: string;
    };
    name?: string | null | undefined;
}, {
    code: string;
    inline_context: {
        runtime: "node" | "python";
        version: string;
    };
    name?: string | null | undefined;
}>, z.ZodObject<{
    inline_prompt: z.ZodObject<{
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "system";
                name?: string | undefined;
            }, {
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                }, {
                    type: "text";
                    text?: string | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            }, {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>>, {
                    name: string;
                    arguments: string;
                } | undefined, {
                    name: string;
                    arguments: string;
                } | null | undefined>;
                name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>>, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            }, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "tool";
                tool_call_id: string;
            }, {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                content: string;
                role: "function";
            }, {
                name: string;
                role: "function";
                content?: string | undefined;
            }>]>, z.ZodObject<{
                role: z.ZodEnum<["model"]>;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>>>;
        options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }, {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }>>>;
        parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>>>;
        tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    inline_prompt: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    };
    name?: string | null | undefined;
}, {
    inline_prompt: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    };
    name?: string | null | undefined;
}>]>;
declare const streamingModeEnum: z.ZodEnum<["auto", "parallel"]>;
type StreamingMode = z.infer<typeof streamingModeEnum>;
declare const invokeFunctionNonIdArgsSchema: z.ZodObject<{
    input: z.ZodOptional<z.ZodUnknown>;
    messages: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        role: z.ZodLiteral<"system">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        role: "system";
        name?: string | undefined;
    }, {
        role: "system";
        content?: string | undefined;
        name?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
        }, {
            type: "text";
            text?: string | undefined;
        }>, z.ZodObject<{
            image_url: z.ZodObject<{
                url: z.ZodString;
                detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }>;
            type: z.ZodLiteral<"image_url">;
        }, "strip", z.ZodTypeAny, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }>]>, "many">]>;
        role: z.ZodLiteral<"user">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[]) & (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined);
        role: "user";
        name?: string | undefined;
    }, {
        role: "user";
        content?: string | ({
            type: "text";
            text?: string | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined;
        name?: string | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"assistant">;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>>>, {
            name: string;
            arguments: string;
        } | undefined, {
            name: string;
            arguments: string;
        } | null | undefined>;
        name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
        tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            function: z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>;
            type: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }>, "many">>>, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        name?: string | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    }, {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | null | undefined;
        name?: string | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined;
    }>, z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        role: z.ZodLiteral<"tool">;
        tool_call_id: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        role: "tool";
        tool_call_id: string;
    }, {
        role: "tool";
        content?: string | undefined;
        tool_call_id?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        name: z.ZodString;
        role: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        content: string;
        role: "function";
    }, {
        name: string;
        role: "function";
        content?: string | undefined;
    }>]>, z.ZodObject<{
        role: z.ZodEnum<["model"]>;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        role: "model";
        content?: string | null | undefined;
    }, {
        role: "model";
        content?: string | null | undefined;
    }>]>, "many">>;
    parent: z.ZodUnion<[z.ZodObject<{
        object_type: z.ZodEnum<["project_logs", "experiment"]>;
        object_id: z.ZodString;
        row_ids: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
            span_id: z.ZodString;
            root_span_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            span_id: string;
            root_span_id: string;
        }, {
            id: string;
            span_id: string;
            root_span_id: string;
        }>>>;
        propagated_event: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    }, "strip", z.ZodTypeAny, {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    }, {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    }>, z.ZodOptional<z.ZodString>]>;
    stream: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    mode: z.ZodOptional<z.ZodNullable<z.ZodEnum<["auto", "parallel"]>>>;
}, "strip", z.ZodTypeAny, {
    input?: unknown;
    messages?: ({
        content: string;
        role: "system";
        name?: string | undefined;
    } | {
        content: (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[]) & (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined);
        role: "user";
        name?: string | undefined;
    } | {
        content: string;
        role: "tool";
        tool_call_id: string;
    } | {
        name: string;
        content: string;
        role: "function";
    } | {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        name?: string | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[] | undefined;
    parent?: string | {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    } | undefined;
    stream?: boolean | null | undefined;
    mode?: "auto" | "parallel" | null | undefined;
}, {
    input?: unknown;
    messages?: ({
        role: "system";
        content?: string | undefined;
        name?: string | undefined;
    } | {
        role: "user";
        content?: string | ({
            type: "text";
            text?: string | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined;
        name?: string | undefined;
    } | {
        role: "tool";
        content?: string | undefined;
        tool_call_id?: string | undefined;
    } | {
        name: string;
        role: "function";
        content?: string | undefined;
    } | {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | null | undefined;
        name?: string | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[] | undefined;
    parent?: string | {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    } | undefined;
    stream?: boolean | null | undefined;
    mode?: "auto" | "parallel" | null | undefined;
}>;
declare const invokeFunctionSchema: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    function_id: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    function_id: string;
    version?: string | undefined;
}, {
    function_id: string;
    version?: string | undefined;
}>, z.ZodObject<{
    project_name: z.ZodString;
    slug: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    slug: string;
    project_name: string;
    version?: string | undefined;
}, {
    slug: string;
    project_name: string;
    version?: string | undefined;
}>, z.ZodObject<{
    global_function: z.ZodString;
}, "strip", z.ZodTypeAny, {
    global_function: string;
}, {
    global_function: string;
}>, z.ZodObject<{
    prompt_session_id: z.ZodString;
    prompt_session_function_id: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    prompt_session_id: string;
    prompt_session_function_id: string;
    version?: string | undefined;
}, {
    prompt_session_id: string;
    prompt_session_function_id: string;
    version?: string | undefined;
}>, z.ZodObject<{
    inline_context: z.ZodObject<{
        runtime: z.ZodEnum<["node", "python"]>;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        runtime: "node" | "python";
        version: string;
    }, {
        runtime: "node" | "python";
        version: string;
    }>;
    code: z.ZodString;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    inline_context: {
        runtime: "node" | "python";
        version: string;
    };
    name?: string | null | undefined;
}, {
    code: string;
    inline_context: {
        runtime: "node" | "python";
        version: string;
    };
    name?: string | null | undefined;
}>, z.ZodObject<{
    inline_prompt: z.ZodObject<{
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "system";
                name?: string | undefined;
            }, {
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                }, {
                    type: "text";
                    text?: string | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            }, {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>>, {
                    name: string;
                    arguments: string;
                } | undefined, {
                    name: string;
                    arguments: string;
                } | null | undefined>;
                name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>>, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            }, {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                content: string;
                role: "tool";
                tool_call_id: string;
            }, {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodDefault<z.ZodString>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                content: string;
                role: "function";
            }, {
                name: string;
                role: "function";
                content?: string | undefined;
            }>]>, z.ZodObject<{
                role: z.ZodEnum<["model"]>;
                content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>>>;
        options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }, {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        }>>>;
        parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>>>;
        tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">>>;
        origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }, {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    }>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    inline_prompt: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                content: string;
                role: "system";
                name?: string | undefined;
            } | {
                content: (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[]) & (string | ({
                    type: "text";
                    text: string;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined);
                role: "user";
                name?: string | undefined;
            } | {
                content: string;
                role: "tool";
                tool_call_id: string;
            } | {
                name: string;
                content: string;
                role: "function";
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                name?: string | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    };
    name?: string | null | undefined;
}, {
    inline_prompt: {
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content?: string | undefined;
                name?: string | undefined;
            } | {
                role: "user";
                content?: string | ({
                    type: "text";
                    text?: string | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[] | undefined;
                name?: string | undefined;
            } | {
                role: "tool";
                content?: string | undefined;
                tool_call_id?: string | undefined;
            } | {
                name: string;
                role: "function";
                content?: string | undefined;
            } | {
                role: "assistant";
                content?: string | null | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | null | undefined;
                name?: string | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | null | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        options?: {
            model?: string | undefined;
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                        strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: Record<string, unknown> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>]>>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            position?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
        origin?: {
            prompt_id?: string | undefined;
            project_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
    };
    name?: string | null | undefined;
}>]>, z.ZodObject<{
    input: z.ZodOptional<z.ZodUnknown>;
    messages: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        role: z.ZodLiteral<"system">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        role: "system";
        name?: string | undefined;
    }, {
        role: "system";
        content?: string | undefined;
        name?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
        }, {
            type: "text";
            text?: string | undefined;
        }>, z.ZodObject<{
            image_url: z.ZodObject<{
                url: z.ZodString;
                detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }>;
            type: z.ZodLiteral<"image_url">;
        }, "strip", z.ZodTypeAny, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }>]>, "many">]>;
        role: z.ZodLiteral<"user">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[]) & (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined);
        role: "user";
        name?: string | undefined;
    }, {
        role: "user";
        content?: string | ({
            type: "text";
            text?: string | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined;
        name?: string | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"assistant">;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>>>, {
            name: string;
            arguments: string;
        } | undefined, {
            name: string;
            arguments: string;
        } | null | undefined>;
        name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
        tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            function: z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>;
            type: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }>, "many">>>, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        name?: string | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    }, {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | null | undefined;
        name?: string | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined;
    }>, z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        role: z.ZodLiteral<"tool">;
        tool_call_id: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        role: "tool";
        tool_call_id: string;
    }, {
        role: "tool";
        content?: string | undefined;
        tool_call_id?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        name: z.ZodString;
        role: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        content: string;
        role: "function";
    }, {
        name: string;
        role: "function";
        content?: string | undefined;
    }>]>, z.ZodObject<{
        role: z.ZodEnum<["model"]>;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        role: "model";
        content?: string | null | undefined;
    }, {
        role: "model";
        content?: string | null | undefined;
    }>]>, "many">>;
    parent: z.ZodUnion<[z.ZodObject<{
        object_type: z.ZodEnum<["project_logs", "experiment"]>;
        object_id: z.ZodString;
        row_ids: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
            span_id: z.ZodString;
            root_span_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            span_id: string;
            root_span_id: string;
        }, {
            id: string;
            span_id: string;
            root_span_id: string;
        }>>>;
        propagated_event: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    }, "strip", z.ZodTypeAny, {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    }, {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    }>, z.ZodOptional<z.ZodString>]>;
    stream: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    mode: z.ZodOptional<z.ZodNullable<z.ZodEnum<["auto", "parallel"]>>>;
}, "strip", z.ZodTypeAny, {
    input?: unknown;
    messages?: ({
        content: string;
        role: "system";
        name?: string | undefined;
    } | {
        content: (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[]) & (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined);
        role: "user";
        name?: string | undefined;
    } | {
        content: string;
        role: "tool";
        tool_call_id: string;
    } | {
        name: string;
        content: string;
        role: "function";
    } | {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        name?: string | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[] | undefined;
    parent?: string | {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    } | undefined;
    stream?: boolean | null | undefined;
    mode?: "auto" | "parallel" | null | undefined;
}, {
    input?: unknown;
    messages?: ({
        role: "system";
        content?: string | undefined;
        name?: string | undefined;
    } | {
        role: "user";
        content?: string | ({
            type: "text";
            text?: string | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined;
        name?: string | undefined;
    } | {
        role: "tool";
        content?: string | undefined;
        tool_call_id?: string | undefined;
    } | {
        name: string;
        role: "function";
        content?: string | undefined;
    } | {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | null | undefined;
        name?: string | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[] | undefined;
    parent?: string | {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    } | undefined;
    stream?: boolean | null | undefined;
    mode?: "auto" | "parallel" | null | undefined;
}>>;
type InvokeFunctionRequest = z.infer<typeof invokeFunctionSchema>;
declare const invokeApiSchema: z.ZodObject<{
    messages: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        role: z.ZodLiteral<"system">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        role: "system";
        name?: string | undefined;
    }, {
        role: "system";
        content?: string | undefined;
        name?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
        }, {
            type: "text";
            text?: string | undefined;
        }>, z.ZodObject<{
            image_url: z.ZodObject<{
                url: z.ZodString;
                detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }>;
            type: z.ZodLiteral<"image_url">;
        }, "strip", z.ZodTypeAny, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }>]>, "many">]>;
        role: z.ZodLiteral<"user">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[]) & (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined);
        role: "user";
        name?: string | undefined;
    }, {
        role: "user";
        content?: string | ({
            type: "text";
            text?: string | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined;
        name?: string | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"assistant">;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>>>, {
            name: string;
            arguments: string;
        } | undefined, {
            name: string;
            arguments: string;
        } | null | undefined>;
        name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
        tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            function: z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>;
            type: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }>, "many">>>, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        name?: string | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    }, {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | null | undefined;
        name?: string | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined;
    }>, z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        role: z.ZodLiteral<"tool">;
        tool_call_id: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        role: "tool";
        tool_call_id: string;
    }, {
        role: "tool";
        content?: string | undefined;
        tool_call_id?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        name: z.ZodString;
        role: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        content: string;
        role: "function";
    }, {
        name: string;
        role: "function";
        content?: string | undefined;
    }>]>, z.ZodObject<{
        role: z.ZodEnum<["model"]>;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        role: "model";
        content?: string | null | undefined;
    }, {
        role: "model";
        content?: string | null | undefined;
    }>]>, "many">>;
    input: z.ZodOptional<z.ZodUnknown>;
    parent: z.ZodUnion<[z.ZodObject<{
        object_type: z.ZodEnum<["project_logs", "experiment"]>;
        object_id: z.ZodString;
        row_ids: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
            span_id: z.ZodString;
            root_span_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            span_id: string;
            root_span_id: string;
        }, {
            id: string;
            span_id: string;
            root_span_id: string;
        }>>>;
        propagated_event: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    }, "strip", z.ZodTypeAny, {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    }, {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    }>, z.ZodOptional<z.ZodString>]>;
    stream: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    mode: z.ZodOptional<z.ZodNullable<z.ZodEnum<["auto", "parallel"]>>>;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    messages?: ({
        content: string;
        role: "system";
        name?: string | undefined;
    } | {
        content: (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[]) & (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined);
        role: "user";
        name?: string | undefined;
    } | {
        content: string;
        role: "tool";
        tool_call_id: string;
    } | {
        name: string;
        content: string;
        role: "function";
    } | {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        name?: string | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[] | undefined;
    input?: unknown;
    parent?: string | {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    } | undefined;
    stream?: boolean | null | undefined;
    mode?: "auto" | "parallel" | null | undefined;
    version?: string | undefined;
}, {
    messages?: ({
        role: "system";
        content?: string | undefined;
        name?: string | undefined;
    } | {
        role: "user";
        content?: string | ({
            type: "text";
            text?: string | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined;
        name?: string | undefined;
    } | {
        role: "tool";
        content?: string | undefined;
        tool_call_id?: string | undefined;
    } | {
        name: string;
        role: "function";
        content?: string | undefined;
    } | {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | null | undefined;
        name?: string | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[] | undefined;
    input?: unknown;
    parent?: string | {
        object_type: "experiment" | "project_logs";
        object_id: string;
        row_ids?: {
            id: string;
            span_id: string;
            root_span_id: string;
        } | null | undefined;
        propagated_event?: Record<string, unknown> | null | undefined;
    } | undefined;
    stream?: boolean | null | undefined;
    mode?: "auto" | "parallel" | null | undefined;
    version?: string | undefined;
}>;
declare const runEvalSchema: z.ZodObject<{
    project_id: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        dataset_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dataset_id: string;
    }, {
        dataset_id: string;
    }>, z.ZodObject<{
        project_name: z.ZodString;
        dataset_name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        project_name: string;
        dataset_name: string;
    }, {
        project_name: string;
        dataset_name: string;
    }>]>;
    task: z.ZodUnion<[z.ZodObject<{
        function_id: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        function_id: string;
        version?: string | undefined;
    }, {
        function_id: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        project_name: z.ZodString;
        slug: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        slug: string;
        project_name: string;
        version?: string | undefined;
    }, {
        slug: string;
        project_name: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        global_function: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        global_function: string;
    }, {
        global_function: string;
    }>, z.ZodObject<{
        prompt_session_id: z.ZodString;
        prompt_session_function_id: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    }, {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        inline_context: z.ZodObject<{
            runtime: z.ZodEnum<["node", "python"]>;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            runtime: "node" | "python";
            version: string;
        }, {
            runtime: "node" | "python";
            version: string;
        }>;
        code: z.ZodString;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    }, {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    }>, z.ZodObject<{
        inline_prompt: z.ZodObject<{
            prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"completion">;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "completion";
                content: string;
            }, {
                type: "completion";
                content: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"chat">;
                messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    role: z.ZodLiteral<"system">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: string;
                    role: "system";
                    name?: string | undefined;
                }, {
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                    }, {
                        type: "text";
                        text?: string | undefined;
                    }>, z.ZodObject<{
                        image_url: z.ZodObject<{
                            url: z.ZodString;
                            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                        }, "strip", z.ZodTypeAny, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }>;
                        type: z.ZodLiteral<"image_url">;
                    }, "strip", z.ZodTypeAny, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }>]>, "many">]>;
                    role: z.ZodLiteral<"user">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                }, {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                }>, z.ZodObject<{
                    role: z.ZodLiteral<"assistant">;
                    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>>>, {
                        name: string;
                        arguments: string;
                    } | undefined, {
                        name: string;
                        arguments: string;
                    } | null | undefined>;
                    name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                    tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        function: z.ZodObject<{
                            arguments: z.ZodString;
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            arguments: string;
                        }, {
                            name: string;
                            arguments: string;
                        }>;
                        type: z.ZodLiteral<"function">;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }>, "many">>>, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                }, {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                }>, z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    role: z.ZodLiteral<"tool">;
                    tool_call_id: z.ZodDefault<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                }, {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    name: z.ZodString;
                    role: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    content: string;
                    role: "function";
                }, {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                }>]>, z.ZodObject<{
                    role: z.ZodEnum<["model"]>;
                    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    role: "model";
                    content?: string | null | undefined;
                }, {
                    role: "model";
                    content?: string | null | undefined;
                }>]>, "many">;
                tools: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }, {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }>]>>>;
            options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                model: z.ZodOptional<z.ZodString>;
                params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">>]>>;
                position: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            }, {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            }>>>;
            parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                type: z.ZodLiteral<"llm_classifier">;
                use_cot: z.ZodBoolean;
                choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }>>>;
            tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"function">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                id: string;
            }, {
                type: "function";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"global">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "global";
                name: string;
            }, {
                type: "global";
                name: string;
            }>]>, "many">>>;
            origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                prompt_id: z.ZodOptional<z.ZodString>;
                project_id: z.ZodOptional<z.ZodString>;
                prompt_version: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            }, {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        }, {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        }>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }, {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }>]>;
    scores: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        function_id: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        function_id: string;
        version?: string | undefined;
    }, {
        function_id: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        project_name: z.ZodString;
        slug: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        slug: string;
        project_name: string;
        version?: string | undefined;
    }, {
        slug: string;
        project_name: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        global_function: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        global_function: string;
    }, {
        global_function: string;
    }>, z.ZodObject<{
        prompt_session_id: z.ZodString;
        prompt_session_function_id: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    }, {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    }>, z.ZodObject<{
        inline_context: z.ZodObject<{
            runtime: z.ZodEnum<["node", "python"]>;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            runtime: "node" | "python";
            version: string;
        }, {
            runtime: "node" | "python";
            version: string;
        }>;
        code: z.ZodString;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    }, {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    }>, z.ZodObject<{
        inline_prompt: z.ZodObject<{
            prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"completion">;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "completion";
                content: string;
            }, {
                type: "completion";
                content: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"chat">;
                messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    role: z.ZodLiteral<"system">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: string;
                    role: "system";
                    name?: string | undefined;
                }, {
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                    }, {
                        type: "text";
                        text?: string | undefined;
                    }>, z.ZodObject<{
                        image_url: z.ZodObject<{
                            url: z.ZodString;
                            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                        }, "strip", z.ZodTypeAny, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }>;
                        type: z.ZodLiteral<"image_url">;
                    }, "strip", z.ZodTypeAny, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }>]>, "many">]>;
                    role: z.ZodLiteral<"user">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                }, {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                }>, z.ZodObject<{
                    role: z.ZodLiteral<"assistant">;
                    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>>>, {
                        name: string;
                        arguments: string;
                    } | undefined, {
                        name: string;
                        arguments: string;
                    } | null | undefined>;
                    name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
                    tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        function: z.ZodObject<{
                            arguments: z.ZodString;
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            arguments: string;
                        }, {
                            name: string;
                            arguments: string;
                        }>;
                        type: z.ZodLiteral<"function">;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }>, "many">>>, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                }, {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                }>, z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    role: z.ZodLiteral<"tool">;
                    tool_call_id: z.ZodDefault<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                }, {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodDefault<z.ZodString>;
                    name: z.ZodString;
                    role: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    content: string;
                    role: "function";
                }, {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                }>]>, z.ZodObject<{
                    role: z.ZodEnum<["model"]>;
                    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    role: "model";
                    content?: string | null | undefined;
                }, {
                    role: "model";
                    content?: string | null | undefined;
                }>]>, "many">;
                tools: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }, {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }>]>>>;
            options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                model: z.ZodOptional<z.ZodString>;
                params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">>]>>;
                position: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            }, {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            }>>>;
            parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                type: z.ZodLiteral<"llm_classifier">;
                use_cot: z.ZodBoolean;
                choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }>>>;
            tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"function">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                id: string;
            }, {
                type: "function";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"global">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "global";
                name: string;
            }, {
                type: "global";
                name: string;
            }>]>, "many">>>;
            origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                prompt_id: z.ZodOptional<z.ZodString>;
                project_id: z.ZodOptional<z.ZodString>;
                prompt_version: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            }, {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        }, {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        }>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }, {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }>]>, "many">;
    experiment_name: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    stream: z.ZodOptional<z.ZodBoolean>;
    trial_count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    is_public: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    timeout: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    max_concurrency: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    base_experiment_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    base_experiment_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    git_metadata_settings: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        collect: z.ZodEnum<["all", "none", "some"]>;
        fields: z.ZodOptional<z.ZodArray<z.ZodEnum<["dirty", "tag", "commit", "branch", "author_name", "author_email", "commit_message", "commit_time", "git_diff"]>, "many">>;
    }, "strict", z.ZodTypeAny, {
        collect: "some" | "none" | "all";
        fields?: ("dirty" | "tag" | "commit" | "branch" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
    }, {
        collect: "some" | "none" | "all";
        fields?: ("dirty" | "tag" | "commit" | "branch" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
    }>>>;
    repo_info: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        commit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        branch: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        dirty: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        author_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author_email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        commit_message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        commit_time: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        git_diff: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    }, {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    data: ({
        dataset_id: string;
    } | {
        project_name: string;
        dataset_name: string;
    }) & ({
        dataset_id: string;
    } | {
        project_name: string;
        dataset_name: string;
    } | undefined);
    project_id: string;
    task: ({
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }) & ({
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    } | undefined);
    scores: ({
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    content: string;
                    role: "system";
                    name?: string | undefined;
                } | {
                    content: (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[]) & (string | ({
                        type: "text";
                        text: string;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined);
                    role: "user";
                    name?: string | undefined;
                } | {
                    content: string;
                    role: "tool";
                    tool_call_id: string;
                } | {
                    name: string;
                    content: string;
                    role: "function";
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    name?: string | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    })[];
    experiment_name?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
    stream?: boolean | undefined;
    trial_count?: number | null | undefined;
    is_public?: boolean | null | undefined;
    timeout?: number | null | undefined;
    max_concurrency?: number | null | undefined;
    base_experiment_name?: string | null | undefined;
    base_experiment_id?: string | null | undefined;
    git_metadata_settings?: {
        collect: "some" | "none" | "all";
        fields?: ("dirty" | "tag" | "commit" | "branch" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
    } | null | undefined;
    repo_info?: {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    } | null | undefined;
}, {
    data: ({
        dataset_id: string;
    } | {
        project_name: string;
        dataset_name: string;
    }) & ({
        dataset_id: string;
    } | {
        project_name: string;
        dataset_name: string;
    } | undefined);
    project_id: string;
    task: ({
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    }) & ({
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    } | undefined);
    scores: ({
        function_id: string;
        version?: string | undefined;
    } | {
        slug: string;
        project_name: string;
        version?: string | undefined;
    } | {
        global_function: string;
    } | {
        prompt_session_id: string;
        prompt_session_function_id: string;
        version?: string | undefined;
    } | {
        code: string;
        inline_context: {
            runtime: "node" | "python";
            version: string;
        };
        name?: string | null | undefined;
    } | {
        inline_prompt: {
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content?: string | undefined;
                    name?: string | undefined;
                } | {
                    role: "user";
                    content?: string | ({
                        type: "text";
                        text?: string | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[] | undefined;
                    name?: string | undefined;
                } | {
                    role: "tool";
                    content?: string | undefined;
                    tool_call_id?: string | undefined;
                } | {
                    name: string;
                    role: "function";
                    content?: string | undefined;
                } | {
                    role: "assistant";
                    content?: string | null | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | null | undefined;
                    name?: string | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | null | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            options?: {
                model?: string | undefined;
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: Record<string, unknown> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>]>>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                position?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
            origin?: {
                prompt_id?: string | undefined;
                project_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
        };
        name?: string | null | undefined;
    })[];
    experiment_name?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
    stream?: boolean | undefined;
    trial_count?: number | null | undefined;
    is_public?: boolean | null | undefined;
    timeout?: number | null | undefined;
    max_concurrency?: number | null | undefined;
    base_experiment_name?: string | null | undefined;
    base_experiment_id?: string | null | undefined;
    git_metadata_settings?: {
        collect: "some" | "none" | "all";
        fields?: ("dirty" | "tag" | "commit" | "branch" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
    } | null | undefined;
    repo_info?: {
        commit?: string | null | undefined;
        branch?: string | null | undefined;
        tag?: string | null | undefined;
        dirty?: boolean | null | undefined;
        author_name?: string | null | undefined;
        author_email?: string | null | undefined;
        commit_message?: string | null | undefined;
        commit_time?: string | null | undefined;
        git_diff?: string | null | undefined;
    } | null | undefined;
}>;
type RunEvalRequest = z.infer<typeof runEvalSchema>;
declare const baseSSEEventSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string;
    id?: string | undefined;
}, {
    data: string;
    id?: string | undefined;
}>;
declare const sseTextEventSchema: z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"text_delta">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "text_delta";
    id?: string | undefined;
}, {
    data: string;
    event: "text_delta";
    id?: string | undefined;
}>;
declare const sseDataEventSchema: z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"json_delta">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "json_delta";
    id?: string | undefined;
}, {
    data: string;
    event: "json_delta";
    id?: string | undefined;
}>;
declare const sseErrorEventSchema: z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"error">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "error";
    id?: string | undefined;
}, {
    data: string;
    event: "error";
    id?: string | undefined;
}>;
declare const sseProgressEventSchema: z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"progress">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "progress";
    id?: string | undefined;
}, {
    data: string;
    event: "progress";
    id?: string | undefined;
}>;
declare const sseConsoleEventSchema: z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"console">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "console";
    id?: string | undefined;
}, {
    data: string;
    event: "console";
    id?: string | undefined;
}>;
declare const sseStartEventSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"start">;
    data: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    data: "";
    event: "start";
    id?: string | undefined;
}, {
    data: "";
    event: "start";
    id?: string | undefined;
}>;
declare const sseDoneEventSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"done">;
    data: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    data: "";
    event: "done";
    id?: string | undefined;
}, {
    data: "";
    event: "done";
    id?: string | undefined;
}>;
declare const functionObjectTypeEnum: z.ZodEnum<["prompt", "tool", "scorer", "task"]>;
type FunctionObjectType = z.infer<typeof functionObjectTypeEnum>;
declare const functionFormatEnum: z.ZodEnum<["llm", "code", "global"]>;
type FunctionFormat = z.infer<typeof functionFormatEnum>;
declare const functionOutputTypeEnum: z.ZodEnum<["completion", "score", "any"]>;
type FunctionOutputType = z.infer<typeof functionOutputTypeEnum>;
declare const sseProgressEventDataSchema: z.ZodObject<{
    id: z.ZodString;
    object_type: z.ZodEnum<["prompt", "tool", "scorer", "task"]>;
    format: z.ZodEnum<["llm", "code", "global"]>;
    output_type: z.ZodEnum<["completion", "score", "any"]>;
    name: z.ZodString;
    event: z.ZodEnum<["text_delta", "json_delta", "error", "console", "start", "done"]>;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    format: "code" | "global" | "llm";
    data: string;
    name: string;
    id: string;
    object_type: "prompt" | "tool" | "scorer" | "task";
    event: "error" | "text_delta" | "json_delta" | "console" | "start" | "done";
    output_type: "completion" | "score" | "any";
}, {
    format: "code" | "global" | "llm";
    data: string;
    name: string;
    id: string;
    object_type: "prompt" | "tool" | "scorer" | "task";
    event: "error" | "text_delta" | "json_delta" | "console" | "start" | "done";
    output_type: "completion" | "score" | "any";
}>;
type SSEProgressEventData = z.infer<typeof sseProgressEventDataSchema>;
declare const sseConsoleEventDataSchema: z.ZodObject<{
    stream: z.ZodEnum<["stderr", "stdout"]>;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    stream: "stderr" | "stdout";
}, {
    message: string;
    stream: "stderr" | "stdout";
}>;
type SSEConsoleEventData = z.infer<typeof sseConsoleEventDataSchema>;
declare const callEventSchema: z.ZodUnion<[z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"text_delta">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "text_delta";
    id?: string | undefined;
}, {
    data: string;
    event: "text_delta";
    id?: string | undefined;
}>, z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"json_delta">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "json_delta";
    id?: string | undefined;
}, {
    data: string;
    event: "json_delta";
    id?: string | undefined;
}>, z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"progress">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "progress";
    id?: string | undefined;
}, {
    data: string;
    event: "progress";
    id?: string | undefined;
}>, z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"error">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "error";
    id?: string | undefined;
}, {
    data: string;
    event: "error";
    id?: string | undefined;
}>, z.ZodObject<{
    data: z.ZodString;
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"console">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "console";
    id?: string | undefined;
}, {
    data: string;
    event: "console";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"start">;
    data: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    data: "";
    event: "start";
    id?: string | undefined;
}, {
    data: "";
    event: "start";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"done">;
    data: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    data: "";
    event: "done";
    id?: string | undefined;
}, {
    data: "";
    event: "done";
    id?: string | undefined;
}>]>;
type CallEventSchema = z.infer<typeof callEventSchema>;
declare const scoreSchema: z.ZodUnion<[z.ZodObject<{
    name: z.ZodString;
    score: z.ZodDefault<z.ZodNullable<z.ZodNumber>>;
    metadata: z.ZodEffects<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>, Record<string, unknown> | undefined, Record<string, unknown> | undefined>;
}, "strip", z.ZodTypeAny, {
    name: string;
    score: number | null;
    metadata?: Record<string, unknown> | undefined;
}, {
    name: string;
    score?: number | null | undefined;
    metadata?: Record<string, unknown> | undefined;
}>, z.ZodNumber, z.ZodEffects<z.ZodBoolean, 0 | 1, boolean>, z.ZodNull]>;
declare const ifExistsEnum: z.ZodEnum<["error", "ignore", "replace"]>;
type IfExists = z.infer<typeof ifExistsEnum>;
declare const DEFAULT_IF_EXISTS: IfExists;

declare const savedFunctionIdSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"function">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "function";
    id: string;
}, {
    type: "function";
    id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"global">;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "global";
    name: string;
}, {
    type: "global";
    name: string;
}>]>;
type SavedFunctionId = z.infer<typeof savedFunctionIdSchema>;
declare const extendedSavedFunctionIdSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"function">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "function";
    id: string;
}, {
    type: "function";
    id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"global">;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "global";
    name: string;
}, {
    type: "global";
    name: string;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"slug">;
    project_id: z.ZodString;
    slug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "slug";
    slug: string;
    project_id: string;
}, {
    type: "slug";
    slug: string;
    project_id: string;
}>]>;
type ExtendedSavedFunctionId = z.infer<typeof extendedSavedFunctionIdSchema>;

declare const repoInfoSchema: z.ZodObject<{
    commit: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    branch: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    tag: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dirty: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    author_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    author_email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    commit_message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    commit_time: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    git_diff: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    commit?: string | null | undefined;
    branch?: string | null | undefined;
    tag?: string | null | undefined;
    dirty?: boolean | null | undefined;
    author_name?: string | null | undefined;
    author_email?: string | null | undefined;
    commit_message?: string | null | undefined;
    commit_time?: string | null | undefined;
    git_diff?: string | null | undefined;
}, {
    commit?: string | null | undefined;
    branch?: string | null | undefined;
    tag?: string | null | undefined;
    dirty?: boolean | null | undefined;
    author_name?: string | null | undefined;
    author_email?: string | null | undefined;
    commit_message?: string | null | undefined;
    commit_time?: string | null | undefined;
    git_diff?: string | null | undefined;
}>;
type RepoInfo = z.infer<typeof repoInfoSchema>;
declare const gitFieldsSchema: z.ZodEnum<["dirty", "tag", "commit", "branch", "author_name", "author_email", "commit_message", "commit_time", "git_diff"]>;
type GitFields = z.infer<typeof gitFieldsSchema>;
declare const collectMetadataEnum: z.ZodEnum<["all", "none", "some"]>;
type CollectMetadata = z.infer<typeof collectMetadataEnum>;
declare const gitMetadataSettingsSchema: z.ZodObject<{
    collect: z.ZodEnum<["all", "none", "some"]>;
    fields: z.ZodOptional<z.ZodArray<z.ZodEnum<["dirty", "tag", "commit", "branch", "author_name", "author_email", "commit_message", "commit_time", "git_diff"]>, "many">>;
}, "strict", z.ZodTypeAny, {
    collect: "some" | "none" | "all";
    fields?: ("dirty" | "tag" | "commit" | "branch" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
}, {
    collect: "some" | "none" | "all";
    fields?: ("dirty" | "tag" | "commit" | "branch" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
}>;
type GitMetadataSettings = z.infer<typeof gitMetadataSettingsSchema>;

declare const messageRoleSchema: z.ZodEnum<["system", "user", "assistant", "function", "tool", "model"]>;
type MessageRole = z.infer<typeof messageRoleSchema>;
declare const chatCompletionContentPartTextSchema: z.ZodObject<{
    text: z.ZodDefault<z.ZodString>;
    type: z.ZodLiteral<"text">;
}, "strip", z.ZodTypeAny, {
    type: "text";
    text: string;
}, {
    type: "text";
    text?: string | undefined;
}>;
declare const chatCompletionContentPartImageSchema: z.ZodObject<{
    image_url: z.ZodObject<{
        url: z.ZodString;
        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    }, {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    }>;
    type: z.ZodLiteral<"image_url">;
}, "strip", z.ZodTypeAny, {
    type: "image_url";
    image_url: {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    };
}, {
    type: "image_url";
    image_url: {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    };
}>;
declare const chatCompletionContentPartSchema: z.ZodUnion<[z.ZodObject<{
    text: z.ZodDefault<z.ZodString>;
    type: z.ZodLiteral<"text">;
}, "strip", z.ZodTypeAny, {
    type: "text";
    text: string;
}, {
    type: "text";
    text?: string | undefined;
}>, z.ZodObject<{
    image_url: z.ZodObject<{
        url: z.ZodString;
        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    }, {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    }>;
    type: z.ZodLiteral<"image_url">;
}, "strip", z.ZodTypeAny, {
    type: "image_url";
    image_url: {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    };
}, {
    type: "image_url";
    image_url: {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    };
}>]>;
declare const chatCompletionMessageToolCallSchema: z.ZodObject<{
    id: z.ZodString;
    function: z.ZodObject<{
        arguments: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        arguments: string;
    }, {
        name: string;
        arguments: string;
    }>;
    type: z.ZodLiteral<"function">;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
        arguments: string;
    };
    type: "function";
    id: string;
}, {
    function: {
        name: string;
        arguments: string;
    };
    type: "function";
    id: string;
}>;
declare const chatCompletionOpenAIMessageParamSchema: z.ZodUnion<[z.ZodObject<{
    content: z.ZodDefault<z.ZodString>;
    role: z.ZodLiteral<"system">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    content: string;
    role: "system";
    name?: string | undefined;
}, {
    role: "system";
    content?: string | undefined;
    name?: string | undefined;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
    }, {
        type: "text";
        text?: string | undefined;
    }>, z.ZodObject<{
        image_url: z.ZodObject<{
            url: z.ZodString;
            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }>;
        type: z.ZodLiteral<"image_url">;
    }, "strip", z.ZodTypeAny, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }>]>, "many">]>;
    role: z.ZodLiteral<"user">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    content: (string | ({
        type: "text";
        text: string;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[]) & (string | ({
        type: "text";
        text: string;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[] | undefined);
    role: "user";
    name?: string | undefined;
}, {
    role: "user";
    content?: string | ({
        type: "text";
        text?: string | undefined;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[] | undefined;
    name?: string | undefined;
}>, z.ZodObject<{
    role: z.ZodLiteral<"assistant">;
    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
        arguments: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        arguments: string;
    }, {
        name: string;
        arguments: string;
    }>>>, {
        name: string;
        arguments: string;
    } | undefined, {
        name: string;
        arguments: string;
    } | null | undefined>;
    name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
    tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        function: z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>;
        type: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }>, "many">>>, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | null | undefined>;
}, "strip", z.ZodTypeAny, {
    role: "assistant";
    content?: string | null | undefined;
    function_call?: {
        name: string;
        arguments: string;
    } | undefined;
    name?: string | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
}, {
    role: "assistant";
    content?: string | null | undefined;
    function_call?: {
        name: string;
        arguments: string;
    } | null | undefined;
    name?: string | null | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | null | undefined;
}>, z.ZodObject<{
    content: z.ZodDefault<z.ZodString>;
    role: z.ZodLiteral<"tool">;
    tool_call_id: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    content: string;
    role: "tool";
    tool_call_id: string;
}, {
    role: "tool";
    content?: string | undefined;
    tool_call_id?: string | undefined;
}>, z.ZodObject<{
    content: z.ZodDefault<z.ZodString>;
    name: z.ZodString;
    role: z.ZodLiteral<"function">;
}, "strip", z.ZodTypeAny, {
    name: string;
    content: string;
    role: "function";
}, {
    name: string;
    role: "function";
    content?: string | undefined;
}>]>;
declare const chatCompletionMessageParamSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    content: z.ZodDefault<z.ZodString>;
    role: z.ZodLiteral<"system">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    content: string;
    role: "system";
    name?: string | undefined;
}, {
    role: "system";
    content?: string | undefined;
    name?: string | undefined;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
    }, {
        type: "text";
        text?: string | undefined;
    }>, z.ZodObject<{
        image_url: z.ZodObject<{
            url: z.ZodString;
            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }>;
        type: z.ZodLiteral<"image_url">;
    }, "strip", z.ZodTypeAny, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }>]>, "many">]>;
    role: z.ZodLiteral<"user">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    content: (string | ({
        type: "text";
        text: string;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[]) & (string | ({
        type: "text";
        text: string;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[] | undefined);
    role: "user";
    name?: string | undefined;
}, {
    role: "user";
    content?: string | ({
        type: "text";
        text?: string | undefined;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[] | undefined;
    name?: string | undefined;
}>, z.ZodObject<{
    role: z.ZodLiteral<"assistant">;
    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
        arguments: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        arguments: string;
    }, {
        name: string;
        arguments: string;
    }>>>, {
        name: string;
        arguments: string;
    } | undefined, {
        name: string;
        arguments: string;
    } | null | undefined>;
    name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
    tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        function: z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>;
        type: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }>, "many">>>, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | null | undefined>;
}, "strip", z.ZodTypeAny, {
    role: "assistant";
    content?: string | null | undefined;
    function_call?: {
        name: string;
        arguments: string;
    } | undefined;
    name?: string | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
}, {
    role: "assistant";
    content?: string | null | undefined;
    function_call?: {
        name: string;
        arguments: string;
    } | null | undefined;
    name?: string | null | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | null | undefined;
}>, z.ZodObject<{
    content: z.ZodDefault<z.ZodString>;
    role: z.ZodLiteral<"tool">;
    tool_call_id: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    content: string;
    role: "tool";
    tool_call_id: string;
}, {
    role: "tool";
    content?: string | undefined;
    tool_call_id?: string | undefined;
}>, z.ZodObject<{
    content: z.ZodDefault<z.ZodString>;
    name: z.ZodString;
    role: z.ZodLiteral<"function">;
}, "strip", z.ZodTypeAny, {
    name: string;
    content: string;
    role: "function";
}, {
    name: string;
    role: "function";
    content?: string | undefined;
}>]>, z.ZodObject<{
    role: z.ZodEnum<["model"]>;
    content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    role: "model";
    content?: string | null | undefined;
}, {
    role: "model";
    content?: string | null | undefined;
}>]>;
type ToolCall = z.infer<typeof chatCompletionMessageToolCallSchema>;

declare const toolsSchema: z.ZodArray<z.ZodObject<{
    function: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | undefined;
        parameters?: Record<string, unknown> | undefined;
    }, {
        name: string;
        description?: string | undefined;
        parameters?: Record<string, unknown> | undefined;
    }>;
    type: z.ZodLiteral<"function">;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
        description?: string | undefined;
        parameters?: Record<string, unknown> | undefined;
    };
    type: "function";
}, {
    function: {
        name: string;
        description?: string | undefined;
        parameters?: Record<string, unknown> | undefined;
    };
    type: "function";
}>, "many">;
type Tools = z.infer<typeof toolsSchema>;

type OpenAIMessage = z.infer<typeof chatCompletionOpenAIMessageParamSchema>;
type Message = z.infer<typeof chatCompletionMessageParamSchema>;
type Content = Message["content"];
type ContentPartText = z.infer<typeof chatCompletionContentPartTextSchema>;
type ContentPartImage = z.infer<typeof chatCompletionContentPartImageSchema>;
type ContentPart = z.infer<typeof chatCompletionContentPartSchema>;
declare const promptBlockDataSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"completion">;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "completion";
    content: string;
}, {
    type: "completion";
    content: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"chat">;
    messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        role: z.ZodLiteral<"system">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        role: "system";
        name?: string | undefined;
    }, {
        role: "system";
        content?: string | undefined;
        name?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
        }, {
            type: "text";
            text?: string | undefined;
        }>, z.ZodObject<{
            image_url: z.ZodObject<{
                url: z.ZodString;
                detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }>;
            type: z.ZodLiteral<"image_url">;
        }, "strip", z.ZodTypeAny, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }>]>, "many">]>;
        role: z.ZodLiteral<"user">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[]) & (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined);
        role: "user";
        name?: string | undefined;
    }, {
        role: "user";
        content?: string | ({
            type: "text";
            text?: string | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined;
        name?: string | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"assistant">;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>>>, {
            name: string;
            arguments: string;
        } | undefined, {
            name: string;
            arguments: string;
        } | null | undefined>;
        name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
        tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            function: z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>;
            type: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }>, "many">>>, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        name?: string | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    }, {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | null | undefined;
        name?: string | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined;
    }>, z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        role: z.ZodLiteral<"tool">;
        tool_call_id: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        role: "tool";
        tool_call_id: string;
    }, {
        role: "tool";
        content?: string | undefined;
        tool_call_id?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodDefault<z.ZodString>;
        name: z.ZodString;
        role: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        content: string;
        role: "function";
    }, {
        name: string;
        role: "function";
        content?: string | undefined;
    }>]>, z.ZodObject<{
        role: z.ZodEnum<["model"]>;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        role: "model";
        content?: string | null | undefined;
    }, {
        role: "model";
        content?: string | null | undefined;
    }>]>, "many">;
    tools: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "chat";
    messages: ({
        content: string;
        role: "system";
        name?: string | undefined;
    } | {
        content: (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[]) & (string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined);
        role: "user";
        name?: string | undefined;
    } | {
        content: string;
        role: "tool";
        tool_call_id: string;
    } | {
        name: string;
        content: string;
        role: "function";
    } | {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        name?: string | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[];
    tools?: string | undefined;
}, {
    type: "chat";
    messages: ({
        role: "system";
        content?: string | undefined;
        name?: string | undefined;
    } | {
        role: "user";
        content?: string | ({
            type: "text";
            text?: string | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[] | undefined;
        name?: string | undefined;
    } | {
        role: "tool";
        content?: string | undefined;
        tool_call_id?: string | undefined;
    } | {
        name: string;
        role: "function";
        content?: string | undefined;
    } | {
        role: "assistant";
        content?: string | null | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | null | undefined;
        name?: string | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | null | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[];
    tools?: string | undefined;
}>]>;
type PromptBlockData = z.infer<typeof promptBlockDataSchema>;
declare const BRAINTRUST_PARAMS: string[];
declare const openAIModelParamsSchema: z.ZodObject<{
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>]>>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    temperature?: number | undefined;
    top_p?: number | undefined;
    max_tokens?: number | undefined;
    frequency_penalty?: number | undefined;
    presence_penalty?: number | undefined;
    response_format?: {
        type: "json_object";
    } | {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    } | {
        type: "text";
    } | null | undefined;
    tool_choice?: "required" | "auto" | "none" | {
        function: {
            name: string;
        };
        type: "function";
    } | undefined;
    function_call?: "auto" | "none" | {
        name: string;
    } | undefined;
    n?: number | undefined;
    stop?: string[] | undefined;
}, {
    temperature?: number | undefined;
    top_p?: number | undefined;
    max_tokens?: number | undefined;
    frequency_penalty?: number | undefined;
    presence_penalty?: number | undefined;
    response_format?: {
        type: "json_object";
    } | {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    } | {
        type: "text";
    } | null | undefined;
    tool_choice?: "required" | "auto" | "none" | {
        function: {
            name: string;
        };
        type: "function";
    } | undefined;
    function_call?: "auto" | "none" | {
        name: string;
    } | undefined;
    n?: number | undefined;
    stop?: string[] | undefined;
}>;
type OpenAIModelParams = z.infer<typeof openAIModelParamsSchema>;
declare const modelParamsSchema: z.ZodUnion<[z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>]>>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>]>>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>]>>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    max_tokens: z.ZodNumber;
    temperature: z.ZodNumber;
    top_p: z.ZodOptional<z.ZodNumber>;
    top_k: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    max_tokens: z.ZodNumber;
    temperature: z.ZodNumber;
    top_p: z.ZodOptional<z.ZodNumber>;
    top_k: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    max_tokens: z.ZodNumber;
    temperature: z.ZodNumber;
    top_p: z.ZodOptional<z.ZodNumber>;
    top_k: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">>]>;
type ModelParams = z.infer<typeof modelParamsSchema>;
declare const anyModelParamsSchema: z.ZodObject<{
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodNumber;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>]>>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    top_k: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    use_cache: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    max_tokens: number;
    function_call?: "auto" | "none" | {
        name: string;
    } | undefined;
    temperature?: number | undefined;
    top_p?: number | undefined;
    frequency_penalty?: number | undefined;
    presence_penalty?: number | undefined;
    response_format?: {
        type: "json_object";
    } | {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    } | {
        type: "text";
    } | null | undefined;
    tool_choice?: "required" | "auto" | "none" | {
        function: {
            name: string;
        };
        type: "function";
    } | undefined;
    n?: number | undefined;
    stop?: string[] | undefined;
    top_k?: number | undefined;
    stop_sequences?: string[] | undefined;
    max_tokens_to_sample?: number | undefined;
    maxOutputTokens?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    use_cache?: boolean | undefined;
}, {
    max_tokens: number;
    function_call?: "auto" | "none" | {
        name: string;
    } | undefined;
    temperature?: number | undefined;
    top_p?: number | undefined;
    frequency_penalty?: number | undefined;
    presence_penalty?: number | undefined;
    response_format?: {
        type: "json_object";
    } | {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: Record<string, unknown> | undefined;
            strict?: boolean | null | undefined;
        };
    } | {
        type: "text";
    } | null | undefined;
    tool_choice?: "required" | "auto" | "none" | {
        function: {
            name: string;
        };
        type: "function";
    } | undefined;
    n?: number | undefined;
    stop?: string[] | undefined;
    top_k?: number | undefined;
    stop_sequences?: string[] | undefined;
    max_tokens_to_sample?: number | undefined;
    maxOutputTokens?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    use_cache?: boolean | undefined;
}>;
type AnyModelParam = z.infer<typeof anyModelParamsSchema>;
declare const promptOptionsSchema: z.ZodObject<{
    model: z.ZodOptional<z.ZodString>;
    params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>]>>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>]>>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>]>>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>]>>;
    position: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    model?: string | undefined;
    params?: z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>]>>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    position?: string | undefined;
}, {
    model?: string | undefined;
    params?: z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: Record<string, unknown> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>]>>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    position?: string | undefined;
}>;
type PromptOptions = z.infer<typeof promptOptionsSchema>;
declare const promptDataSchema: z.ZodObject<{
    prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"completion">;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "completion";
        content: string;
    }, {
        type: "completion";
        content: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"chat">;
        messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            content: z.ZodDefault<z.ZodString>;
            role: z.ZodLiteral<"system">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            content: string;
            role: "system";
            name?: string | undefined;
        }, {
            role: "system";
            content?: string | undefined;
            name?: string | undefined;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
            }, {
                type: "text";
                text?: string | undefined;
            }>, z.ZodObject<{
                image_url: z.ZodObject<{
                    url: z.ZodString;
                    detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                }, {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                }>;
                type: z.ZodLiteral<"image_url">;
            }, "strip", z.ZodTypeAny, {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            }, {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            }>]>, "many">]>;
            role: z.ZodLiteral<"user">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            content: (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[]) & (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined);
            role: "user";
            name?: string | undefined;
        }, {
            role: "user";
            content?: string | ({
                type: "text";
                text?: string | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined;
            name?: string | undefined;
        }>, z.ZodObject<{
            role: z.ZodLiteral<"assistant">;
            content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>>>, {
                name: string;
                arguments: string;
            } | undefined, {
                name: string;
                arguments: string;
            } | null | undefined>;
            name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
            tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                function: z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>;
                type: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }>, "many">>>, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            name?: string | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
        }, {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | null | undefined;
            name?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | null | undefined;
        }>, z.ZodObject<{
            content: z.ZodDefault<z.ZodString>;
            role: z.ZodLiteral<"tool">;
            tool_call_id: z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            content: string;
            role: "tool";
            tool_call_id: string;
        }, {
            role: "tool";
            content?: string | undefined;
            tool_call_id?: string | undefined;
        }>, z.ZodObject<{
            content: z.ZodDefault<z.ZodString>;
            name: z.ZodString;
            role: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            content: string;
            role: "function";
        }, {
            name: string;
            role: "function";
            content?: string | undefined;
        }>]>, z.ZodObject<{
            role: z.ZodEnum<["model"]>;
            content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: "model";
            content?: string | null | undefined;
        }, {
            role: "model";
            content?: string | null | undefined;
        }>]>, "many">;
        tools: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "chat";
        messages: ({
            content: string;
            role: "system";
            name?: string | undefined;
        } | {
            content: (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[]) & (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined);
            role: "user";
            name?: string | undefined;
        } | {
            content: string;
            role: "tool";
            tool_call_id: string;
        } | {
            name: string;
            content: string;
            role: "function";
        } | {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            name?: string | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    }, {
        type: "chat";
        messages: ({
            role: "system";
            content?: string | undefined;
            name?: string | undefined;
        } | {
            role: "user";
            content?: string | ({
                type: "text";
                text?: string | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined;
            name?: string | undefined;
        } | {
            role: "tool";
            content?: string | undefined;
            tool_call_id?: string | undefined;
        } | {
            name: string;
            role: "function";
            content?: string | undefined;
        } | {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | null | undefined;
            name?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | null | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    }>]>>>;
    options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        model: z.ZodOptional<z.ZodString>;
        params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>]>>;
        position: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        model?: string | undefined;
        params?: z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        position?: string | undefined;
    }, {
        model?: string | undefined;
        params?: z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        position?: string | undefined;
    }>>>;
    parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        type: z.ZodLiteral<"llm_classifier">;
        use_cot: z.ZodBoolean;
        choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    }, {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    }>>>;
    tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"function">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "function";
        id: string;
    }, {
        type: "function";
        id: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"global">;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "global";
        name: string;
    }, {
        type: "global";
        name: string;
    }>]>, "many">>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt_id: z.ZodOptional<z.ZodString>;
        project_id: z.ZodOptional<z.ZodString>;
        prompt_version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        prompt_id?: string | undefined;
        project_id?: string | undefined;
        prompt_version?: string | undefined;
    }, {
        prompt_id?: string | undefined;
        project_id?: string | undefined;
        prompt_version?: string | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    prompt?: {
        type: "completion";
        content: string;
    } | {
        type: "chat";
        messages: ({
            content: string;
            role: "system";
            name?: string | undefined;
        } | {
            content: (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[]) & (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined);
            role: "user";
            name?: string | undefined;
        } | {
            content: string;
            role: "tool";
            tool_call_id: string;
        } | {
            name: string;
            content: string;
            role: "function";
        } | {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            name?: string | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    } | null | undefined;
    options?: {
        model?: string | undefined;
        params?: z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        position?: string | undefined;
    } | null | undefined;
    parser?: {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    } | null | undefined;
    tool_functions?: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[] | null | undefined;
    origin?: {
        prompt_id?: string | undefined;
        project_id?: string | undefined;
        prompt_version?: string | undefined;
    } | null | undefined;
}, {
    prompt?: {
        type: "completion";
        content: string;
    } | {
        type: "chat";
        messages: ({
            role: "system";
            content?: string | undefined;
            name?: string | undefined;
        } | {
            role: "user";
            content?: string | ({
                type: "text";
                text?: string | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined;
            name?: string | undefined;
        } | {
            role: "tool";
            content?: string | undefined;
            tool_call_id?: string | undefined;
        } | {
            name: string;
            role: "function";
            content?: string | undefined;
        } | {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | null | undefined;
            name?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | null | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    } | null | undefined;
    options?: {
        model?: string | undefined;
        params?: z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        position?: string | undefined;
    } | null | undefined;
    parser?: {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    } | null | undefined;
    tool_functions?: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[] | null | undefined;
    origin?: {
        prompt_id?: string | undefined;
        project_id?: string | undefined;
        prompt_version?: string | undefined;
    } | null | undefined;
}>;
type PromptData = z.infer<typeof promptDataSchema>;
declare const strictPromptDataSchema: z.ZodObject<{
    options: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        model: z.ZodOptional<z.ZodString>;
        params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>]>>;
        position: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        model?: string | undefined;
        params?: z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        position?: string | undefined;
    }, {
        model?: string | undefined;
        params?: z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        position?: string | undefined;
    }>>>;
    prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"completion">;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "completion";
        content: string;
    }, {
        type: "completion";
        content: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"chat">;
        messages: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            content: z.ZodDefault<z.ZodString>;
            role: z.ZodLiteral<"system">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            content: string;
            role: "system";
            name?: string | undefined;
        }, {
            role: "system";
            content?: string | undefined;
            name?: string | undefined;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodDefault<z.ZodString>, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
            }, {
                type: "text";
                text?: string | undefined;
            }>, z.ZodObject<{
                image_url: z.ZodObject<{
                    url: z.ZodString;
                    detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                }, {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                }>;
                type: z.ZodLiteral<"image_url">;
            }, "strip", z.ZodTypeAny, {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            }, {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            }>]>, "many">]>;
            role: z.ZodLiteral<"user">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            content: (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[]) & (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined);
            role: "user";
            name?: string | undefined;
        }, {
            role: "user";
            content?: string | ({
                type: "text";
                text?: string | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined;
            name?: string | undefined;
        }>, z.ZodObject<{
            role: z.ZodLiteral<"assistant">;
            content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            function_call: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>>>, {
                name: string;
                arguments: string;
            } | undefined, {
                name: string;
                arguments: string;
            } | null | undefined>;
            name: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | undefined, string | null | undefined>;
            tool_calls: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                function: z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>;
                type: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }>, "many">>>, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            name?: string | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
        }, {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | null | undefined;
            name?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | null | undefined;
        }>, z.ZodObject<{
            content: z.ZodDefault<z.ZodString>;
            role: z.ZodLiteral<"tool">;
            tool_call_id: z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            content: string;
            role: "tool";
            tool_call_id: string;
        }, {
            role: "tool";
            content?: string | undefined;
            tool_call_id?: string | undefined;
        }>, z.ZodObject<{
            content: z.ZodDefault<z.ZodString>;
            name: z.ZodString;
            role: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            content: string;
            role: "function";
        }, {
            name: string;
            role: "function";
            content?: string | undefined;
        }>]>, z.ZodObject<{
            role: z.ZodEnum<["model"]>;
            content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: "model";
            content?: string | null | undefined;
        }, {
            role: "model";
            content?: string | null | undefined;
        }>]>, "many">;
        tools: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "chat";
        messages: ({
            content: string;
            role: "system";
            name?: string | undefined;
        } | {
            content: (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[]) & (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined);
            role: "user";
            name?: string | undefined;
        } | {
            content: string;
            role: "tool";
            tool_call_id: string;
        } | {
            name: string;
            content: string;
            role: "function";
        } | {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            name?: string | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    }, {
        type: "chat";
        messages: ({
            role: "system";
            content?: string | undefined;
            name?: string | undefined;
        } | {
            role: "user";
            content?: string | ({
                type: "text";
                text?: string | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined;
            name?: string | undefined;
        } | {
            role: "tool";
            content?: string | undefined;
            tool_call_id?: string | undefined;
        } | {
            name: string;
            role: "function";
            content?: string | undefined;
        } | {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | null | undefined;
            name?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | null | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    }>]>>>;
    tool_functions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"function">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "function";
        id: string;
    }, {
        type: "function";
        id: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"global">;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "global";
        name: string;
    }, {
        type: "global";
        name: string;
    }>]>, "many">>>;
    origin: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt_id: z.ZodOptional<z.ZodString>;
        project_id: z.ZodOptional<z.ZodString>;
        prompt_version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        prompt_id?: string | undefined;
        project_id?: string | undefined;
        prompt_version?: string | undefined;
    }, {
        prompt_id?: string | undefined;
        project_id?: string | undefined;
        prompt_version?: string | undefined;
    }>>>;
    parser: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        type: z.ZodLiteral<"llm_classifier">;
        use_cot: z.ZodBoolean;
        choice_scores: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodNumber>, Record<string, number>, Record<string, number>>;
    }, "strip", z.ZodTypeAny, {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    }, {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    }>>>;
}, "strip", z.ZodTypeAny, {
    options?: {
        model?: string | undefined;
        params?: z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        position?: string | undefined;
    } | null | undefined;
    prompt?: {
        type: "completion";
        content: string;
    } | {
        type: "chat";
        messages: ({
            content: string;
            role: "system";
            name?: string | undefined;
        } | {
            content: (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[]) & (string | ({
                type: "text";
                text: string;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined);
            role: "user";
            name?: string | undefined;
        } | {
            content: string;
            role: "tool";
            tool_call_id: string;
        } | {
            name: string;
            content: string;
            role: "function";
        } | {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            name?: string | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    } | null | undefined;
    tool_functions?: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[] | null | undefined;
    origin?: {
        prompt_id?: string | undefined;
        project_id?: string | undefined;
        prompt_version?: string | undefined;
    } | null | undefined;
    parser?: {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    } | null | undefined;
}, {
    options?: {
        model?: string | undefined;
        params?: z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    strict: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: Record<string, unknown> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>]>>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        position?: string | undefined;
    } | null | undefined;
    prompt?: {
        type: "completion";
        content: string;
    } | {
        type: "chat";
        messages: ({
            role: "system";
            content?: string | undefined;
            name?: string | undefined;
        } | {
            role: "user";
            content?: string | ({
                type: "text";
                text?: string | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[] | undefined;
            name?: string | undefined;
        } | {
            role: "tool";
            content?: string | undefined;
            tool_call_id?: string | undefined;
        } | {
            name: string;
            role: "function";
            content?: string | undefined;
        } | {
            role: "assistant";
            content?: string | null | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | null | undefined;
            name?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | null | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    } | null | undefined;
    tool_functions?: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[] | null | undefined;
    origin?: {
        prompt_id?: string | undefined;
        project_id?: string | undefined;
        prompt_version?: string | undefined;
    } | null | undefined;
    parser?: {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    } | null | undefined;
}>;

declare const viewTypeEnum: z.ZodEnum<["projects", "logs", "experiments", "datasets", "prompts", "playgrounds", "experiment", "dataset"]>;
type ViewType = z.infer<typeof viewTypeEnum>;
declare const viewDataSearchSchema: z.ZodObject<{
    filter: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
    tag: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
    match: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
    sort: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
}, "strip", z.ZodTypeAny, {
    filter?: unknown[] | null | undefined;
    tag?: unknown[] | null | undefined;
    match?: unknown[] | null | undefined;
    sort?: unknown[] | null | undefined;
}, {
    filter?: unknown[] | null | undefined;
    tag?: unknown[] | null | undefined;
    match?: unknown[] | null | undefined;
    sort?: unknown[] | null | undefined;
}>;
declare const viewDataSchema: z.ZodObject<{
    search: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        filter: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
        tag: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
        match: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
        sort: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnknown, "many">>>;
    }, "strip", z.ZodTypeAny, {
        filter?: unknown[] | null | undefined;
        tag?: unknown[] | null | undefined;
        match?: unknown[] | null | undefined;
        sort?: unknown[] | null | undefined;
    }, {
        filter?: unknown[] | null | undefined;
        tag?: unknown[] | null | undefined;
        match?: unknown[] | null | undefined;
        sort?: unknown[] | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    search?: {
        filter?: unknown[] | null | undefined;
        tag?: unknown[] | null | undefined;
        match?: unknown[] | null | undefined;
        sort?: unknown[] | null | undefined;
    } | null | undefined;
}, {
    search?: {
        filter?: unknown[] | null | undefined;
        tag?: unknown[] | null | undefined;
        match?: unknown[] | null | undefined;
        sort?: unknown[] | null | undefined;
    } | null | undefined;
}>;
type ViewData = z.infer<typeof viewDataSchema>;
declare const viewOptionsSchema: z.ZodObject<{
    columnVisibility: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodBoolean>>>;
    columnOrder: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    columnSizing: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodNumber>>>;
}, "strip", z.ZodTypeAny, {
    columnVisibility?: Record<string, boolean> | null | undefined;
    columnOrder?: string[] | null | undefined;
    columnSizing?: Record<string, number> | null | undefined;
}, {
    columnVisibility?: Record<string, boolean> | null | undefined;
    columnOrder?: string[] | null | undefined;
    columnSizing?: Record<string, number> | null | undefined;
}>;
type ViewOptions = z.infer<typeof viewOptionsSchema>;

export { type AISecret, type Acl, type AclBatchUpdateRequest, type AclBatchUpdateResponse, type AclItem, type AclObjectType, type AnyModelParam, type ApiKey, type AsyncScoringControl, type AsyncScoringState, type AttachmentReference, type AttachmentStatus, BRAINTRUST_ATTACHMENT, BRAINTRUST_PARAMS, type CallEventSchema, type CodeBundle, type CollectMetadata, type Content, type ContentPart, type ContentPartImage, type ContentPartText, type CustomColumn, DEFAULT_IF_EXISTS, type Dataset, type DatasetEvent, type EnvVar, type EventObjectSchemasEntry, type EventObjectType, type Experiment, type ExperimentEvent, type ExtendedSavedFunctionId, type FunctionFormat, type FunctionId, type FunctionObject, type FunctionObjectType, type FunctionOutputType, type FunctionType, type GitFields, type GitMetadataSettings, type Group, type IfExists, type InvokeFunctionRequest, type Json, type MaxOverWindow, type Member, type Message, type MessageRole, type ModelParams, type ObjectSchemasEntry, type ObjectType, type ObjectTypeWithEvent, type OnlineScoreConfig, type OpenAIMessage, type OpenAIModelParams, type Organization, type Permission, type Project, type ProjectLogsEvent, type ProjectScore, type ProjectScoreCategory, type ProjectScoreType, type ProjectSettings, type ProjectTag, type Prompt, type PromptBlockData, type PromptData, type PromptOptions, type PromptSession, type PromptSessionEvent, type RepoInfo, type Resources, type Role, type RunEvalRequest, type Runtime, type RuntimeContext, type SSEConsoleEventData, type SSEProgressEventData, type SavedFunctionId, type SpanIFrame, type StreamingMode, type ToolCall, type Tools, type UploadStatus, type User, type View, type ViewData, type ViewOptions, type ViewType, aclBatchUpdateRequestSchema, aclBatchUpdateResponseSchema, aclItemSchema, aclObjectTypeEnum, aclSchema, aiSecretSchema, apiKeySchema, apiSpecEventObjectSchemas, apiSpecObjectSchemas, appLimitParamSchema, asyncScoringControlSchema, asyncScoringStateSchema, attachmentReferenceSchema, attachmentStatusSchema, baseSSEEventSchema, callEventSchema, chatCompletionContentPartImageSchema, chatCompletionContentPartSchema, chatCompletionContentPartTextSchema, chatCompletionMessageParamSchema, chatCompletionMessageToolCallSchema, codeBundleSchema, comparisonExperimentIdParamSchema, createAISecretSchema, createApiKeyOutputSchema, createApiKeySchema, createDatasetSchema, createEnvVarSchema, createExperimentSchema, createFunctionSchema, createGroupSchema, createProjectSchema, createProjectScoreSchema, createProjectTagSchema, createPromptSchema, createSpanIframeSchema, createViewSchema, crossObjectInsertRequestSchema, crossObjectInsertResponseSchema, customColumnSchema, customTypes, customTypesMode, datasetEventSchema, datasetSchema, datetimeStringSchema, deleteAISecretSchema, endingBeforeSchema, envVarObjectTypeEnum, envVarSchema, eventObjectType, experimentEventSchema, experimentSchema, extendedSavedFunctionIdSchema, feedbackResponseSchema, fetchEventsRequestSchema, fetchLimitParamSchema, fetchPaginationCursorSchema, functionDataSchema, functionFormatEnum, functionIdSchema, functionObjectTypeEnum, functionOutputTypeEnum, functionSchema, functionTypeEnum, getEventObjectDescription, getEventObjectType, getObjectArticle, gitFieldsSchema, gitMetadataSettingsSchema, groupSchema, ifExistsEnum, insertEventsResponseSchema, invokeApiSchema, invokeFunctionNonIdArgsSchema, invokeFunctionSchema, jsonSchema, literalSchema, makeObjectIdsFilterSchema, maxOverWindowSchema, maxRootSpanIdSchema, maxXactIdSchema, memberSchema, messageRoleSchema, modelParamsSchema, objectReferenceSchema, objectTypeSummarizeResponseSchemas, objectTypes, objectTypesWithEvent, onlineScoreConfigSchema, organizationMembersSchema, organizationSchema, patchAISecretSchema, patchDatasetSchema, patchEnvVarSchema, patchExperimentSchema, patchGroupSchema, patchOrganizationMembersOutputSchema, patchOrganizationMembersSchema, patchOrganizationSchema, patchProjectSchema, patchProjectScoreSchema, patchProjectTagSchema, patchPromptSchema, patchRoleSchema, patchSpanIframeSchema, patchViewSchema, permissionEnum, projectLogsEventSchema, projectLogsLogIdLiteralSchema, projectSchema, projectScoreCategory, projectScoreSchema, projectScoreTypeEnum, projectSettingsSchema, projectTagSchema, promptBaseSchema, promptBlockDataSchema, promptDataSchema, promptLogIdLiteralSchema, promptOptionsSchema, promptSchema, promptSessionEventSchema, promptSessionSchema, repoInfoSchema, resourcesSchema, roleSchema, runEvalSchema, runtimeContextSchema, savedFunctionIdSchema, scoreSchema, spanAttributesSchema, spanIframeBaseSchema, spanIframeSchema, spanTypeSchema, sseConsoleEventDataSchema, sseConsoleEventSchema, sseDataEventSchema, sseDoneEventSchema, sseErrorEventSchema, sseProgressEventDataSchema, sseProgressEventSchema, sseStartEventSchema, sseTextEventSchema, startingAfterSchema, streamingModeEnum, strictPromptDataSchema, summarizeDataParamSchema, summarizeScoresParamSchema, toolsSchema, uploadStatusSchema, useFunctionSchema, userSchema, validRuntimesEnum, versionSchema, viewDataSchema, viewDataSearchSchema, viewOptionsSchema, viewSchema, viewTypeEnum };
