"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// typespecs/index.ts
var typespecs_exports = {};
__export(typespecs_exports, {
  BRAINTRUST_PARAMS: () => BRAINTRUST_PARAMS,
  aclObjectSchema: () => aclObjectSchema,
  aclObjectTypeEnum: () => aclObjectTypeEnum,
  aclSchema: () => aclSchema,
  allFetchFiltersSchema: () => allFetchFiltersSchema,
  apiKeySchema: () => apiKeySchema,
  appLimitSchema: () => appLimitSchema,
  auditSourcesSchema: () => auditSourcesSchema,
  chatCompletionContentPartImageSchema: () => chatCompletionContentPartImageSchema,
  comparisonExperimentIdParamSchema: () => comparisonExperimentIdParamSchema,
  crossObjectInsertRequestSchema: () => crossObjectInsertRequestSchema,
  crossObjectInsertResponseSchema: () => crossObjectInsertResponseSchema,
  datasetSchema: () => datasetSchema,
  datetimeStringSchema: () => datetimeStringSchema,
  endingBeforeSchema: () => endingBeforeSchema,
  eventObjectSchemas: () => eventObjectSchemas,
  experimentSchema: () => experimentSchema,
  fetchEventsRequestSchema: () => fetchEventsRequestSchema,
  fetchFiltersSchema: () => fetchFiltersSchema,
  fetchLimitSchema: () => fetchLimitSchema,
  getEventObjectDescription: () => getEventObjectDescription,
  getEventObjectType: () => getEventObjectType,
  getObjectArticle: () => getObjectArticle,
  groupSchema: () => groupSchema,
  insertEventsResponseSchema: () => insertEventsResponseSchema,
  jsonSchema: () => jsonSchema,
  literalSchema: () => literalSchema,
  makeObjectIdsFilterSchema: () => makeObjectIdsFilterSchema,
  maxRootSpanIdSchema: () => maxRootSpanIdSchema,
  maxXactIdSchema: () => maxXactIdSchema,
  meSchema: () => meSchema,
  memberSchema: () => memberSchema,
  messageRoleSchema: () => messageRoleSchema,
  modelParamsSchema: () => modelParamsSchema,
  objectSchemas: () => objectSchemas,
  objectTypeSummarizeResponseSchemas: () => objectTypeSummarizeResponseSchemas,
  objectTypes: () => objectTypes,
  objectTypesWithEvent: () => objectTypesWithEvent,
  organizationSchema: () => organizationSchema,
  permissionEnum: () => permissionEnum,
  projectSchema: () => projectSchema,
  promptBlockDataSchema: () => promptBlockDataSchema,
  promptDataSchema: () => promptDataSchema,
  promptOptionsSchema: () => promptOptionsSchema,
  promptSchema: () => promptSchema,
  roleSchema: () => roleSchema,
  startingAfterSchema: () => startingAfterSchema,
  summarizeDataParamSchema: () => summarizeDataParamSchema,
  summarizeScoresParamSchema: () => summarizeScoresParamSchema,
  toolsSchema: () => toolsSchema,
  userSchema: () => userSchema,
  versionSchema: () => versionSchema
});
module.exports = __toCommonJS(typespecs_exports);

// typespecs/api_types.ts
var import_zod_to_openapi3 = require("@asteasolutions/zod-to-openapi");
var import_zod7 = require("zod");

// typespecs/app_types.ts
var import_zod_to_openapi2 = require("@asteasolutions/zod-to-openapi");
var import_zod6 = require("zod");

// typespecs/common_types.ts
var import_zod = require("zod");
var literalSchema = import_zod.z.union([
  import_zod.z.string(),
  import_zod.z.number(),
  import_zod.z.boolean(),
  import_zod.z.null()
]);
var jsonSchema = import_zod.z.lazy(
  () => import_zod.z.union([literalSchema, import_zod.z.array(jsonSchema), import_zod.z.record(jsonSchema)])
);
var datetimeStringSchema = import_zod.z.string().datetime({ offset: true });
var objectTypes = import_zod.z.enum([
  "project",
  "experiment",
  "dataset",
  "prompt",
  "prompt_session",
  "role",
  "group",
  "acl",
  "user"
]);
var objectTypesWithEvent = import_zod.z.enum([
  "project",
  "experiment",
  "dataset",
  "prompt",
  "prompt_session"
]);
function getEventObjectType(objectType) {
  return objectType === "project" ? "project_logs" : objectType;
}
function getEventObjectDescription(objectType) {
  return getEventObjectType(objectType).replace("_", " ");
}
function getObjectArticle(objectType) {
  return ["acl", "experiment"].includes(objectType) ? "an" : "a";
}

// typespecs/custom_types.ts
var import_zod_to_openapi = require("@asteasolutions/zod-to-openapi");
var import_zod2 = require("zod");
(0, import_zod_to_openapi.extendZodWithOpenApi)(import_zod2.z);
var modeSchema = import_zod2.z.enum(["default", "stainless"]);
var _a;
var mode = modeSchema.parse(
  typeof process === "undefined" ? "default" : ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.BRAINTRUST_TYPESPECS_MODE) || "default"
);
var modeToTypes = {
  default: {
    any: import_zod2.z.any(),
    literalTrue: import_zod2.z.literal(true),
    literalFalse: import_zod2.z.literal(false)
  },
  stainless: {
    // Stainless requires schemas which are completely permissive to be
    // tagged.
    any: import_zod2.z.any().openapi({ ["x-stainless-any"]: true }),
    // Stainless does not support boolean literals in all SDKs.
    literalTrue: import_zod2.z.boolean(),
    literalFalse: import_zod2.z.boolean()
  }
};
var customTypes = modeToTypes[mode];

// typespecs/prompt.ts
var import_zod5 = require("zod");

// typespecs/openai/messages.ts
var import_zod3 = require("zod");
var chatCompletionSystemMessageParamSchema = import_zod3.z.strictObject({
  content: import_zod3.z.string().default(""),
  role: import_zod3.z.literal("system"),
  name: import_zod3.z.string().optional()
}).strip();
var chatCompletionContentPartTextSchema = import_zod3.z.strictObject({
  text: import_zod3.z.string().default(""),
  type: import_zod3.z.literal("text")
}).strip();
var imageURLSchema = import_zod3.z.strictObject({
  url: import_zod3.z.string(),
  detail: import_zod3.z.union([import_zod3.z.literal("auto"), import_zod3.z.literal("low"), import_zod3.z.literal("high")]).optional()
}).strip();
var chatCompletionContentPartImageSchema = import_zod3.z.strictObject({
  image_url: imageURLSchema,
  type: import_zod3.z.literal("image_url")
}).strip();
var chatCompletionContentPartSchema = import_zod3.z.union([
  chatCompletionContentPartTextSchema,
  chatCompletionContentPartImageSchema
]);
var chatCompletionContentSchema = import_zod3.z.union([
  import_zod3.z.string().default(""),
  import_zod3.z.array(chatCompletionContentPartSchema)
]);
var chatCompletionUserMessageParamSchema = import_zod3.z.strictObject({
  content: chatCompletionContentSchema,
  role: import_zod3.z.literal("user"),
  name: import_zod3.z.string().optional()
}).strip();
var functionCallSchema = import_zod3.z.strictObject({
  arguments: import_zod3.z.string(),
  name: import_zod3.z.string()
}).strip();
var functionSchema = import_zod3.z.strictObject({
  arguments: import_zod3.z.string(),
  name: import_zod3.z.string()
}).strip();
var chatCompletionToolMessageParamSchema = import_zod3.z.strictObject({
  content: import_zod3.z.string().default(""),
  role: import_zod3.z.literal("tool"),
  tool_call_id: import_zod3.z.string()
}).strip();
var chatCompletionFunctionMessageParamSchema = import_zod3.z.strictObject({
  content: import_zod3.z.string().default(""),
  name: import_zod3.z.string(),
  role: import_zod3.z.literal("function")
}).strip();
var chatCompletionMessageToolCallSchema = import_zod3.z.strictObject({
  id: import_zod3.z.string(),
  function: functionSchema,
  type: import_zod3.z.literal("function")
}).strip();
var chatCompletionAssistantMessageParamSchema = import_zod3.z.strictObject({
  role: import_zod3.z.literal("assistant"),
  content: import_zod3.z.string().nullish(),
  function_call: functionCallSchema.optional(),
  name: import_zod3.z.string().optional(),
  tool_calls: import_zod3.z.array(chatCompletionMessageToolCallSchema).optional()
}).strip();
var chatCompletionMessageParamSchema = import_zod3.z.union([
  chatCompletionSystemMessageParamSchema,
  chatCompletionUserMessageParamSchema,
  chatCompletionAssistantMessageParamSchema,
  chatCompletionToolMessageParamSchema,
  chatCompletionFunctionMessageParamSchema
]);

// typespecs/openai/tools.ts
var import_zod4 = require("zod");
var functionParametersSchema = import_zod4.z.record(import_zod4.z.unknown());
var functionDefinitionSchema = import_zod4.z.strictObject({
  name: import_zod4.z.string(),
  description: import_zod4.z.string().optional(),
  parameters: functionParametersSchema.optional()
}).strip();
var chatCompletionToolSchema = import_zod4.z.strictObject({
  function: functionDefinitionSchema,
  type: import_zod4.z.literal("function")
}).strip();
var toolsSchema = import_zod4.z.array(chatCompletionToolSchema);

// typespecs/prompt.ts
var messageRoleSchema = import_zod5.z.enum([
  "system",
  "user",
  "assistant",
  "function",
  "tool",
  "model"
]);
var promptBlockDataSchema = import_zod5.z.union([
  import_zod5.z.strictObject({
    type: import_zod5.z.literal("completion"),
    content: import_zod5.z.string()
  }),
  import_zod5.z.strictObject({
    type: import_zod5.z.literal("chat"),
    messages: import_zod5.z.array(chatCompletionMessageParamSchema),
    tools: import_zod5.z.string().optional()
  })
]);
var braintrustModelParamsSchema = import_zod5.z.strictObject({
  use_cache: import_zod5.z.boolean().optional()
}).strip();
var BRAINTRUST_PARAMS = Object.keys(braintrustModelParamsSchema.shape);
var openAIModelParamsSchema = import_zod5.z.strictObject({
  temperature: import_zod5.z.number().optional(),
  top_p: import_zod5.z.number().optional(),
  max_tokens: import_zod5.z.number().optional(),
  frequency_penalty: import_zod5.z.number().optional(),
  presence_penalty: import_zod5.z.number().optional(),
  response_format: import_zod5.z.strictObject({ type: import_zod5.z.literal("json_object") }).nullish(),
  tool_choice: import_zod5.z.union([
    import_zod5.z.literal("auto"),
    import_zod5.z.literal("none"),
    import_zod5.z.strictObject({
      type: import_zod5.z.literal("function"),
      function: import_zod5.z.strictObject({ name: import_zod5.z.string() }).strip()
    }).strip()
  ]).optional(),
  function_call: import_zod5.z.union([
    import_zod5.z.literal("auto"),
    import_zod5.z.literal("none"),
    import_zod5.z.strictObject({
      name: import_zod5.z.string()
    })
  ]).optional(),
  n: import_zod5.z.number().optional(),
  stop: import_zod5.z.array(import_zod5.z.string()).optional()
}).strip();
var anthropicModelParamsSchema = import_zod5.z.strictObject({
  max_tokens: import_zod5.z.number(),
  temperature: import_zod5.z.number(),
  top_p: import_zod5.z.number().optional(),
  top_k: import_zod5.z.number().optional(),
  stop_sequences: import_zod5.z.array(import_zod5.z.string()).optional(),
  max_tokens_to_sample: import_zod5.z.number().optional().describe("This is a legacy parameter that should not be used.")
}).strip();
var googleModelParamsSchema = import_zod5.z.strictObject({
  temperature: import_zod5.z.number(),
  maxOutputTokens: import_zod5.z.number().optional(),
  topP: import_zod5.z.number().optional(),
  topK: import_zod5.z.number().optional()
}).strip();
var jsCompletionParamsSchema = import_zod5.z.strictObject({}).strip();
var modelParamsSchema = import_zod5.z.union([
  braintrustModelParamsSchema.merge(openAIModelParamsSchema),
  braintrustModelParamsSchema.merge(anthropicModelParamsSchema),
  braintrustModelParamsSchema.merge(googleModelParamsSchema),
  braintrustModelParamsSchema.merge(jsCompletionParamsSchema)
]);
var anyModelParamsSchema = openAIModelParamsSchema.merge(anthropicModelParamsSchema).merge(googleModelParamsSchema).merge(braintrustModelParamsSchema);
var promptOptionsSchema = import_zod5.z.strictObject({
  model: import_zod5.z.string().optional(),
  params: modelParamsSchema.optional(),
  position: import_zod5.z.string().optional()
}).strip();
var promptDataSchema = import_zod5.z.strictObject({
  prompt: promptBlockDataSchema.nullish(),
  options: promptOptionsSchema.nullish(),
  origin: import_zod5.z.strictObject({
    prompt_id: import_zod5.z.string().optional(),
    project_id: import_zod5.z.string().optional(),
    prompt_version: import_zod5.z.string().optional()
  }).nullish()
}).openapi("PromptData");

// typespecs/app_types.ts
(0, import_zod_to_openapi2.extendZodWithOpenApi)(import_zod6.z);
function generateBaseTableSchema(objectName, opts) {
  let nameDescription = `Name of the ${objectName}`;
  if (opts == null ? void 0 : opts.uniqueName) {
    nameDescription += `. Within a project, ${objectName} names are unique`;
  }
  return import_zod6.z.strictObject({
    id: import_zod6.z.string().uuid().describe(`Unique identifier for the ${objectName}`),
    project_id: import_zod6.z.string().uuid().describe(
      `Unique identifier for the project that the ${objectName} belongs under`
    ),
    name: import_zod6.z.string().describe(nameDescription),
    description: import_zod6.z.string().nullish().describe(`Textual description of the ${objectName}`),
    created: datetimeStringSchema.nullish().describe(`Date of ${objectName} creation`),
    deleted_at: datetimeStringSchema.nullish().describe(
      `Date of ${objectName} deletion, or null if the ${objectName} is still active`
    ),
    user_id: import_zod6.z.string().uuid().nullish().describe(`Identifies the user who created the ${objectName}`),
    metadata: import_zod6.z.record(customTypes.any).nullish().describe(`User-controlled metadata about the ${objectName}`)
  });
}
var userBaseSchema = generateBaseTableSchema("user");
var userSchema = import_zod6.z.strictObject({
  id: userBaseSchema.shape.id,
  given_name: import_zod6.z.string().nullish().describe("Given name of the user"),
  family_name: import_zod6.z.string().nullish().describe("Family name of the user"),
  email: import_zod6.z.string().nullish().describe("The user's email"),
  avatar_url: import_zod6.z.string().nullish().describe("URL of the user's Avatar image"),
  created: userBaseSchema.shape.created
}).openapi("User");
var organizationBaseSchema = generateBaseTableSchema("organization");
var organizationSchema = import_zod6.z.strictObject({
  id: organizationBaseSchema.shape.id,
  name: organizationBaseSchema.shape.name.nullish(),
  api_url: import_zod6.z.string().nullish(),
  created: organizationBaseSchema.shape.created
}).openapi("Organization");
var memberSchema = import_zod6.z.strictObject({
  org_id: organizationSchema.shape.id,
  user_id: userSchema.shape.id
}).openapi("Member");
var meSchema = import_zod6.z.strictObject({
  id: userSchema.shape.id,
  organizations: import_zod6.z.strictObject({
    id: memberSchema.shape.org_id,
    name: organizationSchema.shape.name
  }).array()
}).openapi("Me");
var apiKeyBaseSchema = generateBaseTableSchema("api key");
var apiKeySchema = import_zod6.z.strictObject({
  id: apiKeyBaseSchema.shape.id,
  created: apiKeyBaseSchema.shape.created,
  key_hash: import_zod6.z.string(),
  name: apiKeyBaseSchema.shape.name,
  preview_name: import_zod6.z.string(),
  user_id: userSchema.shape.id.nullish(),
  org_id: organizationSchema.shape.id.nullish()
}).openapi("ApiKey");
var projectBaseSchema = generateBaseTableSchema("project");
var projectSchema = import_zod6.z.strictObject({
  id: projectBaseSchema.shape.id,
  org_id: import_zod6.z.string().uuid().describe(
    "Unique id for the organization that the project belongs under"
  ),
  name: projectBaseSchema.shape.name,
  created: projectBaseSchema.shape.created,
  deleted_at: projectBaseSchema.shape.deleted_at,
  user_id: projectBaseSchema.shape.user_id
}).openapi("Project");
var datasetBaseSchema = generateBaseTableSchema("dataset", {
  uniqueName: true
});
var datasetSchema = import_zod6.z.strictObject({
  id: datasetBaseSchema.shape.id,
  project_id: datasetBaseSchema.shape.project_id.nullish(),
  name: datasetBaseSchema.shape.name,
  description: datasetBaseSchema.shape.description,
  created: datasetBaseSchema.shape.created,
  deleted_at: datasetBaseSchema.shape.deleted_at,
  user_id: datasetBaseSchema.shape.user_id
}).openapi("Dataset");
var promptBaseSchema = generateBaseTableSchema("prompt");
var promptSchema = import_zod6.z.strictObject({
  id: promptBaseSchema.shape.id,
  // This has to be copy/pasted because zod blows up when there are circular dependencies
  _xact_id: import_zod6.z.string().describe(
    `The transaction id of an event is unique to the network operation that processed the event insertion. Transaction ids are monotonically increasing over time and can be used to retrieve a versioned snapshot of the prompt (see the \`version\` parameter)`
  ),
  project_id: promptBaseSchema.shape.project_id,
  log_id: import_zod6.z.literal("p").describe("A literal 'p' which identifies the object as a project prompt"),
  org_id: organizationSchema.shape.id,
  name: promptBaseSchema.shape.name,
  slug: import_zod6.z.string().describe("Unique identifier for the prompt"),
  description: promptBaseSchema.shape.description,
  created: promptBaseSchema.shape.created,
  prompt_data: promptDataSchema.nullish().describe("The prompt, model, and its parameters"),
  tags: import_zod6.z.array(import_zod6.z.string()).nullish().describe("A list of tags for the prompt"),
  metadata: promptBaseSchema.shape.metadata
});
var repoInfoSchema = import_zod6.z.strictObject({
  commit: import_zod6.z.string().nullish().describe("SHA of most recent commit"),
  branch: import_zod6.z.string().nullish().describe("Name of the branch the most recent commit belongs to"),
  tag: import_zod6.z.string().nullish().describe("Name of the tag on the most recent commit"),
  dirty: import_zod6.z.boolean().nullish().describe(
    "Whether or not the repo had uncommitted changes when snapshotted"
  ),
  author_name: import_zod6.z.string().nullish().describe("Name of the author of the most recent commit"),
  author_email: import_zod6.z.string().nullish().describe("Email of the author of the most recent commit"),
  commit_message: import_zod6.z.string().nullish().describe("Most recent commit message"),
  commit_time: import_zod6.z.string().nullish().describe("Time of the most recent commit"),
  git_diff: import_zod6.z.string().nullish().describe(
    "If the repo was dirty when run, this includes the diff between the current state of the repo and the most recent commit."
  )
}).describe(
  "Metadata about the state of the repo when the experiment was created"
).openapi("RepoInfo");
var experimentBaseSchema = generateBaseTableSchema("experiment", {
  uniqueName: true
});
var experimentSchema = import_zod6.z.strictObject({
  id: experimentBaseSchema.shape.id,
  project_id: experimentBaseSchema.shape.project_id,
  name: experimentBaseSchema.shape.name,
  description: experimentBaseSchema.shape.description,
  created: experimentBaseSchema.shape.created,
  repo_info: repoInfoSchema.nullish(),
  commit: import_zod6.z.string().nullish().describe("Commit, taken directly from `repo_info.commit`"),
  base_exp_id: import_zod6.z.string().uuid().nullish().describe(
    "Id of default base experiment to compare against when viewing this experiment"
  ),
  deleted_at: experimentBaseSchema.shape.deleted_at,
  dataset_id: import_zod6.z.string().uuid().nullish().describe(
    "Identifier of the linked dataset, or null if the experiment is not linked to a dataset"
  ),
  dataset_version: import_zod6.z.string().nullish().describe(
    "Version number of the linked dataset the experiment was run against. This can be used to reproduce the experiment after the dataset has been modified."
  ),
  public: import_zod6.z.boolean().describe(
    "Whether or not the experiment is public. Public experiments can be viewed by anybody inside or outside the organization"
  ),
  user_id: experimentBaseSchema.shape.user_id,
  metadata: experimentBaseSchema.shape.metadata
}).openapi("Experiment");
var permissionEnum = import_zod6.z.enum([
  "create",
  "read",
  "update",
  "delete",
  "create_acls",
  "read_acls",
  "update_acls",
  "delete_acls"
]).describe(
  [
    "Each permission permits a certain type of operation on an object in the system",
    "Permissions can be assigned to to objects on an individual basis, or grouped into roles"
  ].join("\n\n")
);
var roleBaseSchema = generateBaseTableSchema("role");
var roleSchema = import_zod6.z.strictObject({
  id: roleBaseSchema.shape.id,
  org_id: import_zod6.z.string().uuid().nullish().describe(
    [
      "Unique id for the organization that the role belongs under",
      "A null org_id indicates a system role, which may be assigned to anybody and inherited by any other role, but cannot be edited.",
      "It is forbidden to change the org after creating a role"
    ].join("\n\n")
  ),
  user_id: roleBaseSchema.shape.user_id,
  created: roleBaseSchema.shape.created,
  name: roleBaseSchema.shape.name,
  description: roleBaseSchema.shape.description,
  deleted_at: roleBaseSchema.shape.deleted_at,
  member_permissions: import_zod6.z.array(permissionEnum).nullish().describe("Permissions which belong to this role"),
  member_roles: import_zod6.z.array(import_zod6.z.string().uuid()).nullish().describe(
    [
      "Ids of the roles this role inherits from",
      "An inheriting role has all the permissions contained in its member roles, as well as all of their inherited permissions"
    ].join("\n\n")
  )
}).describe(
  [
    "A role is a collection of permissions which can be granted as part of an ACL",
    "Roles can consist of individual permissions, as well as a set of roles they inherit from"
  ].join("\n\n")
).openapi("Role");
var groupBaseSchema = generateBaseTableSchema("group");
var groupSchema = import_zod6.z.strictObject({
  id: groupBaseSchema.shape.id,
  org_id: import_zod6.z.string().uuid().describe(
    [
      "Unique id for the organization that the group belongs under",
      "It is forbidden to change the org after creating a group"
    ].join("\n\n")
  ),
  user_id: groupBaseSchema.shape.user_id,
  created: groupBaseSchema.shape.created,
  name: groupBaseSchema.shape.name,
  description: groupBaseSchema.shape.description,
  deleted_at: groupBaseSchema.shape.deleted_at,
  member_users: import_zod6.z.array(import_zod6.z.string().uuid()).nullish().describe("Ids of users which belong to this group"),
  member_groups: import_zod6.z.array(import_zod6.z.string().uuid()).nullish().describe(
    [
      "Ids of the groups this group inherits from",
      "An inheriting group has all the users contained in its member groups, as well as all of their inherited users"
    ].join("\n\n")
  )
}).describe(
  [
    "A group is a collection of users which can be assigned an ACL",
    "Groups can consist of individual users, as well as a set of groups they inherit from"
  ].join("\n\n")
).openapi("Group");
var aclObjectTypeEnum = import_zod6.z.enum([
  "organization",
  "project",
  "experiment",
  "dataset",
  "prompt",
  "prompt_session",
  "project_score",
  "project_tag",
  "group",
  "role"
]).describe("The object type that the ACL applies to");
var aclBaseSchema = generateBaseTableSchema("acl");
var aclObjectSchema = import_zod6.z.strictObject({
  id: aclBaseSchema.shape.id,
  object_type: aclObjectTypeEnum,
  object_id: import_zod6.z.string().uuid().describe("The id of the object the ACL applies to"),
  restrict_object_type: import_zod6.z.optional(import_zod6.z.union([aclObjectTypeEnum, import_zod6.z.null()])).describe(
    "Optionally restricts the permission grant to just the specified object type"
  ),
  _object_org_id: import_zod6.z.string().uuid().describe("The organization the ACL's referred object belongs to"),
  created: aclBaseSchema.shape.created
});
var aclUserObjectSchema = import_zod6.z.strictObject({
  user_id: import_zod6.z.string().uuid().describe("Id of the user the ACL applies to")
});
var aclGroupObjectSchema = import_zod6.z.strictObject({
  group_id: import_zod6.z.string().uuid().describe("Id of the group the ACL applies to")
});
var aclPermissionObjectSchema = import_zod6.z.strictObject({
  permission: permissionEnum.describe("Permission the ACL grants")
});
var aclRoleObjectSchema = import_zod6.z.strictObject({
  role_id: import_zod6.z.string().uuid().describe("Id of the role the ACL grants")
});
var aclSchema = import_zod6.z.union([
  aclObjectSchema.merge(aclUserObjectSchema).merge(aclPermissionObjectSchema).openapi("UserPermissionAcl"),
  aclObjectSchema.merge(aclUserObjectSchema).merge(aclRoleObjectSchema).openapi("UserRoleAcl"),
  aclObjectSchema.merge(aclGroupObjectSchema).merge(aclPermissionObjectSchema).openapi("GroupPermissionAcl"),
  aclObjectSchema.merge(aclGroupObjectSchema).merge(aclRoleObjectSchema).openapi("GroupRoleAcl")
]).describe(
  [
    "An ACL grants a certain permission or role to a certain user or group on an object.",
    "ACLs are inherited across the object hierarchy. So for example, if a user has read permissions on a project, they will also have read permissions on any experiment, dataset, etc. created within that project.",
    "To restrict a grant to a particular sub-object, you may specify `restrict_object_type` in the ACL."
  ].join("\n\n")
).openapi("Acl");
var appLimitSchema = import_zod6.z.number().int().nonnegative().describe("Limit the number of objects to return");
function generateBaseTableOpSchema(objectName) {
  return import_zod6.z.strictObject({
    org_name: import_zod6.z.string().nullish().describe(
      `For nearly all users, this parameter should be unnecessary. But in the rare case that your API key belongs to multiple organizations, you may specify the name of the organization the ${objectName} belongs in.`
    )
  });
}
var startingAfterSchema = import_zod6.z.string().uuid().describe(
  [
    "Pagination cursor id.",
    "For example, if the final item in the last page you fetched had an id of `foo`, pass `starting_after=foo` to fetch the next page. Note: you may only pass one of `starting_after` and `ending_before`"
  ].join("\n\n")
).openapi("StartingAfter");
var endingBeforeSchema = import_zod6.z.string().uuid().describe(
  [
    "Pagination cursor id.",
    "For example, if the initial item in the last page you fetched had an id of `foo`, pass `ending_before=foo` to fetch the previous page. Note: you may only pass one of `starting_after` and `ending_before`"
  ].join("\n\n")
).openapi("EndingBefore");
function makeObjectIdsFilterSchema(objectName) {
  return import_zod6.z.string().uuid().describe(
    `Filter search results to a particular set of ${objectName} IDs. To specify a list of IDs, include the query param multiple times`
  ).openapi(`${objectName}IdsFilter`);
}
var createProjectBaseSchema = generateBaseTableOpSchema("project");
var createProjectSchema = import_zod6.z.strictObject({
  name: projectSchema.shape.name,
  org_name: createProjectBaseSchema.shape.org_name
}).openapi("CreateProject");
var patchProjectSchema = import_zod6.z.strictObject({
  name: projectSchema.shape.name.nullish()
}).openapi("PatchProject");
var createExperimentSchema = import_zod6.z.strictObject({
  project_id: experimentSchema.shape.project_id,
  name: experimentSchema.shape.name.nullish(),
  description: experimentSchema.shape.description,
  repo_info: experimentSchema.shape.repo_info,
  base_exp_id: experimentSchema.shape.base_exp_id,
  dataset_id: experimentSchema.shape.dataset_id,
  dataset_version: experimentSchema.shape.dataset_version,
  public: experimentSchema.shape.public.nullish(),
  metadata: experimentSchema.shape.metadata,
  ensure_new: import_zod6.z.boolean().nullish().describe(
    "Normally, creating an experiment with the same name as an existing experiment will return the existing one un-modified. But if `ensure_new` is true, registration will generate a new experiment with a unique name in case of a conflict."
  )
}).openapi("CreateExperiment");
var patchExperimentSchema = createExperimentSchema.omit({ project_id: true, ensure_new: true }).openapi("PatchExperiment");
var createDatasetSchema = import_zod6.z.strictObject({
  project_id: datasetSchema.shape.project_id,
  name: datasetSchema.shape.name,
  description: datasetSchema.shape.description
}).openapi("CreateDataset");
var patchDatasetSchema = import_zod6.z.strictObject({
  name: datasetSchema.shape.name.nullish(),
  description: datasetSchema.shape.description
}).openapi("PatchDataset");
var createPromptSchema = promptSchema.omit({
  id: true,
  _xact_id: true,
  org_id: true,
  log_id: true,
  created: true,
  metadata: true
}).openapi("CreatePrompt");
var patchPromptSchema = import_zod6.z.strictObject({
  name: promptSchema.shape.name.nullish(),
  description: promptSchema.shape.description.nullish(),
  prompt_data: promptSchema.shape.prompt_data.nullish(),
  tags: promptSchema.shape.tags.nullish()
}).openapi("PatchPrompt");
var createRoleBaseSchema = generateBaseTableOpSchema("role");
var createRoleSchema = import_zod6.z.strictObject({
  name: roleSchema.shape.name,
  description: roleSchema.shape.description,
  member_permissions: roleSchema.shape.member_permissions,
  member_roles: roleSchema.shape.member_roles,
  org_name: createRoleBaseSchema.shape.org_name
}).openapi("CreateRole");
var patchRoleSchema = createRoleSchema.omit({ name: true, org_name: true }).merge(
  import_zod6.z.strictObject({
    name: createRoleSchema.shape.name.nullish()
  })
).openapi("PatchRole");
var createGroupBaseSchema = generateBaseTableOpSchema("group");
var createGroupSchema = import_zod6.z.strictObject({
  name: groupSchema.shape.name,
  description: groupSchema.shape.description,
  member_users: groupSchema.shape.member_users,
  member_groups: groupSchema.shape.member_groups,
  org_name: createGroupBaseSchema.shape.org_name
}).openapi("CreateGroup");
var patchGroupSchema = createGroupSchema.omit({ name: true, org_name: true }).merge(
  import_zod6.z.strictObject({
    name: createGroupSchema.shape.name.nullish()
  })
).openapi("PatchGroup");
var createAclObjectSchema = aclObjectSchema.omit({
  id: true,
  created: true,
  _object_org_id: true
});
var createAclSchema = import_zod6.z.union([
  createAclObjectSchema.merge(aclUserObjectSchema).merge(aclPermissionObjectSchema).openapi("CreateUserPermissionAcl"),
  createAclObjectSchema.merge(aclUserObjectSchema).merge(aclRoleObjectSchema).openapi("CreateUserRoleAcl"),
  createAclObjectSchema.merge(aclGroupObjectSchema).merge(aclPermissionObjectSchema).openapi("CreateGroupPermissionAcl"),
  createAclObjectSchema.merge(aclGroupObjectSchema).merge(aclRoleObjectSchema).openapi("CreateGroupRoleAcl")
]).openapi("CreateAcl");
var objectSchemas = {
  experiment: {
    create: createExperimentSchema,
    patch: patchExperimentSchema,
    object: experimentSchema
  },
  dataset: {
    create: createDatasetSchema,
    patch: patchDatasetSchema,
    object: datasetSchema
  },
  project: {
    create: createProjectSchema,
    patch: patchProjectSchema,
    object: projectSchema
  },
  prompt: {
    create: createPromptSchema,
    patch: patchPromptSchema,
    object: promptSchema
  },
  role: {
    create: createRoleSchema,
    patch: patchRoleSchema,
    object: roleSchema
  },
  group: {
    create: createGroupSchema,
    patch: patchGroupSchema,
    object: groupSchema
  },
  acl: {
    create: createAclSchema,
    patch: void 0,
    object: aclSchema
  },
  user: {
    create: void 0,
    patch: void 0,
    object: userSchema
  }
};

// src/util.ts
function capitalize(s, sep) {
  const items = sep ? s.split(sep) : [s];
  return items.map((s2) => s2 ? s2.charAt(0).toUpperCase() + s2.slice(1) : s2).join(sep || "");
}

// src/db_fields.ts
var TRANSACTION_ID_FIELD = "_xact_id";
var OBJECT_DELETE_FIELD = "_object_delete";
var IS_MERGE_FIELD = "_is_merge";
var MERGE_PATHS_FIELD = "_merge_paths";
var VALID_SOURCES = ["app", "api", "external"];
var PARENT_ID_FIELD = "_parent_id";

// src/span_types.ts
var spanTypeAttributeValues = [
  "llm",
  "score",
  "function",
  "eval",
  "task",
  "tool"
];

// typespecs/api_types.ts
(0, import_zod_to_openapi3.extendZodWithOpenApi)(import_zod7.z);
var auditSourcesSchema = import_zod7.z.enum(VALID_SOURCES);
function generateBaseEventOpSchema(objectType) {
  const eventDescription = getEventObjectDescription(objectType);
  return import_zod7.z.strictObject({
    id: import_zod7.z.string().describe(
      `A unique identifier for the ${eventDescription} event. If you don't provide one, BrainTrust will generate one for you`
    ),
    [TRANSACTION_ID_FIELD]: import_zod7.z.string().describe(
      `The transaction id of an event is unique to the network operation that processed the event insertion. Transaction ids are monotonically increasing over time and can be used to retrieve a versioned snapshot of the ${eventDescription} (see the \`version\` parameter)`
    ),
    created: datetimeStringSchema.describe(
      `The timestamp the ${eventDescription} event was created`
    ),
    input: customTypes.any,
    output: customTypes.any,
    expected: customTypes.any,
    tags: import_zod7.z.array(import_zod7.z.string()).nullish().describe("A list of tags to log"),
    scores: import_zod7.z.record(import_zod7.z.number().min(0).max(1).nullish()).nullish(),
    metadata: import_zod7.z.record(customTypes.any).nullish().describe(
      "A dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings"
    ),
    metrics: import_zod7.z.strictObject({
      start: import_zod7.z.number().nullish().describe(
        `A unix timestamp recording when the section of code which produced the ${eventDescription} event started`
      ),
      end: import_zod7.z.number().nullish().describe(
        `A unix timestamp recording when the section of code which produced the ${eventDescription} event finished`
      ),
      prompt_tokens: import_zod7.z.number().int().nullish().describe(
        `The number of tokens in the prompt used to generate the ${eventDescription} event (only set if this is an LLM span)`
      ),
      completion_tokens: import_zod7.z.number().int().nullish().describe(
        `The number of tokens in the completion generated by the model (only set if this is an LLM span)`
      ),
      tokens: import_zod7.z.number().int().nullish().describe(
        `The total number of tokens in the input and output of the ${eventDescription} event.`
      )
    }).catchall(customTypes.any).nullish().describe(
      `Metrics are numerical measurements tracking the execution of the code that produced the ${eventDescription} event. Use "start" and "end" to track the time span over which the ${eventDescription} event was produced`
    ),
    context: import_zod7.z.strictObject({
      caller_functionname: import_zod7.z.string().nullish().describe(
        `The function in code which created the ${eventDescription} event`
      ),
      caller_filename: import_zod7.z.string().nullish().describe(
        `Name of the file in code where the ${eventDescription} event was created`
      ),
      caller_lineno: import_zod7.z.number().int().nullish().describe(
        `Line of code where the ${eventDescription} event was created`
      )
    }).catchall(customTypes.any).nullish().describe(
      `Context is additional information about the code that produced the ${eventDescription} event. It is essentially the textual counterpart to \`metrics\`. Use the \`caller_*\` attributes to track the location in code which produced the ${eventDescription} event`
    ),
    span_id: import_zod7.z.string().describe(
      `A unique identifier used to link different ${eventDescription} events together as part of a full trace. See the [tracing guide](https://www.braintrustdata.com/docs/guides/tracing) for full details on tracing`
    ),
    span_parents: import_zod7.z.string().array().nullish().describe(
      `An array of the parent \`span_ids\` of this ${eventDescription} event. This should be empty for the root span of a trace, and should most often contain just one parent element for subspans`
    ),
    root_span_id: import_zod7.z.string().describe(
      `The \`span_id\` of the root of the trace this ${eventDescription} event belongs to`
    ),
    span_attributes: import_zod7.z.strictObject({
      name: import_zod7.z.string().nullish().describe("Name of the span, for display purposes only"),
      type: import_zod7.z.enum(spanTypeAttributeValues).nullish().describe("Type of the span, for display purposes only")
    }).catchall(customTypes.any).nullish().describe(
      "Human-identifying attributes of the span, such as name, type, etc."
    ),
    [OBJECT_DELETE_FIELD]: import_zod7.z.boolean().nullish().describe(
      `Pass \`${OBJECT_DELETE_FIELD}=true\` to mark the ${eventDescription} event deleted. Deleted events will not show up in subsequent fetches for this ${eventDescription}`
    )
  });
}
function generateBaseEventFeedbackSchema(objectType) {
  const eventObjectType = getEventObjectType(objectType);
  const eventDescription = getEventObjectDescription(objectType);
  return import_zod7.z.strictObject({
    id: import_zod7.z.string().describe(
      `The id of the ${eventDescription} event to log feedback for. This is the row \`id\` returned by \`POST /v1/${eventObjectType}/{${objectType}_id}/insert\``
    ),
    scores: import_zod7.z.record(import_zod7.z.number().min(0).max(1).nullish()).nullish().describe(
      `A dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the ${eventDescription} event`
    ),
    expected: customTypes.any.describe(
      "The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not"
    ),
    tags: import_zod7.z.array(import_zod7.z.string()).nullish().describe("A list of tags to log"),
    comment: import_zod7.z.string().nullish().describe(
      `An optional comment string to log about the ${eventDescription} event`
    ),
    metadata: import_zod7.z.record(customTypes.any).nullish().describe(
      "A dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI."
    ),
    source: auditSourcesSchema.nullish().describe(
      'The source of the feedback. Must be one of "external" (default), "app", or "api"'
    )
  });
}
var fetchLimitSchema = import_zod7.z.number().int().nonnegative().describe(
  [
    "limit the number of traces fetched",
    `Fetch queries may be paginated if the total result size is expected to be large (e.g. project_logs which accumulate over a long time). Note that fetch queries only support pagination in descending time order (from latest to earliest \`${TRANSACTION_ID_FIELD}\`. Furthermore, later pages may return rows which showed up in earlier pages, except with an earlier \`${TRANSACTION_ID_FIELD}\`. This happens because pagination occurs over the whole version history of the event log. You will most likely want to exclude any such duplicate, outdated rows (by \`id\`) from your combined result set.`,
    `The \`limit\` parameter controls the number of full traces to return. So you may end up with more individual rows than the specified limit if you are fetching events containing traces.`
  ].join("\n\n")
);
var fetchPaginationCursorDescription = [
  "Together, `max_xact_id` and `max_root_span_id` form a pagination cursor",
  `Since a paginated fetch query returns results in order from latest to earliest, the cursor for the next page can be found as the row with the minimum (earliest) value of the tuple \`(${TRANSACTION_ID_FIELD}, root_span_id)\`. See the documentation of \`limit\` for an overview of paginating fetch queries.`
].join("\n\n");
var maxXactIdSchema = import_zod7.z.string().describe(fetchPaginationCursorDescription);
var maxRootSpanIdSchema = import_zod7.z.string().describe(fetchPaginationCursorDescription);
var versionSchema = import_zod7.z.string().describe(
  [
    "Retrieve a snapshot of events from a past time",
    "The version id is essentially a filter on the latest event transaction id. You can use the `max_xact_id` returned by a past fetch as the version to reproduce that exact fetch."
  ].join("\n\n")
);
var pathTypeFilterSchema = import_zod7.z.strictObject({
  type: import_zod7.z.literal("path_lookup").describe("Denotes the type of filter as a path-lookup filter"),
  path: import_zod7.z.string().array().describe(
    'List of fields describing the path to the value to be checked against. For instance, if you wish to filter on the value of `c` in `{"input": {"a": {"b": {"c": "hello"}}}}`, pass `path=["input", "a", "b", "c"]`'
  ),
  value: customTypes.any.describe(
    'The value to compare equality-wise against the event value at the specified `path`. The value must be a "primitive", that is, any JSON-serializable object except for objects and arrays. For instance, if you wish to filter on the value of "input.a.b.c" in the object `{"input": {"a": {"b": {"c": "hello"}}}}`, pass `value="hello"`'
  )
}).describe(
  'A path-lookup filter describes an equality comparison against a specific sub-field in the event row. For instance, if you wish to filter on the value of `c` in `{"input": {"a": {"b": {"c": "hello"}}}}`, pass `path=["input", "a", "b", "c"]` and `value="hello"`'
).openapi("PathLookupFilter");
var sqlTypeFilterSchema = import_zod7.z.strictObject({
  type: import_zod7.z.literal("sql_filter").describe("Denotes the type of filter as a sql-type filter"),
  expr: import_zod7.z.string().describe(
    `A SQL expression in [duckDB syntax](https://duckdb.org/docs/sql/expressions/overview). For instance, if you wish to fuzzy-match the value of \`c\` in \`{"input": {"a": {"b": {"c": "hello"}}}}\`, pass \`expr="input->'a'->'b'->>'c' LIKE '%el%'"\`.`
  )
}).describe(
  `A sql-type filter describes a general filter over an individual row in [duckDB syntax](https://duckdb.org/docs/sql/expressions/overview). For instance, if you wish to fuzzy-match the value of \`c\` in \`{"input": {"a": {"b": {"c": "hello"}}}}\`, pass \`expr="input->'a'->'b'->>'c' LIKE '%el%'"\`.`
).openapi("SQLFilter");
var allFetchFiltersSchema = import_zod7.z.union([pathTypeFilterSchema, sqlTypeFilterSchema]).array().describe(
  "A list of filters on the events to fetch. Filters can either be specialized `path=value` expressions or general SQL expressions in [duckDB syntax](https://duckdb.org/docs/sql/expressions/overview). When possible, prefer path-lookup type filters over general SQL-type filters, as they are likely to activate indices in the DB and run faster"
).openapi("AllFetchEventsFilters");
var fetchFiltersSchema = pathTypeFilterSchema.array().describe(
  "A list of filters on the events to fetch. Currently, only path-lookup type filters are supported, but we may add more in the future"
).openapi("FetchEventsFilters");
var fetchEventsRequestSchema = import_zod7.z.strictObject({
  limit: fetchLimitSchema.nullish(),
  max_xact_id: maxXactIdSchema.nullish(),
  max_root_span_id: maxRootSpanIdSchema.nullish(),
  filters: fetchFiltersSchema.nullish(),
  version: versionSchema.nullish()
}).openapi("FetchEventsRequest");
function makeFetchEventsResponseSchema(objectType, eventSchema) {
  const eventName = capitalize(getEventObjectType(objectType), "_").replace(
    "_",
    ""
  );
  return import_zod7.z.strictObject({
    events: eventSchema.array().describe("A list of fetched events")
  }).openapi(`Fetch${eventName}EventsResponse`);
}
var experimentEventBaseSchema = generateBaseEventOpSchema("experiment");
var experimentEventSchema = import_zod7.z.strictObject({
  id: experimentEventBaseSchema.shape.id,
  dataset_record_id: import_zod7.z.string().nullish().describe(
    "If the experiment is associated to a dataset, this is the event-level dataset id this experiment event is tied to"
  ),
  [TRANSACTION_ID_FIELD]: experimentEventBaseSchema.shape[TRANSACTION_ID_FIELD],
  created: experimentEventBaseSchema.shape.created,
  project_id: experimentSchema.shape.project_id,
  experiment_id: experimentSchema.shape.id,
  input: experimentEventBaseSchema.shape.input.describe(
    "The arguments that uniquely define a test case (an arbitrary, JSON serializable object). Later on, Braintrust will use the `input` to know whether two test cases are the same between experiments, so they should not contain experiment-specific state. A simple rule of thumb is that if you run the same experiment twice, the `input` should be identical"
  ),
  output: experimentEventBaseSchema.shape.output.describe(
    "The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question"
  ),
  expected: experimentEventBaseSchema.shape.expected.describe(
    "The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate your experiments while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models"
  ),
  scores: experimentEventBaseSchema.shape.scores.describe(
    "A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare experiments"
  ),
  metadata: experimentEventBaseSchema.shape.metadata,
  tags: experimentEventBaseSchema.shape.tags,
  metrics: experimentEventBaseSchema.shape.metrics,
  context: experimentEventBaseSchema.shape.context,
  span_id: experimentEventBaseSchema.shape.span_id,
  span_parents: experimentEventBaseSchema.shape.span_parents,
  root_span_id: experimentEventBaseSchema.shape.root_span_id,
  span_attributes: experimentEventBaseSchema.shape.span_attributes
}).openapi("ExperimentEvent");
var datasetEventBaseSchema = generateBaseEventOpSchema("dataset");
var datasetEventSchema = import_zod7.z.strictObject({
  id: datasetEventBaseSchema.shape.id,
  [TRANSACTION_ID_FIELD]: datasetEventBaseSchema.shape[TRANSACTION_ID_FIELD],
  created: datasetEventBaseSchema.shape.created,
  project_id: datasetSchema.shape.project_id,
  dataset_id: datasetSchema.shape.id,
  input: datasetEventBaseSchema.shape.input.describe(
    "The argument that uniquely define an input case (an arbitrary, JSON serializable object)"
  ),
  expected: datasetEventBaseSchema.shape.expected.describe(
    "The output of your application, including post-processing (an arbitrary, JSON serializable object)"
  ),
  metadata: datasetEventBaseSchema.shape.metadata,
  tags: datasetEventBaseSchema.shape.tags,
  span_id: datasetEventBaseSchema.shape.span_id,
  root_span_id: datasetEventBaseSchema.shape.root_span_id
}).openapi("DatasetEvent");
var promptSessionEventBaseSchema = generateBaseEventOpSchema("prompt_session");
var promptSessionEventSchema = import_zod7.z.strictObject({
  id: promptSessionEventBaseSchema.shape.id,
  [TRANSACTION_ID_FIELD]: promptSessionEventBaseSchema.shape[TRANSACTION_ID_FIELD],
  created: promptSessionEventBaseSchema.shape.created,
  project_id: promptSchema.shape.project_id,
  prompt_session_id: promptSchema.shape.id,
  prompt_session_data: customTypes.any.describe(
    "Data about the prompt session"
  ),
  prompt_data: customTypes.any.describe("Data about the prompt"),
  object_data: customTypes.any.describe("Data about the mapped data"),
  completion: customTypes.any.describe("Data about the completion"),
  tags: promptSessionEventBaseSchema.shape.tags
}).openapi("PromptSessionEvent");
var projectLogsEventBaseSchema = generateBaseEventOpSchema("project");
var projectLogsEventSchema = import_zod7.z.strictObject({
  id: projectLogsEventBaseSchema.shape.id,
  [TRANSACTION_ID_FIELD]: projectLogsEventBaseSchema.shape[TRANSACTION_ID_FIELD],
  created: projectLogsEventBaseSchema.shape.created,
  org_id: projectSchema.shape.org_id,
  project_id: projectSchema.shape.id,
  log_id: import_zod7.z.literal("g").describe("A literal 'g' which identifies the log as a project log"),
  input: projectLogsEventBaseSchema.shape.input.describe(
    "The arguments that uniquely define a user input(an arbitrary, JSON serializable object)."
  ),
  output: projectLogsEventBaseSchema.shape.output.describe(
    "The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question."
  ),
  expected: projectLogsEventBaseSchema.shape.expected.describe(
    "The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models."
  ),
  scores: projectLogsEventBaseSchema.shape.scores.describe(
    "A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare logs."
  ),
  metadata: projectLogsEventBaseSchema.shape.metadata,
  tags: projectLogsEventBaseSchema.shape.tags,
  metrics: projectLogsEventBaseSchema.shape.metrics,
  context: projectLogsEventBaseSchema.shape.context,
  span_id: projectLogsEventBaseSchema.shape.span_id,
  span_parents: projectLogsEventBaseSchema.shape.span_parents,
  root_span_id: projectLogsEventBaseSchema.shape.root_span_id,
  span_attributes: projectLogsEventBaseSchema.shape.span_attributes
}).openapi("ProjectLogsEvent");
var isMergeDescription = [
  "The `_is_merge` field controls how the row is merged with any existing row with the same id in the DB. By default (or when set to `false`), the existing row is completely replaced by the new row. When set to `true`, the new row is deep-merged into the existing row",
  'For example, say there is an existing row in the DB `{"id": "foo", "input": {"a": 5, "b": 10}}`. If we merge a new row as `{"_is_merge": true, "id": "foo", "input": {"b": 11, "c": 20}}`, the new row will be `{"id": "foo", "input": {"a": 5, "b": 11, "c": 20}}`. If we replace the new row as `{"id": "foo", "input": {"b": 11, "c": 20}}`, the new row will be `{"id": "foo", "input": {"b": 11, "c": 20}}`'
].join("\n\n");
var mergeEventSchema = import_zod7.z.strictObject({
  [IS_MERGE_FIELD]: customTypes.literalTrue.describe(isMergeDescription),
  [MERGE_PATHS_FIELD]: import_zod7.z.string().array().array().nullish().describe(
    [
      "The `_merge_paths` field allows controlling the depth of the merge. It can only be specified alongside `_is_merge=true`. `_merge_paths` is a list of paths, where each path is a list of field names. The deep merge will not descend below any of the specified merge paths.",
      'For example, say there is an existing row in the DB `{"id": "foo", "input": {"a": {"b": 10}, "c": {"d": 20}}, "output": {"a": 20}}`. If we merge a new row as `{"_is_merge": true, "_merge_paths": [["input", "a"], ["output"]], "input": {"a": {"q": 30}, "c": {"e": 30}, "bar": "baz"}, "output": {"d": 40}}`, the new row will be `{"id": "foo": "input": {"a": {"q": 30}, "c": {"d": 20, "e": 30}, "bar": "baz"}, "output": {"d": 40}}`. In this case, due to the merge paths, we have replaced `input.a` and `output`, but have still deep-merged `input` and `input.c`.'
    ].join("\n\n")
  )
});
var replacementEventSchema = import_zod7.z.strictObject({
  [IS_MERGE_FIELD]: customTypes.literalFalse.nullish().describe(isMergeDescription),
  [PARENT_ID_FIELD]: import_zod7.z.string().nullish().describe(
    [
      "Use the `_parent_id` field to create this row as a subspan of an existing row. It cannot be specified alongside `_is_merge=true`. Tracking hierarchical relationships are important for tracing (see the [guide](https://www.braintrustdata.com/docs/guides/tracing) for full details).",
      'For example, say we have logged a row `{"id": "abc", "input": "foo", "output": "bar", "expected": "boo", "scores": {"correctness": 0.33}}`. We can create a sub-span of the parent row by logging `{"_parent_id": "abc", "id": "llm_call", "input": {"prompt": "What comes after foo?"}, "output": "bar", "metrics": {"tokens": 1}}`. In the webapp, only the root span row `"abc"` will show up in the summary view. You can view the full trace hierarchy (in this case, the `"llm_call"` row) by clicking on the "abc" row.'
    ].join("\n\n")
  )
});
function makeInsertEventSchemas(objectType, insertSchema) {
  const eventDescription = getEventObjectDescription(objectType);
  const article = getObjectArticle(objectType);
  const eventSchemaName = capitalize(
    getEventObjectType(objectType),
    "_"
  ).replace("_", "");
  const replaceVariantSchema = insertSchema.merge(replacementEventSchema).openapi(`Insert${eventSchemaName}EventReplace`);
  const mergeVariantSchema = insertSchema.merge(mergeEventSchema).openapi(`Insert${eventSchemaName}EventMerge`);
  const eventSchema = import_zod7.z.union([replaceVariantSchema, mergeVariantSchema]).describe(`${capitalize(article)} ${eventDescription} event`).openapi(`Insert${eventSchemaName}Event`);
  const requestSchema = import_zod7.z.strictObject({
    events: eventSchema.array().describe(`A list of ${eventDescription} events to insert`)
  }).openapi(`Insert${eventSchemaName}EventRequest`);
  return { eventSchema, requestSchema };
}
var insertEventsResponseSchema = import_zod7.z.strictObject({
  row_ids: import_zod7.z.string().array().describe(
    "The ids of all rows that were inserted, aligning one-to-one with the rows provided as input"
  )
}).openapi("InsertEventsResponse");
var {
  eventSchema: insertExperimentEventSchema,
  requestSchema: insertExperimentEventsRequestSchema
} = makeInsertEventSchemas(
  "experiment",
  import_zod7.z.strictObject({
    input: experimentEventSchema.shape.input,
    output: experimentEventSchema.shape.output,
    expected: experimentEventSchema.shape.expected,
    scores: experimentEventSchema.shape.scores,
    metadata: experimentEventSchema.shape.metadata,
    tags: experimentEventSchema.shape.tags,
    metrics: experimentEventSchema.shape.metrics,
    context: experimentEventSchema.shape.context,
    span_attributes: experimentEventSchema.shape.span_attributes,
    id: experimentEventSchema.shape.id.nullish(),
    dataset_record_id: experimentEventSchema.shape.dataset_record_id,
    [OBJECT_DELETE_FIELD]: experimentEventBaseSchema.shape[OBJECT_DELETE_FIELD]
  })
);
var {
  eventSchema: insertDatasetEventSchema,
  requestSchema: insertDatasetEventsRequestSchema
} = makeInsertEventSchemas(
  "dataset",
  import_zod7.z.strictObject({
    input: datasetEventSchema.shape.input,
    expected: datasetEventSchema.shape.expected,
    metadata: datasetEventSchema.shape.metadata,
    tags: datasetEventSchema.shape.tags,
    id: datasetEventSchema.shape.id.nullish(),
    [OBJECT_DELETE_FIELD]: datasetEventBaseSchema.shape[OBJECT_DELETE_FIELD]
  })
);
var {
  eventSchema: insertProjectLogsEventSchema,
  requestSchema: insertProjectLogsEventsRequestSchema
} = makeInsertEventSchemas(
  "project",
  import_zod7.z.strictObject({
    input: projectLogsEventSchema.shape.input,
    output: projectLogsEventSchema.shape.output,
    expected: projectLogsEventSchema.shape.expected,
    scores: projectLogsEventSchema.shape.scores,
    metadata: projectLogsEventSchema.shape.metadata,
    tags: projectLogsEventSchema.shape.tags,
    metrics: projectLogsEventSchema.shape.metrics,
    context: projectLogsEventSchema.shape.context,
    span_attributes: projectLogsEventSchema.shape.span_attributes,
    id: projectLogsEventSchema.shape.id.nullish(),
    [OBJECT_DELETE_FIELD]: projectLogsEventBaseSchema.shape[OBJECT_DELETE_FIELD]
  })
);
function makeFeedbackRequestSchema(objectType, feedbackSchema) {
  const eventDescription = getEventObjectDescription(objectType);
  const eventSchemaName = capitalize(
    getEventObjectType(objectType),
    "_"
  ).replace("_", "");
  return import_zod7.z.strictObject({
    feedback: feedbackSchema.array().describe(`A list of ${eventDescription} feedback items`)
  }).openapi(`Feedback${eventSchemaName}EventRequest`);
}
var feedbackExperimentRequestBaseSchema = generateBaseEventFeedbackSchema("experiment");
var feedbackExperimentItemSchema = import_zod7.z.strictObject({
  id: feedbackExperimentRequestBaseSchema.shape.id,
  scores: feedbackExperimentRequestBaseSchema.shape.scores,
  expected: feedbackExperimentRequestBaseSchema.shape.expected,
  comment: feedbackExperimentRequestBaseSchema.shape.comment,
  metadata: feedbackExperimentRequestBaseSchema.shape.metadata,
  source: feedbackExperimentRequestBaseSchema.shape.source
}).openapi("FeedbackExperimentItem");
var feedbackExperimentRequestSchema = makeFeedbackRequestSchema(
  "experiment",
  feedbackExperimentItemSchema
);
var feedbackDatasetRequestBaseSchema = generateBaseEventFeedbackSchema("dataset");
var feedbackDatasetItemSchema = import_zod7.z.strictObject({
  id: feedbackDatasetRequestBaseSchema.shape.id,
  comment: feedbackDatasetRequestBaseSchema.shape.comment,
  metadata: feedbackDatasetRequestBaseSchema.shape.metadata,
  source: feedbackDatasetRequestBaseSchema.shape.source
}).openapi("FeedbackDatasetItem");
var feedbackDatasetRequestSchema = makeFeedbackRequestSchema(
  "dataset",
  feedbackDatasetItemSchema
);
var feedbackProjectLogsRequestBaseSchema = generateBaseEventFeedbackSchema("project");
var feedbackProjectLogsItemSchema = import_zod7.z.strictObject({
  id: feedbackProjectLogsRequestBaseSchema.shape.id,
  scores: feedbackProjectLogsRequestBaseSchema.shape.scores,
  expected: feedbackProjectLogsRequestBaseSchema.shape.expected,
  comment: feedbackProjectLogsRequestBaseSchema.shape.comment,
  metadata: feedbackProjectLogsRequestBaseSchema.shape.metadata,
  source: feedbackProjectLogsRequestBaseSchema.shape.source
}).openapi("FeedbackProjectLogsItem");
var feedbackProjectLogsRequestSchema = makeFeedbackRequestSchema(
  "project",
  feedbackProjectLogsItemSchema
);
var feedbackPromptRequestBaseSchema = generateBaseEventFeedbackSchema("prompt");
var feedbackPromptItemSchema = import_zod7.z.strictObject({
  id: feedbackPromptRequestBaseSchema.shape.id,
  comment: feedbackPromptRequestBaseSchema.shape.comment,
  metadata: feedbackPromptRequestBaseSchema.shape.metadata,
  source: feedbackPromptRequestBaseSchema.shape.source
}).openapi("FeedbackPromptItem");
var feedbackPromptRequestSchema = makeFeedbackRequestSchema(
  "prompt",
  feedbackPromptItemSchema
);
var feedbackPromptSessionRequestBaseSchema = generateBaseEventFeedbackSchema("prompt_session");
var feedbackPromptSessionItemSchema = import_zod7.z.strictObject({
  id: feedbackPromptSessionRequestBaseSchema.shape.id,
  comment: feedbackPromptSessionRequestBaseSchema.shape.comment,
  metadata: feedbackPromptSessionRequestBaseSchema.shape.metadata,
  source: feedbackPromptSessionRequestBaseSchema.shape.source
}).openapi("FeedbackPromptSessionItem");
var feedbackPromptSessionRequestSchema = makeFeedbackRequestSchema(
  "prompt_session",
  feedbackPromptSessionItemSchema
);
var eventObjectSchemas = {
  experiment: {
    event: experimentEventSchema,
    fetchResponse: makeFetchEventsResponseSchema(
      "experiment",
      experimentEventSchema
    ),
    insertEvent: insertExperimentEventSchema,
    insertRequest: insertExperimentEventsRequestSchema,
    feedbackItem: feedbackExperimentItemSchema,
    feedbackRequest: feedbackExperimentRequestSchema
  },
  dataset: {
    event: datasetEventSchema,
    fetchResponse: makeFetchEventsResponseSchema("dataset", datasetEventSchema),
    insertEvent: insertDatasetEventSchema,
    insertRequest: insertDatasetEventsRequestSchema,
    feedbackItem: feedbackDatasetItemSchema,
    feedbackRequest: feedbackDatasetRequestSchema
  },
  project_logs: {
    event: projectLogsEventSchema,
    fetchResponse: makeFetchEventsResponseSchema(
      "project",
      projectLogsEventSchema
    ),
    insertEvent: insertProjectLogsEventSchema,
    insertRequest: insertProjectLogsEventsRequestSchema,
    feedbackItem: feedbackProjectLogsItemSchema,
    feedbackRequest: feedbackProjectLogsRequestSchema
  },
  prompt: {
    event: promptSchema,
    fetchResponse: void 0,
    insertEvent: void 0,
    insertRequest: void 0,
    feedbackItem: feedbackPromptItemSchema,
    feedbackRequest: feedbackPromptRequestSchema
  },
  prompt_session: {
    event: promptSessionEventSchema,
    fetchResponse: void 0,
    insertEvent: void 0,
    insertRequest: void 0,
    feedbackItem: feedbackPromptSessionItemSchema,
    feedbackRequest: feedbackPromptRequestBaseSchema
  }
};
function makeCrossObjectIndividualRequestSchema(objectType) {
  const eventObjectType = getEventObjectType(objectType);
  const eventDescription = getEventObjectDescription(objectType);
  const eventObjectSchema = eventObjectSchemas[eventObjectType];
  const insertObject = import_zod7.z.strictObject({
    ...eventObjectSchema.insertEvent ? {
      events: eventObjectSchema.insertEvent.array().nullish().describe(`A list of ${eventDescription} events to insert`)
    } : {},
    feedback: eventObjectSchema.feedbackItem.array().nullish().describe(`A list of ${eventDescription} feedback items`)
  });
  return import_zod7.z.record(import_zod7.z.string().uuid(), insertObject).nullish().describe(
    `A mapping from ${objectType} id to a set of log events and feedback items to insert`
  );
}
function makeCrossObjectIndividualResponseSchema(objectType) {
  return import_zod7.z.record(import_zod7.z.string().uuid(), insertEventsResponseSchema).nullish().describe(
    `A mapping from ${objectType} id to row ids for inserted \`events\``
  );
}
var crossObjectInsertRequestSchema = import_zod7.z.strictObject({
  experiment: makeCrossObjectIndividualRequestSchema("experiment"),
  dataset: makeCrossObjectIndividualRequestSchema("dataset"),
  project_logs: makeCrossObjectIndividualRequestSchema("project")
}).openapi("CrossObjectInsertRequest");
var crossObjectInsertResponseSchema = import_zod7.z.strictObject({
  experiment: makeCrossObjectIndividualResponseSchema("experiment"),
  dataset: makeCrossObjectIndividualResponseSchema("dataset"),
  project_logs: makeCrossObjectIndividualResponseSchema("project")
}).openapi("CrossObjectInsertResponse");
var summarizeScoresParamSchema = import_zod7.z.boolean().describe(
  "Whether to summarize the scores and metrics. If false (or omitted), only the metadata will be returned."
);
var comparisonExperimentIdParamSchema = import_zod7.z.string().uuid().describe(
  "The experiment to compare against, if summarizing scores and metrics. If omitted, will fall back to the `base_exp_id` stored in the experiment metadata, and then to the most recent experiment run in the same project. Must pass `summarize_scores=true` for this id to be used"
);
var summarizeDataParamSchema = import_zod7.z.boolean().describe(
  "Whether to summarize the data. If false (or omitted), only the metadata will be returned."
);
var summarizeExperimentResponseSchema = import_zod7.z.strictObject({
  project_name: import_zod7.z.string().describe("Name of the project that the experiment belongs to"),
  experiment_name: import_zod7.z.string().describe("Name of the experiment"),
  project_url: import_zod7.z.string().url().describe("URL to the project's page in the Braintrust app"),
  experiment_url: import_zod7.z.string().url().describe("URL to the experiment's page in the Braintrust app"),
  comparison_experiment_name: import_zod7.z.string().nullish().describe("The experiment which scores are baselined against"),
  scores: import_zod7.z.record(
    import_zod7.z.strictObject({
      name: import_zod7.z.string().describe("Name of the score"),
      score: import_zod7.z.number().min(0).max(1).describe("Average score across all examples"),
      diff: import_zod7.z.number().min(-1).max(1).describe(
        "Difference in score between the current and comparison experiment"
      ),
      improvements: import_zod7.z.number().int().min(0).describe("Number of improvements in the score"),
      regressions: import_zod7.z.number().int().min(0).describe("Number of regressions in the score")
    }).describe("Summary of a score's performance").openapi("ScoreSummary")
  ).nullish().describe("Summary of the experiment's scores"),
  metrics: import_zod7.z.record(
    import_zod7.z.strictObject({
      name: import_zod7.z.string().describe("Name of the metric"),
      metric: import_zod7.z.number().describe("Average metric across all examples"),
      unit: import_zod7.z.string().describe("Unit label for the metric"),
      diff: import_zod7.z.number().describe(
        "Difference in metric between the current and comparison experiment"
      ),
      improvements: import_zod7.z.number().int().min(0).describe("Number of improvements in the metric"),
      regressions: import_zod7.z.number().int().min(0).describe("Number of regressions in the metric")
    }).describe("Summary of a metric's performance").openapi("MetricSummary")
  ).nullish().describe("Summary of the experiment's metrics")
}).describe("Summary of an experiment").openapi("SummarizeExperimentResponse");
var summarizeDatasetResponseSchema = import_zod7.z.strictObject({
  project_name: import_zod7.z.string().describe("Name of the project that the dataset belongs to"),
  dataset_name: import_zod7.z.string().describe("Name of the dataset"),
  project_url: import_zod7.z.string().url().describe("URL to the project's page in the Braintrust app"),
  dataset_url: import_zod7.z.string().url().describe("URL to the dataset's page in the Braintrust app"),
  data_summary: import_zod7.z.strictObject({
    total_records: import_zod7.z.number().int().min(0).describe("Total number of records in the dataset")
  }).nullish().describe("Summary of a dataset's data").openapi("DataSummary")
}).describe("Summary of a dataset").openapi("SummarizeDatasetResponse");
var objectTypeSummarizeResponseSchemas = {
  experiment: summarizeExperimentResponseSchema,
  dataset: summarizeDatasetResponseSchema,
  project: void 0,
  prompt: void 0,
  role: void 0,
  group: void 0,
  acl: void 0,
  user: void 0
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BRAINTRUST_PARAMS,
  aclObjectSchema,
  aclObjectTypeEnum,
  aclSchema,
  allFetchFiltersSchema,
  apiKeySchema,
  appLimitSchema,
  auditSourcesSchema,
  chatCompletionContentPartImageSchema,
  comparisonExperimentIdParamSchema,
  crossObjectInsertRequestSchema,
  crossObjectInsertResponseSchema,
  datasetSchema,
  datetimeStringSchema,
  endingBeforeSchema,
  eventObjectSchemas,
  experimentSchema,
  fetchEventsRequestSchema,
  fetchFiltersSchema,
  fetchLimitSchema,
  getEventObjectDescription,
  getEventObjectType,
  getObjectArticle,
  groupSchema,
  insertEventsResponseSchema,
  jsonSchema,
  literalSchema,
  makeObjectIdsFilterSchema,
  maxRootSpanIdSchema,
  maxXactIdSchema,
  meSchema,
  memberSchema,
  messageRoleSchema,
  modelParamsSchema,
  objectSchemas,
  objectTypeSummarizeResponseSchemas,
  objectTypes,
  objectTypesWithEvent,
  organizationSchema,
  permissionEnum,
  projectSchema,
  promptBlockDataSchema,
  promptDataSchema,
  promptOptionsSchema,
  promptSchema,
  roleSchema,
  startingAfterSchema,
  summarizeDataParamSchema,
  summarizeScoresParamSchema,
  toolsSchema,
  userSchema,
  versionSchema
});
