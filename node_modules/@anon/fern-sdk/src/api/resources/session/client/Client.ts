/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Session {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }

  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
    /** Additional headers to include in the request. */
    headers?: Record<string, string>;
  }
}

export class Session {
  constructor(protected readonly _options: Session.Options) {}

  /**
   * @param {AnonApi.GetAccountApiV1AppIntegrationRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getAppIntegration({
   *         id: "string"
   *     })
   */
  public async getAppIntegration(
    request: AnonApi.GetAccountApiV1AppIntegrationRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.GetAccountApiV1AppIntegrationResponse> {
    const { id } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    _queryParams["id"] = id;
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/appIntegration",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.GetAccountApiV1AppIntegrationResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /account/api/v1/appIntegration.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.PostAccountApiV1BrowserEnvironmentRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.createRuntimeBrowserEnvironment({
   *         proxy: {
   *             server: "string",
   *             bypass: "string",
   *             username: "string",
   *             password: "string"
   *         },
   *         isLiveStreamingSession: true
   *     })
   */
  public async createRuntimeBrowserEnvironment(
    request?: AnonApi.PostAccountApiV1BrowserEnvironmentRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PostAccountApiV1BrowserEnvironmentResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/browser/environment",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request != null ? request : undefined,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.PostAccountApiV1BrowserEnvironmentResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /account/api/v1/browser/environment.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.GetAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSession({
   *         ownerId: "string",
   *         appUserId: "string",
   *         domain: "string"
   *     })
   */
  public async getSession(
    request: AnonApi.GetAccountApiV1SessionRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.GetAccountApiV1SessionResponse> {
    const { ownerId, appUserId, domain } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    if (ownerId != null) {
      _queryParams["ownerId"] = ownerId;
    }

    if (appUserId != null) {
      _queryParams["appUserId"] = appUserId;
    }

    _queryParams["domain"] = domain;
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/session",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.GetAccountApiV1SessionResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /account/api/v1/session.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.PostAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.addSession({
   *         ownerId: "string",
   *         domain: "string",
   *         session: {
   *             id: "string",
   *             status: "active",
   *             cookies: [{
   *                     name: "string",
   *                     value: "string",
   *                     domain: "string",
   *                     path: "string",
   *                     expires: 1.1,
   *                     secure: true,
   *                     hostOnly: true,
   *                     httpOnly: true,
   *                     discard: true,
   *                     session: true,
   *                     partitioned: true,
   *                     sameSite: "unspecified",
   *                     sameSitePolicy: "unspecified",
   *                     storeId: "string"
   *                 }],
   *             localStorage: [["string"]],
   *             sessionStorage: [["string"]],
   *             proxyId: "string",
   *             url: "string"
   *         }
   *     })
   */
  public async addSession(
    request: AnonApi.PostAccountApiV1SessionRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PostAccountApiV1SessionResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/session",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.PostAccountApiV1SessionResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /account/api/v1/session.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.PutAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.updateSession({
   *         ownerId: "string",
   *         domain: "string",
   *         session: {
   *             id: "string",
   *             status: "active",
   *             cookies: [{
   *                     name: "string",
   *                     value: "string",
   *                     domain: "string",
   *                     path: "string",
   *                     expires: 1.1,
   *                     secure: true,
   *                     hostOnly: true,
   *                     httpOnly: true,
   *                     discard: true,
   *                     session: true,
   *                     partitioned: true,
   *                     sameSite: "unspecified",
   *                     sameSitePolicy: "unspecified",
   *                     storeId: "string"
   *                 }],
   *             localStorage: [["string"]],
   *             sessionStorage: [["string"]],
   *             proxyId: "string",
   *             url: "string"
   *         }
   *     })
   */
  public async updateSession(
    request: AnonApi.PutAccountApiV1SessionRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PutAccountApiV1SessionResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/session",
      ),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.PutAccountApiV1SessionResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling PUT /account/api/v1/session.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Disconnect a previously connected session.
   *
   * @param {AnonApi.DeleteSessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.removeSession({
   *         appUserId: "string",
   *         app: "string"
   *     })
   */
  public async removeSession(
    request: AnonApi.DeleteSessionRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.DeleteSessionResponse> {
    const { appUserId, app } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    _queryParams["appUserId"] = appUserId;
    _queryParams["app"] = typeof app === "string" ? app : JSON.stringify(app);
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/session",
      ),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.DeleteSessionResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling DELETE /account/api/v1/session.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.GetAccountApiV1SessionStatusRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSessionStatus({
   *         appUserId: "string",
   *         app: "string"
   *     })
   */
  public async getSessionStatus(
    request: AnonApi.GetAccountApiV1SessionStatusRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.GetAccountApiV1SessionStatusResponse> {
    const { appUserId, app } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    _queryParams["appUserId"] = appUserId;
    _queryParams["app"] = typeof app === "string" ? app : JSON.stringify(app);
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/session/status",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.GetAccountApiV1SessionStatusResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /account/api/v1/session/status.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.GetAccountApiV1SessionRequestRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSessionRequestStatus({
   *         id: "string"
   *     })
   */
  public async getSessionRequestStatus(
    request: AnonApi.GetAccountApiV1SessionRequestRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.GetAccountApiV1SessionRequestResponse> {
    const { id } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    _queryParams["id"] = id;
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/session/request",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.GetAccountApiV1SessionRequestResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /account/api/v1/session/request.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.PostAccountApiV1SessionRequestRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.createSessionRequest({
   *         iosPushAuthorization: {
   *             iosAppId: "string",
   *             authToken: "string"
   *         },
   *         account: {
   *             ownerId: "string",
   *             domain: "string"
   *         },
   *         appSdkClientId: "string",
   *         alertBody: "string",
   *         alertTitle: "string"
   *     })
   */
  public async createSessionRequest(
    request: AnonApi.PostAccountApiV1SessionRequestRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PostAccountApiV1SessionRequestResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/session/request",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.PostAccountApiV1SessionRequestResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /account/api/v1/session/request.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * List all the app user sessions you have access to. Optionally filter by a specific user.
   *
   * @param {AnonApi.ListSessionsRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.listSessions({
   *         appUserId: "string"
   *     })
   */
  public async listSessions(
    request: AnonApi.ListSessionsRequest = {},
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.ListSessionsResponse> {
    const { appUserId } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    if (appUserId != null) {
      _queryParams["appUserId"] = appUserId;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/sessions",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.ListSessionsResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /account/api/v1/sessions.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.PostAccountApiV1SessionAccessGrantRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.addSessionAccessGrant({
   *         sessionId: "string",
   *         appUserId: "string"
   *     })
   */
  public async addSessionAccessGrant(
    request: AnonApi.PostAccountApiV1SessionAccessGrantRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PostAccountApiV1SessionAccessGrantResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/sessionAccessGrant",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.PostAccountApiV1SessionAccessGrantResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /account/api/v1/sessionAccessGrant.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.DeleteAccountApiV1SessionAccessGrantRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.deleteSessionAccessGrant({
   *         sessionId: "string",
   *         appUserId: "string"
   *     })
   */
  public async deleteSessionAccessGrant(
    request: AnonApi.DeleteAccountApiV1SessionAccessGrantRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.DeleteAccountApiV1SessionAccessGrantResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/sessionAccessGrant",
      ),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.DeleteAccountApiV1SessionAccessGrantResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling DELETE /account/api/v1/sessionAccessGrant.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  protected async _getAuthorizationHeader(): Promise<string> {
    return `Bearer ${await core.Supplier.get(this._options.token)}`;
  }
}
