/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Link {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }

  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
    /** Additional headers to include in the request. */
    headers?: Record<string, string>;
  }
}

export class Link {
  constructor(protected readonly _options: Link.Options) {}

  /**
   * Initiate the Linking process
   *
   * @param {AnonApi.InitiateLinkRequest} request
   * @param {Link.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.link.initiateLink({
   *         app: "rippling",
   *         appUserId: "string",
   *         provider: "browserbase"
   *     })
   */
  public async initiateLink(
    request: AnonApi.InitiateLinkRequest,
    requestOptions?: Link.RequestOptions,
  ): Promise<AnonApi.LinkResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "account/api/v1/link",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /account/api/v1/link.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Submit more information in the Linking process
   *
   * @param {string} linkId
   * @param {AnonApi.ContinueLinkRequest} request
   * @param {Link.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.link.continueLink("string", {
   *         email: "string",
   *         password: "string"
   *     })
   */
  public async continueLink(
    linkId: string,
    request: AnonApi.ContinueLinkRequest,
    requestOptions?: Link.RequestOptions,
  ): Promise<AnonApi.LinkResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        `account/api/v1/link/${encodeURIComponent(linkId)}`,
      ),
      method: "PATCH",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling PATCH /account/api/v1/link/{linkId}.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Generates a url for launching Anon Link.
   *
   * @param {AnonApi.CreateLinkUrlRequest} request
   * @param {Link.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.link.createLinkUrl({
   *         app: "string",
   *         appUserId: "string",
   *         chromeExtensionId: "string",
   *         companyLogoUrl: "string",
   *         companyName: "string",
   *         redirectUrl: "string",
   *         state: "string",
   *         authUrl: "string",
   *         checkUrl: "string",
   *         displayName: "string",
   *         iconUrl: "string"
   *     })
   */
  public async createLinkUrl(
    request: AnonApi.CreateLinkUrlRequest,
    requestOptions?: Link.RequestOptions,
  ): Promise<AnonApi.CreateLinkUrlResponse> {
    const {
      app,
      appUserId,
      chromeExtensionId,
      companyLogoUrl,
      companyName,
      redirectUrl,
      state,
      authUrl,
      checkUrl,
      displayName,
      iconUrl,
    } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    _queryParams["app"] = typeof app === "string" ? app : JSON.stringify(app);
    _queryParams["appUserId"] = appUserId;
    if (chromeExtensionId != null) {
      _queryParams["chromeExtensionId"] = chromeExtensionId;
    }

    if (companyLogoUrl != null) {
      _queryParams["companyLogoUrl"] = companyLogoUrl;
    }

    if (companyName != null) {
      _queryParams["companyName"] = companyName;
    }

    _queryParams["redirectUrl"] = redirectUrl;
    if (state != null) {
      _queryParams["state"] = state;
    }

    if (authUrl != null) {
      _queryParams["authUrl"] = authUrl;
    }

    if (checkUrl != null) {
      _queryParams["checkUrl"] = checkUrl;
    }

    if (displayName != null) {
      _queryParams["displayName"] = displayName;
    }

    if (iconUrl != null) {
      _queryParams["iconUrl"] = iconUrl;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "link/url",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.CreateLinkUrlResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /link/url.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  protected async _getAuthorizationHeader(): Promise<string> {
    return `Bearer ${await core.Supplier.get(this._options.token)}`;
  }
}
