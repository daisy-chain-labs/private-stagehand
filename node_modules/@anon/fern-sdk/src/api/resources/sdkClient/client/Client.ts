/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace SdkClient {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }

  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
    /** Additional headers to include in the request. */
    headers?: Record<string, string>;
  }
}

export class SdkClient {
  constructor(protected readonly _options: SdkClient.Options) {}

  /**
   * This endpoint creates a new `SdkClient`.
   *
   * @param {AnonApi.CreateSdkClient} request
   * @param {SdkClient.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.sdkClient.createSdkClient({
   *         name: "string",
   *         kind: "service",
   *         description: "string",
   *         oauthDisabled: true,
   *         authorization: {
   *             jwksUri: "string",
   *             idClaim: "string"
   *         },
   *         organizationId: "string"
   *     })
   */
  public async createSdkClient(
    request: AnonApi.CreateSdkClient,
    requestOptions?: SdkClient.RequestOptions,
  ): Promise<AnonApi.CreatedSdkClient> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/org/sdkClient",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.CreatedSdkClient;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /org/sdkClient.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * This endpoint looks up an existing `SdkClient`.
   *
   * @param {string} sdkClientId - ID of the SdkClient.
   * @param {AnonApi.GetSdkClientRequest} request
   * @param {SdkClient.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.sdkClient.getSdkClient("string", {
   *         userId: "string",
   *         orgId: "string"
   *     })
   */
  public async getSdkClient(
    sdkClientId: string,
    request: AnonApi.GetSdkClientRequest = {},
    requestOptions?: SdkClient.RequestOptions,
  ): Promise<AnonApi.SdkClient> {
    const { userId: xForwardedUserId, orgId: xForwardedOrganizationId } =
      request;
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        `/org/sdkClient/${encodeURIComponent(sdkClientId)}`,
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        userId: xForwardedUserId != null ? xForwardedUserId : undefined,
        orgId:
          xForwardedOrganizationId != null
            ? xForwardedOrganizationId
            : undefined,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.SdkClient;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /org/sdkClient/{sdkClientId}.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Get authentication details for an SDK client
   *
   * @param {SdkClient.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.sdkClient.auth()
   */
  public async auth(
    requestOptions?: SdkClient.RequestOptions,
  ): Promise<AnonApi.AuthenticatorResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/org/sdkClient/auth",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.AuthenticatorResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /org/sdkClient/auth.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Updates an existing SDK client's properties
   *
   * @param {AnonApi.SdkClientId} sdkClientId - ID of the SDK client to update
   * @param {AnonApi.UpdateSdkClient} request
   * @param {SdkClient.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.sdkClient.updateSdkClient("string", {
   *         name: "string",
   *         description: "string",
   *         oauthConfig: {
   *             logoUrl: "string",
   *             chromeExtensionId: "string",
   *             redirectUrls: ["string"]
   *         }
   *     })
   */
  public async updateSdkClient(
    sdkClientId: AnonApi.SdkClientId,
    request: AnonApi.UpdateSdkClient,
    requestOptions?: SdkClient.RequestOptions,
  ): Promise<AnonApi.SdkClient> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        `/org/sdkClient/${encodeURIComponent(sdkClientId)}`,
      ),
      method: "PATCH",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.SdkClient;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling PATCH /org/sdkClient/{sdkClientId}.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Lists all `SdkClients` in your organization.
   *
   * @param {SdkClient.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.sdkClient.listSdkClients()
   */
  public async listSdkClients(
    requestOptions?: SdkClient.RequestOptions,
  ): Promise<AnonApi.SdkClientList> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/org/sdkClients",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.SdkClientList;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /org/sdkClients.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  protected async _getAuthorizationHeader(): Promise<string> {
    return `Bearer ${await core.Supplier.get(this._options.token)}`;
  }
}
