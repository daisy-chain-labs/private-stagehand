/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace RuntimeLog {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }

  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
    /** Additional headers to include in the request. */
    headers?: Record<string, string>;
  }
}

export class RuntimeLog {
  constructor(protected readonly _options: RuntimeLog.Options) {}

  /**
   * @param {AnonApi.RuntimeLogCreateRequest} request
   * @param {RuntimeLog.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.runtimeLog.recordLog({
   *         environment: "local",
   *         userMetadata: {
   *             anonSessionId: "string",
   *             externalUserId: "string"
   *         },
   *         browserConfig: {
   *             browserType: "managed",
   *             proxy: {
   *                 isAnonProxyEnabled: true
   *             },
   *             browserbase: {
   *                 sessionId: "string",
   *                 sessionUrl: "string"
   *             }
   *         },
   *         app: "string",
   *         runtimeResult: {
   *             type: "success",
   *             startSdkTime: 1,
   *             startRuntimeExecutionTime: 1,
   *             endRuntimeExecutionTime: 1
   *         }
   *     })
   */
  public async recordLog(
    request: AnonApi.RuntimeLogCreateRequest,
    requestOptions?: RuntimeLog.RequestOptions,
  ): Promise<AnonApi.RecordLogResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/account/api/v1/logs",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.RecordLogResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /account/api/v1/logs.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  protected async _getAuthorizationHeader(): Promise<string> {
    return `Bearer ${await core.Supplier.get(this._options.token)}`;
  }
}
