/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Actions {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }

  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
    /** Additional headers to include in the request. */
    headers?: Record<string, string>;
  }
}

export class Actions {
  constructor(protected readonly _options: Actions.Options) {}

  /**
   * Output a list of the user's LinkedIn conversations
   *
   * @param {AnonApi.LinkedinListConversationsQuery} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinListConversations({
   *         profileName: "string",
   *         profileId: "string",
   *         appUserId: "string",
   *         contentType: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinListConversations(
    request: AnonApi.LinkedinListConversationsQuery,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinListConversationsResponse> {
    const { profileName, profileId, appUserId, contentType, appUserPoolId } =
      request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    if (profileName != null) {
      _queryParams["profileName"] = profileName;
    }

    if (profileId != null) {
      _queryParams["profileId"] = profileId;
    }

    _queryParams["appUserId"] = appUserId;
    if (contentType != null) {
      _queryParams["contentType"] = contentType;
    }

    if (appUserPoolId != null) {
      _queryParams["appUserPoolId"] = appUserPoolId;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/listConversations",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinListConversationsResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /actions/linkedin/listConversations.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Output a list of the user's LinkedIn connections
   *
   * @param {AnonApi.LinkedinListConnectionsQuery} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinListConnections({
   *         cursor: "string",
   *         profileName: "string",
   *         appUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinListConnections(
    request: AnonApi.LinkedinListConnectionsQuery,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinListConnectionsResponse> {
    const { cursor, profileName, appUserId, appUserPoolId } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    if (cursor != null) {
      _queryParams["cursor"] = cursor;
    }

    if (profileName != null) {
      _queryParams["profileName"] = profileName;
    }

    _queryParams["appUserId"] = appUserId;
    if (appUserPoolId != null) {
      _queryParams["appUserPoolId"] = appUserPoolId;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/listConnections",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinListConnectionsResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /actions/linkedin/listConnections.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Create a new LinkedIn conversation
   *
   * @param {AnonApi.LinkedinCreateConversationBody} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinCreateConversation({
   *         profileId: "string",
   *         appUserId: "string",
   *         message: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinCreateConversation(
    request: AnonApi.LinkedinCreateConversationBody,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinCreateConversationResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/createConversation",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinCreateConversationResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /actions/linkedin/createConversation.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Get the message history and metadata of a specific LinkedIn conversation
   *
   * @param {AnonApi.LinkedinGetConversationQuery} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinGetConversation({
   *         id: "string",
   *         appUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinGetConversation(
    request: AnonApi.LinkedinGetConversationQuery,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinGetConversationResponse> {
    const { id, appUserId, appUserPoolId } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    _queryParams["id"] = id;
    _queryParams["appUserId"] = appUserId;
    if (appUserPoolId != null) {
      _queryParams["appUserPoolId"] = appUserPoolId;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/getConversation",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinGetConversationResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /actions/linkedin/getConversation.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Get the message history and metadata of a specific LinkedIn conversation
   *
   * @param {AnonApi.LinkedinListMessagesQuery} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinListMessages({
   *         id: "string",
   *         appUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinListMessages(
    request: AnonApi.LinkedinListMessagesQuery,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinListMessagesResponse> {
    const { id, appUserId, appUserPoolId } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    _queryParams["id"] = id;
    _queryParams["appUserId"] = appUserId;
    if (appUserPoolId != null) {
      _queryParams["appUserPoolId"] = appUserPoolId;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/listMessages",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinListMessagesResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /actions/linkedin/listMessages.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Send a message on LinkedIn
   *
   * @param {AnonApi.LinkedinSendMessageBody} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinSendMessage({
   *         message: "string",
   *         appUserId: "string",
   *         conversationId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinSendMessage(
    request: AnonApi.LinkedinSendMessageBody,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinSendMessageResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/sendMessage",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinSendMessageResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /actions/linkedin/sendMessage.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Get the profile information of a LinkedIn user
   *
   * @param {AnonApi.LinkedinGetProfileRequest} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinGetProfile({
   *         id: "string",
   *         appUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinGetProfile(
    request: AnonApi.LinkedinGetProfileRequest,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinGetProfileResponse> {
    const { id, appUserId, appUserPoolId } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    _queryParams["id"] = id;
    _queryParams["appUserId"] = appUserId;
    if (appUserPoolId != null) {
      _queryParams["appUserPoolId"] = appUserPoolId;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/getProfile",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinGetProfileResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /actions/linkedin/getProfile.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Send a connection request to a LinkedIn user
   *
   * @param {AnonApi.LinkedinSendConnectionRequestBody} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinSendConnectionRequest({
   *         profileId: "string",
   *         appUserId: "string",
   *         message: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinSendConnectionRequest(
    request: AnonApi.LinkedinSendConnectionRequestBody,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinSendConnectionRequestResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/sendConnectionRequest",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinSendConnectionRequestResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /actions/linkedin/sendConnectionRequest.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Search for LinkedIn profiles by name
   *
   * @param {AnonApi.LinkedinSearchProfilesBody} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinSearchProfiles({
   *         cursor: "string",
   *         profileName: "string",
   *         connectionsOf: "string",
   *         appUserId: "string",
   *         networkDistance: ["1"],
   *         appUserPoolId: "string"
   *     })
   */
  public async linkedinSearchProfiles(
    request: AnonApi.LinkedinSearchProfilesBody,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinSearchProfilesResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/actions/linkedin/search",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.LinkedinSearchProfilesResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /actions/linkedin/search.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  protected async _getAuthorizationHeader(): Promise<string> {
    return `Bearer ${await core.Supplier.get(this._options.token)}`;
  }
}
