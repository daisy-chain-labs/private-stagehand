/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Organization {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }

  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
    /** Additional headers to include in the request. */
    headers?: Record<string, string>;
  }
}

export class Organization {
  constructor(protected readonly _options: Organization.Options) {}

  /**
   * This endpoint creates a new `Organization`.
   *
   * @param {AnonApi.CreateOrganization} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.createOrganization({
   *         name: "string",
   *         member: {
   *             name: "string",
   *             email: "string",
   *             password: "string"
   *         }
   *     })
   */
  public async createOrganization(
    request: AnonApi.CreateOrganization,
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.Organization> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/org/organization",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.Organization;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /org/organization.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * This endpoint looks up an existing `Organization`.
   *
   * @param {AnonApi.OrganizationId} organizationId - ID of the Organization
   * @param {AnonApi.GetOrgRequest} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.getOrganization("string", {
   *         userId: "string",
   *         orgId: "string"
   *     })
   */
  public async getOrganization(
    organizationId: AnonApi.OrganizationId,
    request: AnonApi.GetOrgRequest = {},
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.Organization> {
    const { userId: xForwardedUserId, orgId: xForwardedOrganizationId } =
      request;
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        `/org/organization/${encodeURIComponent(organizationId)}`,
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        userId: xForwardedUserId != null ? xForwardedUserId : undefined,
        orgId:
          xForwardedOrganizationId != null
            ? xForwardedOrganizationId
            : undefined,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.Organization;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /org/organization/{organizationId}.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * This endpoint deletes an existing `Organization`.
   *
   * @param {AnonApi.OrganizationId} organizationId - ID of the Organization to delete
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.deleteOrganization("string")
   */
  public async deleteOrganization(
    organizationId: AnonApi.OrganizationId,
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.DeleteOrganizationResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        `/org/organization/${encodeURIComponent(organizationId)}`,
      ),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.DeleteOrganizationResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling DELETE /org/organization/{organizationId}.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * This endpoint updates an existing `Organization`.
   *
   * @param {AnonApi.OrganizationId} organizationId - ID of the Organization to update
   * @param {AnonApi.UpdateOrganization} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.updateOrganization("string", {
   *         name: "string",
   *         logoUrl: "string"
   *     })
   */
  public async updateOrganization(
    organizationId: AnonApi.OrganizationId,
    request: AnonApi.UpdateOrganization,
    requestOptions?: Organization.RequestOptions,
  ): Promise<boolean> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        `/org/organization/${encodeURIComponent(organizationId)}`,
      ),
      method: "PATCH",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as boolean;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling PATCH /org/organization/{organizationId}.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @param {AnonApi.CreateAppUserIdToken} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.createAppUser({
   *         appUserId: "string",
   *         exp: 1
   *     })
   */
  public async createAppUser(
    request: AnonApi.CreateAppUserIdToken,
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.CreateAppUserResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/org/user",
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.CreateAppUserResponse;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling POST /org/user.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Get the app user
   *
   * @param {AnonApi.GetAppUserRequest} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.appUser({
   *         id: "string",
   *         email: "string",
   *         phoneNumber: "string",
   *         externalUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  public async appUser(
    request: AnonApi.GetAppUserRequest = {},
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.AppUser> {
    const { id, email, phoneNumber, externalUserId, appUserPoolId } = request;
    const _queryParams: Record<string, string | string[] | object | object[]> =
      {};
    if (id != null) {
      _queryParams["id"] = id;
    }

    if (email != null) {
      _queryParams["email"] = email;
    }

    if (phoneNumber != null) {
      _queryParams["phoneNumber"] = phoneNumber;
    }

    if (externalUserId != null) {
      _queryParams["externalUserId"] = externalUserId;
    }

    if (appUserPoolId != null) {
      _queryParams["appUserPoolId"] = appUserPoolId;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/org/user",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.AppUser;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /org/user.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * List all end users in your organization
   *
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.listAppUsers()
   */
  public async listAppUsers(
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.AppUserList> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.AnonApiEnvironment.Sandbox,
        "/org/users",
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Anon-Sdk-Client-Id": await core.Supplier.get(
          this._options.anonSdkClientId,
        ),
        "X-Fern-Language": "JavaScript",
        "X-Fern-Runtime": core.RUNTIME.type,
        "X-Fern-Runtime-Version": core.RUNTIME.version,
        ...requestOptions?.headers,
      },
      contentType: "application/json",
      requestType: "json",
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return _response.body as AnonApi.AppUserList;
    }

    if (_response.error.reason === "status-code") {
      throw new errors.AnonApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.AnonApiTimeoutError(
          "Timeout exceeded when calling GET /org/users.",
        );
      case "unknown":
        throw new errors.AnonApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  protected async _getAuthorizationHeader(): Promise<string> {
    return `Bearer ${await core.Supplier.get(this._options.token)}`;
  }
}
