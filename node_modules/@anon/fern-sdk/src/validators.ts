import { z } from "zod";

export type LinkedinCreateConversationBody = z.infer<
  typeof LinkedinCreateConversationBody
>;
export const LinkedinCreateConversationBody = z.object({
  profileId: z.string(),
  appUserId: z.string(),
  message: z.string(),
  appUserPoolId: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type LinkedinSendMessageBody = z.infer<typeof LinkedinSendMessageBody>;
export const LinkedinSendMessageBody = z.object({
  message: z.string(),
  appUserId: z.string(),
  conversationId: z.string(),
  appUserPoolId: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type LinkedinSendMessageResponse = z.infer<
  typeof LinkedinSendMessageResponse
>;
export const LinkedinSendMessageResponse = z.object({
  success: z.boolean(),
});

export type ConversationType = z.infer<typeof ConversationType>;
export const ConversationType = z.union([
  z.literal("SINGLE"),
  z.literal("GROUP"),
]);

export type MutedUntil = z.infer<typeof MutedUntil>;
export const MutedUntil = z.union([z.number(), z.string()]);

export type ReadOnlyStatus = z.infer<typeof ReadOnlyStatus>;
export const ReadOnlyStatus = z.union([
  z.literal("0"),
  z.literal("1"),
  z.literal("2"),
]);

export type FolderType = z.infer<typeof FolderType>;
export const FolderType = z.union([
  z.literal("INBOX"),
  z.literal("INBOX_LINKEDIN_CLASSIC"),
  z.literal("INBOX_LINKEDIN_RECRUITER"),
  z.literal("INBOX_LINKEDIN_SALES_NAVIGATOR"),
  z.literal("INBOX_LINKEDIN_ORGANIZATION"),
]);

export type ContentType = z.infer<typeof ContentType>;
export const ContentType = z.union([
  z.literal("inmail"),
  z.literal("sponsored"),
  z.literal("linkedin_offer"),
]);

export type ChatProfile = z.infer<typeof ChatProfile>;
export const ChatProfile = z.object({
  id: z.string(),
  name: z.string(),
  profileUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  isSelf: z.boolean(),
});

export type LinkedinConversationListItem = z.infer<
  typeof LinkedinConversationListItem
>;
export const LinkedinConversationListItem = z.object({
  id: z.string(),
  type: ConversationType,
  profileId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  timestamp: z.union([z.string(), z.null(), z.undefined()]).optional(),
  unreadCount: z.number(),
  archived: z.boolean(),
  mutedUntil: z.union([MutedUntil, z.undefined()]).optional(),
  readOnly: ReadOnlyStatus,
  subject: z.union([z.string(), z.null(), z.undefined()]).optional(),
  folder: z.union([z.array(FolderType), z.null(), z.undefined()]).optional(),
  organizationId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  mailboxId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  contentType: z.union([ContentType, z.undefined()]).optional(),
  profiles: z.array(ChatProfile),
  seen: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  seenBy: z.union([z.unknown(), z.null(), z.undefined()]).optional(),
});

export type LinkedinListConversationsResponse = z.infer<
  typeof LinkedinListConversationsResponse
>;
export const LinkedinListConversationsResponse = z.object({
  conversations: z.array(LinkedinConversationListItem),
  count: z.number(),
});

export type LinkedinConnection = z.infer<typeof LinkedinConnection>;
export const LinkedinConnection = z.object({
  id: z.string(),
  name: z.string(),
  headline: z.union([z.string(), z.null(), z.undefined()]).optional(),
  profilePictureUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  publicIdentifier: z.string(),
  publicProfileUrl: z.string(),
  createdAt: z.union([z.number(), z.null(), z.undefined()]).optional(),
});

export type LinkedinListConnectionsResponse = z.infer<
  typeof LinkedinListConnectionsResponse
>;
export const LinkedinListConnectionsResponse = z.object({
  connections: z.array(LinkedinConnection),
  cursor: z.union([z.string(), z.null(), z.undefined()]).optional(),
  pageCount: z.number(),
  totalCount: z.union([z.number(), z.null(), z.undefined()]).optional(),
});

export type Message = z.infer<typeof Message>;
export const Message = z.object({
  id: z.string(),
  text: z.union([z.string(), z.null(), z.undefined()]).optional(),
  edited: z.boolean(),
  deleted: z.boolean(),
  delivered: z.boolean(),
  timestamp: z.string(),
  senderProfileId: z.string(),
  senderProfileName: z.string(),
});

export type LinkedinConversation = z.infer<typeof LinkedinConversation>;
export const LinkedinConversation = z.object({
  messages: z.array(Message),
  id: z.string(),
  type: ConversationType,
  profileId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  timestamp: z.union([z.string(), z.null(), z.undefined()]).optional(),
  unreadCount: z.number(),
  archived: z.boolean(),
  mutedUntil: z.union([MutedUntil, z.undefined()]).optional(),
  readOnly: ReadOnlyStatus,
  subject: z.union([z.string(), z.null(), z.undefined()]).optional(),
  folder: z.union([z.array(FolderType), z.null(), z.undefined()]).optional(),
  organizationId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  mailboxId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  contentType: z.union([ContentType, z.undefined()]).optional(),
  profiles: z.array(ChatProfile),
  seen: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  seenBy: z.union([z.unknown(), z.null(), z.undefined()]).optional(),
});

export type LinkedinGetConversationResponse = z.infer<
  typeof LinkedinGetConversationResponse
>;
export const LinkedinGetConversationResponse = z.object({
  conversation: LinkedinConversation,
});

export type LinkedinListMessagesResponse = z.infer<
  typeof LinkedinListMessagesResponse
>;
export const LinkedinListMessagesResponse = z.object({
  conversation: LinkedinConversation,
});

export type LinkedinCreateConversationResponse = z.infer<
  typeof LinkedinCreateConversationResponse
>;
export const LinkedinCreateConversationResponse = z.object({
  success: z.boolean(),
  conversationId: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type LinkedinProfile = z.infer<typeof LinkedinProfile>;
export const LinkedinProfile = z.object({
  id: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  headline: z.union([z.string(), z.null(), z.undefined()]).optional(),
  profilePictureUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  publicIdentifier: z.string(),
  publicProfileUrl: z.string(),
});

export type NetworkDistance = z.infer<typeof NetworkDistance>;
export const NetworkDistance = z.union([
  z.literal("DISTANCE_1"),
  z.literal("DISTANCE_2"),
  z.literal("DISTANCE_3"),
  z.literal("OUT_OF_NETWORK"),
]);

export type ProfileSearchResult = z.infer<typeof ProfileSearchResult>;
export const ProfileSearchResult = z.object({
  id: z.string(),
  name: z.string(),
  headline: z.union([z.string(), z.null(), z.undefined()]).optional(),
  profilePictureUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  publicIdentifier: z.string(),
  publicProfileUrl: z.string(),
  profileUrl: z.string(),
  networkDistance: NetworkDistance,
  location: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type NetworkDistanceNumber = z.infer<typeof NetworkDistanceNumber>;
export const NetworkDistanceNumber = z.union([
  z.literal("1"),
  z.literal("2"),
  z.literal("3"),
  z.literal("4"),
]);

export type LinkedinSearchProfilesResponse = z.infer<
  typeof LinkedinSearchProfilesResponse
>;
export const LinkedinSearchProfilesResponse = z.object({
  cursor: z.union([z.string(), z.null(), z.undefined()]).optional(),
  pageCount: z.number(),
  profiles: z.array(ProfileSearchResult),
  totalCount: z.number(),
});

export type Education = z.infer<typeof Education>;
export const Education = z.object({
  degree: z.union([z.string(), z.null(), z.undefined()]).optional(),
  school: z.string(),
  fieldOfStudy: z.union([z.string(), z.null(), z.undefined()]).optional(),
  start: z.union([z.string(), z.null(), z.undefined()]).optional(),
  end: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type Language = z.infer<typeof Language>;
export const Language = z.object({
  name: z.string(),
  proficiency: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type Skill = z.infer<typeof Skill>;
export const Skill = z.object({
  name: z.string(),
  endorsementCount: z.number(),
});

export type Certification = z.infer<typeof Certification>;
export const Certification = z.object({
  name: z.string(),
  organization: z.string(),
  url: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type Social = z.infer<typeof Social>;
export const Social = z.object({
  type: z.string(),
  name: z.string(),
});

export type ContactInfo = z.infer<typeof ContactInfo>;
export const ContactInfo = z.object({
  emails: z.union([z.array(z.string()), z.null()]).optional(),
  phones: z.union([z.array(z.string()), z.null()]).optional(),
  addresses: z.union([z.array(z.string()), z.null()]).optional(),
  socials: z.union([z.array(Social), z.null()]).optional(),
});

export type Birthdate = z.infer<typeof Birthdate>;
export const Birthdate = z.object({
  month: z.number(),
  day: z.number(),
});

export type PrimaryLocale = z.infer<typeof PrimaryLocale>;
export const PrimaryLocale = z.object({
  country: z.string(),
  language: z.string(),
});

export type WorkExperience = z.infer<typeof WorkExperience>;
export const WorkExperience = z.object({
  position: z.string(),
  companyId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  company: z.string(),
  location: z.union([z.string(), z.null(), z.undefined()]).optional(),
  description: z.union([z.string(), z.null(), z.undefined()]).optional(),
  current: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  status: z.union([z.string(), z.null(), z.undefined()]).optional(),
  start: z.union([z.string(), z.null(), z.undefined()]).optional(),
  end: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type VolunteeringExperience = z.infer<typeof VolunteeringExperience>;
export const VolunteeringExperience = z.object({
  company: z.string(),
  description: z.string(),
  role: z.string(),
  cause: z.string(),
  start: z.union([z.string(), z.null(), z.undefined()]).optional(),
  end: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type LinkedinGetProfileResponse = z.infer<
  typeof LinkedinGetProfileResponse
>;
export const LinkedinGetProfileResponse = z.object({
  id: z.string(),
  firstName: z.union([z.string(), z.null(), z.undefined()]).optional(),
  lastName: z.union([z.string(), z.null(), z.undefined()]).optional(),
  headline: z.string(),
  profilePictureUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  publicIdentifier: z.union([z.string(), z.null(), z.undefined()]).optional(),
  publicProfileUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  location: z.union([z.string(), z.null(), z.undefined()]).optional(),
  summary: z.union([z.string(), z.null(), z.undefined()]).optional(),
  education: z.union([z.array(Education), z.null(), z.undefined()]).optional(),
  languages: z.union([z.array(Language), z.null(), z.undefined()]).optional(),
  skills: z.union([z.array(Skill), z.null(), z.undefined()]).optional(),
  certifications: z
    .union([z.array(Certification), z.null(), z.undefined()])
    .optional(),
  networkDistance: z.union([NetworkDistance, z.undefined()]).optional(),
  contactInfo: z.union([ContactInfo, z.undefined()]).optional(),
  websites: z.array(z.string()),
  birthdate: z.union([Birthdate, z.undefined()]).optional(),
  primaryLocale: z.union([PrimaryLocale, z.undefined()]).optional(),
  backgroundPictureUrl: z
    .union([z.string(), z.null(), z.undefined()])
    .optional(),
  hashtags: z.union([z.array(z.string()), z.null(), z.undefined()]).optional(),
  workExperience: z
    .union([z.array(WorkExperience), z.null(), z.undefined()])
    .optional(),
  volunteeringExperience: z
    .union([z.array(VolunteeringExperience), z.null(), z.undefined()])
    .optional(),
  followerCount: z.union([z.number(), z.null(), z.undefined()]).optional(),
  connectionsCount: z.union([z.number(), z.null(), z.undefined()]).optional(),
  sharedConnectionsCount: z
    .union([z.number(), z.null(), z.undefined()])
    .optional(),
});

export type LinkedinSendConnectionRequestBody = z.infer<
  typeof LinkedinSendConnectionRequestBody
>;
export const LinkedinSendConnectionRequestBody = z.object({
  profileId: z.string(),
  appUserId: z.string(),
  message: z.union([z.string(), z.null(), z.undefined()]).optional(),
  appUserPoolId: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type LinkedinSendConnectionRequestResponse = z.infer<
  typeof LinkedinSendConnectionRequestResponse
>;
export const LinkedinSendConnectionRequestResponse = z.object({
  success: z.boolean(),
});

export type LinkedinSearchProfilesBody = z.infer<
  typeof LinkedinSearchProfilesBody
>;
export const LinkedinSearchProfilesBody = z.object({
  cursor: z.union([z.string(), z.null(), z.undefined()]).optional(),
  profileName: z.union([z.string(), z.null(), z.undefined()]).optional(),
  connectionsOf: z.union([z.string(), z.null(), z.undefined()]).optional(),
  appUserId: z.string(),
  networkDistance: z
    .union([z.array(NetworkDistanceNumber), z.null(), z.undefined()])
    .optional(),
  appUserPoolId: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type LinkStartEvent = z.infer<typeof LinkStartEvent>;
export const LinkStartEvent = z.object({
  app: z.string(),
  type: z.string(),
});

export type LinkCloseEvent = z.infer<typeof LinkCloseEvent>;
export const LinkCloseEvent = z.object({
  type: z.string(),
});

export type LinkSuccessEvent = z.infer<typeof LinkSuccessEvent>;
export const LinkSuccessEvent = z.object({
  type: z.string(),
});

export type LinkFailedErrorType = z.infer<typeof LinkFailedErrorType>;
export const LinkFailedErrorType = z.union([
  z.literal("SaveSessionError"),
  z.literal("HangingLoginPage"),
  z.literal("CompletionIndicatorTimeout"),
]);

export type LinkFailedEvent = z.infer<typeof LinkFailedEvent>;
export const LinkFailedEvent = z.object({
  type: z.string(),
  errorType: LinkFailedErrorType,
  error: z.string(),
});

export type LinkInitialChromeExtensionStatusEvent = z.infer<
  typeof LinkInitialChromeExtensionStatusEvent
>;
export const LinkInitialChromeExtensionStatusEvent = z.object({
  type: z.string(),
  chromeExtensionId: z.string(),
  isInitiallyInstalled: z.boolean(),
});

export type LinkOpenChromeExtensionPageEvent = z.infer<
  typeof LinkOpenChromeExtensionPageEvent
>;
export const LinkOpenChromeExtensionPageEvent = z.object({
  type: z.string(),
  chromeExtensionId: z.string(),
});

export type LinkInstalledChromeExtensionEvent = z.infer<
  typeof LinkInstalledChromeExtensionEvent
>;
export const LinkInstalledChromeExtensionEvent = z.object({
  type: z.string(),
  chromeExtensionId: z.string(),
});

export type LinkOpenAppAuthPageEvent = z.infer<typeof LinkOpenAppAuthPageEvent>;
export const LinkOpenAppAuthPageEvent = z.object({
  type: z.string(),
  app: z.string(),
  authUrl: z.string(),
});

export type LinkEventPayload = z.infer<typeof LinkEventPayload>;
export const LinkEventPayload = z.union([
  LinkStartEvent,
  LinkCloseEvent,
  LinkSuccessEvent,
  LinkFailedEvent,
  LinkInitialChromeExtensionStatusEvent,
  LinkOpenChromeExtensionPageEvent,
  LinkInstalledChromeExtensionEvent,
  LinkOpenAppAuthPageEvent,
]);

export type RuntimeStartEvent = z.infer<typeof RuntimeStartEvent>;
export const RuntimeStartEvent = z.object({
  type: z.string(),
  sdkVersion: z.union([z.string(), z.null(), z.undefined()]).optional(),
  apps: z.array(z.string()),
});

export type RuntimeInjectSessionEvent = z.infer<
  typeof RuntimeInjectSessionEvent
>;
export const RuntimeInjectSessionEvent = z.object({
  type: z.string(),
  anonUserId: z.string(),
  apps: z.array(z.string()),
});

export type RuntimeErrorType = z.infer<typeof RuntimeErrorType>;
export const RuntimeErrorType = z.union([
  z.literal("injectSessionError"),
  z.literal("proxyConnectionError"),
]);

export type RuntimeSetupFailureEvent = z.infer<typeof RuntimeSetupFailureEvent>;
export const RuntimeSetupFailureEvent = z.object({
  type: z.string(),
  error: z.string(),
  errorType: RuntimeErrorType,
});

export type RuntimeExecutionStartEvent = z.infer<
  typeof RuntimeExecutionStartEvent
>;
export const RuntimeExecutionStartEvent = z.object({
  type: z.string(),
});

export type RuntimeExecutionSuccessEvent = z.infer<
  typeof RuntimeExecutionSuccessEvent
>;
export const RuntimeExecutionSuccessEvent = z.object({
  type: z.string(),
});

export type RuntimeExecutionErrorEvent = z.infer<
  typeof RuntimeExecutionErrorEvent
>;
export const RuntimeExecutionErrorEvent = z.object({
  type: z.string(),
  error: z.string(),
  errorStack: z.string(),
});

export type RuntimeCreateBrowserEnvironmentErrorEvent = z.infer<
  typeof RuntimeCreateBrowserEnvironmentErrorEvent
>;
export const RuntimeCreateBrowserEnvironmentErrorEvent = z.object({
  type: z.string(),
  error: z.string(),
  errorStack: z.string(),
});

export type RuntimeRemoteConnectionErrorEvent = z.infer<
  typeof RuntimeRemoteConnectionErrorEvent
>;
export const RuntimeRemoteConnectionErrorEvent = z.object({
  type: z.string(),
  error: z.string(),
  errorStack: z.string(),
});

export type RuntimeCreateBrowserSessionEvent = z.infer<
  typeof RuntimeCreateBrowserSessionEvent
>;
export const RuntimeCreateBrowserSessionEvent = z.object({
  type: z.string(),
  service: z.string(),
  sessionId: z.string(),
  cdpUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  liveStreamingUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type RuntimeAddedAnonProxyEvent = z.infer<
  typeof RuntimeAddedAnonProxyEvent
>;
export const RuntimeAddedAnonProxyEvent = z.object({
  type: z.string(),
});

export type RuntimePageVisitEvent = z.infer<typeof RuntimePageVisitEvent>;
export const RuntimePageVisitEvent = z.object({
  type: z.string(),
  url: z.string(),
  base64ImageUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  isOnAuthenticatedPage: z.boolean(),
  isLoggedIn: z.boolean(),
});

export type RuntimeEventPayload = z.infer<typeof RuntimeEventPayload>;
export const RuntimeEventPayload = z.union([
  RuntimeStartEvent,
  RuntimeInjectSessionEvent,
  RuntimeSetupFailureEvent,
  RuntimeExecutionStartEvent,
  RuntimeExecutionSuccessEvent,
  RuntimeExecutionErrorEvent,
  RuntimeCreateBrowserEnvironmentErrorEvent,
  RuntimeRemoteConnectionErrorEvent,
  RuntimeCreateBrowserSessionEvent,
  RuntimeAddedAnonProxyEvent,
  RuntimePageVisitEvent,
]);

export type BrowserType = z.infer<typeof BrowserType>;
export const BrowserType = z.union([
  z.literal("local"),
  z.literal("managed"),
  z.literal("remote"),
]);

export type ActivityType = z.infer<typeof ActivityType>;
export const ActivityType = z.union([z.literal("Link"), z.literal("runtime")]);

export type CreateLinkEvent = z.infer<typeof CreateLinkEvent>;
export const CreateLinkEvent = z.object({
  activityType: z.string(),
  datetime: z.number(),
  groupId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  data: LinkEventPayload,
  userId: z.string(),
});

export type LinkEvent = z.infer<typeof LinkEvent>;
export const LinkEvent = z.object({
  activityType: z.string(),
  id: z.string(),
  groupId: z.string(),
  datetime: z.number(),
  organizationId: z.string(),
  organizationName: z.string(),
  sdkClientId: z.string(),
  sdkClientName: z.string(),
  anonAppUserId: z.string(),
  data: LinkEventPayload,
  anonUserId: z.string(),
  userId: z.string(),
});

export type CreateRuntimeEvent = z.infer<typeof CreateRuntimeEvent>;
export const CreateRuntimeEvent = z.object({
  activityType: z.string(),
  browserType: BrowserType,
  datetime: z.number(),
  groupId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  data: RuntimeEventPayload,
  userId: z.string(),
});

export type RuntimeEvent = z.infer<typeof RuntimeEvent>;
export const RuntimeEvent = z.object({
  activityType: z.string(),
  browserType: BrowserType,
  id: z.string(),
  groupId: z.string(),
  datetime: z.number(),
  organizationId: z.string(),
  organizationName: z.string(),
  sdkClientId: z.string(),
  sdkClientName: z.string(),
  anonAppUserId: z.string(),
  data: RuntimeEventPayload,
  anonUserId: z.string(),
  userId: z.string(),
});

export type Event = z.infer<typeof Event>;
export const Event = z.union([LinkEvent, RuntimeEvent]);

export type CreateEventRequestBody = z.infer<typeof CreateEventRequestBody>;
export const CreateEventRequestBody = z.union([
  CreateLinkEvent,
  CreateRuntimeEvent,
]);

export type ActivityEventList = z.infer<typeof ActivityEventList>;
export const ActivityEventList = z.object({
  events: z.array(Event),
});

export type CreateEventResponseSuccess = z.infer<
  typeof CreateEventResponseSuccess
>;
export const CreateEventResponseSuccess = z.object({
  type: z.string(),
  groupId: z.string(),
  id: z.string(),
  activityType: ActivityType,
});

export type CreateEventResponseFailure = z.infer<
  typeof CreateEventResponseFailure
>;
export const CreateEventResponseFailure = z.object({
  type: z.string(),
  error: z.string(),
});

export type CreateEventResponse = z.infer<typeof CreateEventResponse>;
export const CreateEventResponse = z.union([
  CreateEventResponseSuccess,
  CreateEventResponseFailure,
]);

export type ListAppIntegrationsResponseItem = z.infer<
  typeof ListAppIntegrationsResponseItem
>;
export const ListAppIntegrationsResponseItem = z.object({
  id: z.string(),
  name: z.string(),
  iconUrl: z.string(),
  experimental: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  domains: z.array(z.string()),
});

export type ListAppIntegrationsResponse = z.infer<
  typeof ListAppIntegrationsResponse
>;
export const ListAppIntegrationsResponse = z.object({
  apps: z.array(ListAppIntegrationsResponseItem),
});

export type UserPoolId = z.infer<typeof UserPoolId>;
export const UserPoolId = z.string();

export type CreateAppUserIdTokenWithUserPool = z.infer<
  typeof CreateAppUserIdTokenWithUserPool
>;
export const CreateAppUserIdTokenWithUserPool = z.object({
  userPoolId: UserPoolId,
  appUserId: z.string(),
  exp: z.union([z.number(), z.null(), z.undefined()]).optional(),
});

export type SdkClientId = z.infer<typeof SdkClientId>;
export const SdkClientId = z.string();

export type CreateAppUserIdTokenWithSdkClient = z.infer<
  typeof CreateAppUserIdTokenWithSdkClient
>;
export const CreateAppUserIdTokenWithSdkClient = z.object({
  sdkClientId: SdkClientId,
  appUserId: z.string(),
  exp: z.union([z.number(), z.null(), z.undefined()]).optional(),
});

export type CreateAppUserIdTokenWithDefault = z.infer<
  typeof CreateAppUserIdTokenWithDefault
>;
export const CreateAppUserIdTokenWithDefault = z.object({
  appUserId: z.string(),
  exp: z.union([z.number(), z.null(), z.undefined()]).optional(),
});

export type CreateAppUserIdToken = z.infer<typeof CreateAppUserIdToken>;
export const CreateAppUserIdToken = z.union([
  CreateAppUserIdTokenWithDefault,
  CreateAppUserIdTokenWithSdkClient,
  CreateAppUserIdTokenWithUserPool,
]);

export type AppUserIdToken = z.infer<typeof AppUserIdToken>;
export const AppUserIdToken = z.object({
  appUserIdToken: z.string(),
});

export type MissingFieldErrorType = z.infer<typeof MissingFieldErrorType>;
export const MissingFieldErrorType = z.object({
  field: z.string(),
});

export type CreateLinkUrlResponse = z.infer<typeof CreateLinkUrlResponse>;
export const CreateLinkUrlResponse = z.object({
  url: z.string(),
});

export type LinkApp = z.infer<typeof LinkApp>;
export const LinkApp = z.union([z.literal("rippling"), z.literal("gusto")]);

export type BrowserProvider = z.infer<typeof BrowserProvider>;
export const BrowserProvider = z.union([
  z.literal("browserbase"),
  z.literal("rebrowser"),
  z.literal("undetect"),
]);

export type InitiateLinkRequest = z.infer<typeof InitiateLinkRequest>;
export const InitiateLinkRequest = z.object({
  app: LinkApp,
  appUserId: z.string(),
  provider: z.union([BrowserProvider, z.undefined()]).optional(),
});

export type LinkResponseSuccess = z.infer<typeof LinkResponseSuccess>;
export const LinkResponseSuccess = z.object({});

export type LinkResponseFailure = z.infer<typeof LinkResponseFailure>;
export const LinkResponseFailure = z.object({});

export type EmailSchema = z.infer<typeof EmailSchema>;
export const EmailSchema = z.object({
  description: z.string(),
});

export type PasswordSchema = z.infer<typeof PasswordSchema>;
export const PasswordSchema = z.object({
  description: z.string(),
  sensitive: z.boolean(),
});

export type MfaSchema = z.infer<typeof MfaSchema>;
export const MfaSchema = z.object({
  description: z.string(),
});

export type LinkResponseSchema = z.infer<typeof LinkResponseSchema>;
export const LinkResponseSchema = z.union([
  z.intersection(
    z.object({
      label: z.literal("email").optional(),
    }),
    EmailSchema,
  ),
  z.intersection(
    z.object({
      label: z.literal("password").optional(),
    }),
    PasswordSchema,
  ),
  z.intersection(
    z.object({
      label: z.literal("mfa").optional(),
    }),
    MfaSchema,
  ),
]);

export type HttpMethod = z.infer<typeof HttpMethod>;
export const HttpMethod = z.union([
  z.literal("GET"),
  z.literal("POST"),
  z.literal("PUT"),
  z.literal("DELETE"),
  z.literal("PATCH"),
]);

export type LinkResponseInProgress = z.infer<typeof LinkResponseInProgress>;
export const LinkResponseInProgress = z.object({
  schema: z.array(LinkResponseSchema),
  url: z.string(),
  method: HttpMethod,
  linkId: z.string(),
});

export type LinkResponse = z.infer<typeof LinkResponse>;
export const LinkResponse = z.union([
  z.intersection(
    z.object({
      status: z.literal("SUCCESS").optional(),
    }),
    LinkResponseSuccess,
  ),
  z.intersection(
    z.object({
      status: z.literal("FAILURE").optional(),
    }),
    LinkResponseFailure,
  ),
  z.intersection(
    z.object({
      status: z.literal("IN_PROGRESS").optional(),
    }),
    LinkResponseInProgress,
  ),
]);

export type ContinueLinkRequestEmailPassword = z.infer<
  typeof ContinueLinkRequestEmailPassword
>;
export const ContinueLinkRequestEmailPassword = z.object({
  email: z.string(),
  password: z.string(),
});

export type ContinueLinkRequestMfa = z.infer<typeof ContinueLinkRequestMfa>;
export const ContinueLinkRequestMfa = z.object({
  mfa: z.string(),
});

export type ContinueLinkRequest = z.infer<typeof ContinueLinkRequest>;
export const ContinueLinkRequest = z.union([
  ContinueLinkRequestEmailPassword,
  ContinueLinkRequestMfa,
]);

export type MemberRole = z.infer<typeof MemberRole>;
export const MemberRole = z.union([z.string(), z.string(), z.string()]);

export type CreateMember = z.infer<typeof CreateMember>;
export const CreateMember = z.object({
  name: z.string(),
  email: z.string(),
  password: z.string(),
  role: MemberRole,
});

export type MemberId = z.infer<typeof MemberId>;
export const MemberId = z.string();

export type OrganizationId = z.infer<typeof OrganizationId>;
export const OrganizationId = z.string();

export type Member = z.infer<typeof Member>;
export const Member = z.object({
  id: MemberId,
  name: z.string(),
  email: z.string(),
  organizationId: OrganizationId,
  role: MemberRole,
});

export type LoginMember = z.infer<typeof LoginMember>;
export const LoginMember = z.object({
  email: z.string(),
  password: z.string(),
});

export type LoginSession = z.infer<typeof LoginSession>;
export const LoginSession = z.object({
  token: z.string(),
});

export type MemberListItem = z.infer<typeof MemberListItem>;
export const MemberListItem = z.object({
  id: MemberId,
  name: z.string(),
  email: z.string(),
  role: MemberRole,
  createdAt: z.string(),
});

export type MemberList = z.infer<typeof MemberList>;
export const MemberList = z.object({
  resource: z.string(),
  items: z.array(MemberListItem),
});

export type CreateOrganizationMember = z.infer<typeof CreateOrganizationMember>;
export const CreateOrganizationMember = z.object({
  name: z.string(),
  email: z.string(),
  password: z.string(),
});

export type CreateOrganization = z.infer<typeof CreateOrganization>;
export const CreateOrganization = z.object({
  name: z.string(),
  member: CreateOrganizationMember,
});

export type Organization = z.infer<typeof Organization>;
export const Organization = z.object({
  id: OrganizationId,
  name: z.string(),
  logoUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  members: z.array(Member),
  apiKey: z.union([z.string(), z.null(), z.undefined()]).optional(),
  sdkAccessToken: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type AppUserListItem = z.infer<typeof AppUserListItem>;
export const AppUserListItem = z.object({
  id: z.string(),
  email: z.union([z.string(), z.null(), z.undefined()]).optional(),
  phoneNumber: z.union([z.string(), z.null(), z.undefined()]).optional(),
  appUserPoolId: z.string(),
  createdAt: z.string(),
});

export type AppUserList = z.infer<typeof AppUserList>;
export const AppUserList = z.object({
  appUsers: z.array(AppUserListItem),
});

export type AppUser = z.infer<typeof AppUser>;
export const AppUser = z.object({
  id: z.string(),
  email: z.union([z.string(), z.null(), z.undefined()]).optional(),
  phoneNumber: z.union([z.string(), z.null(), z.undefined()]).optional(),
  externalUserId: z.string(),
  createdAt: z.string(),
});

export type UpdateOrganization = z.infer<typeof UpdateOrganization>;
export const UpdateOrganization = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  logoUrl: z.union([z.string(), z.null()]).optional(),
});

export type DeleteOrganizationResponse = z.infer<
  typeof DeleteOrganizationResponse
>;
export const DeleteOrganizationResponse = z.boolean();

export type CreateAppUserResponse = z.infer<typeof CreateAppUserResponse>;
export const CreateAppUserResponse = z.object({
  success: z.boolean(),
});

export type Integration = z.infer<typeof Integration>;
export const Integration = z.union([
  z.literal("amazon"),
  z.literal("delta"),
  z.literal("doordash"),
  z.literal("facebook"),
  z.literal("github"),
  z.literal("instacart"),
  z.literal("instagram"),
  z.literal("linkedin"),
  z.literal("opentable"),
  z.literal("twitter"),
  z.literal("resy"),
  z.literal("uber"),
  z.literal("united_airlines"),
  z.literal("nextdoor"),
  z.literal("example"),
]);

export type App = z.infer<typeof App>;
export const App = z.union([z.string(), Integration]);

export type Apps = z.infer<typeof Apps>;
export const Apps = z.union([z.array(App), z.string()]);

export type CreateCdpUrlResponse = z.infer<typeof CreateCdpUrlResponse>;
export const CreateCdpUrlResponse = z.object({
  cdpUrl: z.string(),
  liveStreamingUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type ProxyConfig = z.infer<typeof ProxyConfig>;
export const ProxyConfig = z.object({
  server: z.string(),
  username: z.string(),
  password: z.string(),
});

export type ProxyType = z.infer<typeof ProxyType>;
export const ProxyType = z.union([z.boolean(), ProxyConfig]);

export type CreateCdpUrlRequest = z.infer<typeof CreateCdpUrlRequest>;
export const CreateCdpUrlRequest = z.object({
  apps: Apps,
  appUserId: z.string(),
  activityGroupId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  proxy: z.union([ProxyType, z.undefined()]).optional(),
  cdpUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  sessionDuration: z.union([z.number(), z.null(), z.undefined()]).optional(),
  keepAlive: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  provider: z.union([BrowserProvider, z.undefined()]).optional(),
});

export type AnonEnvironment = z.infer<typeof AnonEnvironment>;
export const AnonEnvironment = z.union([
  z.literal("local"),
  z.literal("development"),
  z.literal("staging"),
  z.literal("sandbox"),
  z.literal("prod"),
]);

export type LocalBrowserConfigProxy = z.infer<typeof LocalBrowserConfigProxy>;
export const LocalBrowserConfigProxy = z.object({
  isAnonProxyEnabled: z.boolean(),
});

export type LocalBrowserConfig = z.infer<typeof LocalBrowserConfig>;
export const LocalBrowserConfig = z.object({
  browserType: z.string(),
  isHeadless: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  proxy: z.union([LocalBrowserConfigProxy, z.undefined()]).optional(),
});

export type BrowserbaseSession = z.infer<typeof BrowserbaseSession>;
export const BrowserbaseSession = z.object({
  sessionId: z.string(),
  sessionUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type ManagedBrowserConfigProxy = z.infer<
  typeof ManagedBrowserConfigProxy
>;
export const ManagedBrowserConfigProxy = z.object({
  isAnonProxyEnabled: z.boolean(),
});

export type ManagedBrowserConfig = z.infer<typeof ManagedBrowserConfig>;
export const ManagedBrowserConfig = z.object({
  browserType: z.string(),
  proxy: z.union([ManagedBrowserConfigProxy, z.undefined()]).optional(),
  browserbase: z.union([BrowserbaseSession, z.undefined()]).optional(),
});

export type RemoteBrowserConfig = z.infer<typeof RemoteBrowserConfig>;
export const RemoteBrowserConfig = z.object({
  browserType: z.string(),
});

export type InferredRuntimeBrowserConfigProxy = z.infer<
  typeof InferredRuntimeBrowserConfigProxy
>;
export const InferredRuntimeBrowserConfigProxy = z.object({
  ip: z.string(),
  username: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type InferredRuntimeBrowserConfig = z.infer<
  typeof InferredRuntimeBrowserConfig
>;
export const InferredRuntimeBrowserConfig = z.object({
  browserType: z.string(),
  proxy: z.union([InferredRuntimeBrowserConfigProxy, z.undefined()]).optional(),
  connectionUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type RuntimeResultType = z.infer<typeof RuntimeResultType>;
export const RuntimeResultType = z.union([
  z.literal("success"),
  z.literal("error"),
]);

export type BaseRuntimeResult = z.infer<typeof BaseRuntimeResult>;
export const BaseRuntimeResult = z.object({
  type: RuntimeResultType,
  startSdkTime: z.number(),
});

export type SuccessRuntimeResult = z.infer<typeof SuccessRuntimeResult>;
export const SuccessRuntimeResult = z.object({
  type: z.string(),
  startSdkTime: z.number(),
  startRuntimeExecutionTime: z.number(),
  endRuntimeExecutionTime: z.number(),
});

export type FailedToInject = z.infer<typeof FailedToInject>;
export const FailedToInject = z.object({
  type: z.string(),
  startSdkTime: z.number(),
  classification: z.string(),
  error: z.string(),
});

export type RuntimePlaywrightError = z.infer<typeof RuntimePlaywrightError>;
export const RuntimePlaywrightError = z.object({
  type: z.string(),
  startSdkTime: z.number(),
  classification: z.string(),
  error: z.string(),
  startRuntimeExecutionTime: z.number(),
  endRuntimeExecutionTime: z.number(),
});

export type OtherError = z.infer<typeof OtherError>;
export const OtherError = z.object({
  type: z.string(),
  startSdkTime: z.number(),
  classification: z.string(),
  error: z.string(),
  startRuntimeExecutionTime: z
    .union([z.number(), z.null(), z.undefined()])
    .optional(),
  endRuntimeExecutionTime: z
    .union([z.number(), z.null(), z.undefined()])
    .optional(),
});

export type RuntimeResult = z.infer<typeof RuntimeResult>;
export const RuntimeResult = z.union([
  SuccessRuntimeResult,
  FailedToInject,
  RuntimePlaywrightError,
  OtherError,
]);

export type UserMetadata = z.infer<typeof UserMetadata>;
export const UserMetadata = z.object({
  anonSessionId: z.string(),
  anonUserId: z.string(),
  externalUserId: z.string(),
  orgId: z.string(),
  orgName: z.string(),
  sdkClientId: z.string(),
  sdkClientName: z.string(),
  sessionCollectionTime: z
    .union([z.string(), z.null(), z.undefined()])
    .optional(),
});

export type BrowserConfig = z.infer<typeof BrowserConfig>;
export const BrowserConfig = z.union([
  ManagedBrowserConfig,
  LocalBrowserConfig,
  RemoteBrowserConfig,
]);

export type CreateUserMetadata = z.infer<typeof CreateUserMetadata>;
export const CreateUserMetadata = z.object({
  anonSessionId: z.string(),
  externalUserId: z.string(),
});

export type RuntimeLog = z.infer<typeof RuntimeLog>;
export const RuntimeLog = z.object({
  environment: AnonEnvironment,
  userMetadata: UserMetadata,
  browserConfig: BrowserConfig,
  app: z.string(),
  runtimeResult: RuntimeResult,
});

export type BrowserConfigCreateRequest = z.infer<
  typeof BrowserConfigCreateRequest
>;
export const BrowserConfigCreateRequest = z.union([
  ManagedBrowserConfig,
  LocalBrowserConfig,
  RemoteBrowserConfig,
  InferredRuntimeBrowserConfig,
]);

export type RuntimeLogCreateRequest = z.infer<typeof RuntimeLogCreateRequest>;
export const RuntimeLogCreateRequest = z.object({
  environment: AnonEnvironment,
  userMetadata: CreateUserMetadata,
  browserConfig: BrowserConfigCreateRequest,
  app: z.string(),
  runtimeResult: RuntimeResult,
});

export type RecordLogResponse = z.infer<typeof RecordLogResponse>;
export const RecordLogResponse = z.object({
  message: z.string(),
  recordedAt: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type SdkClientOauthConfig = z.infer<typeof SdkClientOauthConfig>;
export const SdkClientOauthConfig = z.object({
  logoUrl: z.string(),
  chromeExtensionId: z.string(),
  redirectUrls: z.array(z.string()),
});

export type SdkClientKindApplicationApplication = z.infer<
  typeof SdkClientKindApplicationApplication
>;
export const SdkClientKindApplicationApplication = z.object({
  userPoolId: z.union([z.string(), z.null()]).optional(),
  oauthConfig: SdkClientOauthConfig.optional(),
});

export type SdkClientKindApplication = z.infer<typeof SdkClientKindApplication>;
export const SdkClientKindApplication = z.object({
  application: SdkClientKindApplicationApplication,
});

export type SdkClientKind = z.infer<typeof SdkClientKind>;
export const SdkClientKind = z.union([z.string(), SdkClientKindApplication]);

export type SdkAuthUserPool = z.infer<typeof SdkAuthUserPool>;
export const SdkAuthUserPool = z.object({
  type: z.string(),
  userPoolId: z.string(),
  oauthConfig: z.union([SdkClientOauthConfig, z.undefined()]).optional(),
});

export type SdkAuthApiKey = z.infer<typeof SdkAuthApiKey>;
export const SdkAuthApiKey = z.object({
  type: z.string(),
});

export type SdkAuthNewApiKey = z.infer<typeof SdkAuthNewApiKey>;
export const SdkAuthNewApiKey = z.object({
  type: z.string(),
  secret: z.string(),
});

export type SdkAuth = z.infer<typeof SdkAuth>;
export const SdkAuth = z.union([SdkAuthUserPool, SdkAuthApiKey]);

export type CreatedSdkAuth = z.infer<typeof CreatedSdkAuth>;
export const CreatedSdkAuth = z.union([SdkAuthUserPool, SdkAuthNewApiKey]);

export type SdkClient = z.infer<typeof SdkClient>;
export const SdkClient = z.object({
  id: SdkClientId,
  name: z.string(),
  description: z.string(),
  auth: SdkAuth,
  organizationId: OrganizationId,
});

export type CreatedSdkClient = z.infer<typeof CreatedSdkClient>;
export const CreatedSdkClient = z.object({
  id: SdkClientId,
  name: z.string(),
  description: z.string(),
  auth: CreatedSdkAuth,
  organizationId: OrganizationId,
});

export type SdkClientAuthorization = z.infer<typeof SdkClientAuthorization>;
export const SdkClientAuthorization = z.object({
  jwksUri: z.string(),
  idClaim: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type CreateSdkClient = z.infer<typeof CreateSdkClient>;
export const CreateSdkClient = z.object({
  name: z.string(),
  kind: z.union([SdkClientKind, z.undefined()]).optional(),
  description: z.string(),
  oauthDisabled: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  authorization: z.union([SdkClientAuthorization, z.undefined()]).optional(),
  organizationId: z.union([OrganizationId, z.undefined()]).optional(),
});

export type SdkClientListItem = z.infer<typeof SdkClientListItem>;
export const SdkClientListItem = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  appUserPoolId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  createdAt: z.string(),
  logoUrl: z.union([z.string(), z.null(), z.undefined()]).optional(),
  chromeExtensionId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  redirectUrls: z
    .union([z.array(z.string()), z.null(), z.undefined()])
    .optional(),
});

export type SdkClientList = z.infer<typeof SdkClientList>;
export const SdkClientList = z.object({
  resource: z.string(),
  items: z.array(SdkClientListItem),
});

export type UpdateOauthConfig = z.infer<typeof UpdateOauthConfig>;
export const UpdateOauthConfig = z.object({
  logoUrl: z.union([z.string(), z.null()]).optional(),
  chromeExtensionId: z.union([z.string(), z.null()]).optional(),
  redirectUrls: z.union([z.array(z.string()), z.null()]).optional(),
});

export type UpdateSdkClient = z.infer<typeof UpdateSdkClient>;
export const UpdateSdkClient = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  description: z.union([z.string(), z.null()]).optional(),
  oauthConfig: UpdateOauthConfig.optional(),
});

export type AuthenticatorResponse = z.infer<typeof AuthenticatorResponse>;
export const AuthenticatorResponse = z.object({
  authenticatorId: z.string(),
});

export type GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage =
  z.infer<
    typeof GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage
  >;
export const GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage =
  z.union([z.literal("local"), z.literal("session"), z.literal("cookie")]);

export type GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem =
  z.infer<
    typeof GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem
  >;
export const GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem =
  z.object({
    storage:
      GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage,
    key: z.string(),
    domains: z.union([z.array(z.string()), z.null(), z.undefined()]).optional(),
  });

export type GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem =
  z.infer<
    typeof GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem
  >;
export const GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem =
  z.object({
    domain: z.string(),
  });

export type GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem =
  z.infer<
    typeof GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem
  >;
export const GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem =
  z.object({
    selector: z.string(),
    exists: z.boolean(),
  });

export type GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule =
  z.infer<
    typeof GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule
  >;
export const GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule =
  z.union([z.literal("ALL"), z.literal("ANY")]);

export type GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem =
  z.infer<
    typeof GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem
  >;
export const GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem =
  z.object({
    url: z.string(),
    criteria: z.array(
      GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem,
    ),
    matchRule:
      GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule,
  });

export type GetAccountApiV1AppIntegrationResponseAppAppSessionValidation =
  z.infer<typeof GetAccountApiV1AppIntegrationResponseAppAppSessionValidation>;
export const GetAccountApiV1AppIntegrationResponseAppAppSessionValidation =
  z.object({
    sessionValidityChecks: z.array(
      GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem,
    ),
  });

export type GetAccountApiV1AppIntegrationResponseAppApp = z.infer<
  typeof GetAccountApiV1AppIntegrationResponseAppApp
>;
export const GetAccountApiV1AppIntegrationResponseAppApp = z.object({
  authUrl: z.string(),
  displayName: z.string(),
  iconUrl: z.string(),
  domCompletionIndicator: z
    .union([z.string(), z.null(), z.undefined()])
    .optional(),
  completionIndicators: z.array(
    GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem,
  ),
  sessionExtractionDomains: z.array(
    GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem,
  ),
  sessionValidation:
    GetAccountApiV1AppIntegrationResponseAppAppSessionValidation,
});

export type GetAccountApiV1AppIntegrationResponseApp = z.infer<
  typeof GetAccountApiV1AppIntegrationResponseApp
>;
export const GetAccountApiV1AppIntegrationResponseApp = z.object({
  app: GetAccountApiV1AppIntegrationResponseAppApp,
});

export type GetAccountApiV1AppIntegrationResponseMessage = z.infer<
  typeof GetAccountApiV1AppIntegrationResponseMessage
>;
export const GetAccountApiV1AppIntegrationResponseMessage = z.object({
  message: z.string(),
});

export type GetAccountApiV1AppIntegrationResponse = z.infer<
  typeof GetAccountApiV1AppIntegrationResponse
>;
export const GetAccountApiV1AppIntegrationResponse = z.union([
  GetAccountApiV1AppIntegrationResponseApp,
  GetAccountApiV1AppIntegrationResponseMessage,
]);

export type PostAccountApiV1BrowserEnvironmentRequestProxy = z.infer<
  typeof PostAccountApiV1BrowserEnvironmentRequestProxy
>;
export const PostAccountApiV1BrowserEnvironmentRequestProxy = z.object({
  server: z.string(),
  bypass: z.union([z.string(), z.null(), z.undefined()]).optional(),
  username: z.union([z.string(), z.null(), z.undefined()]).optional(),
  password: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type PostAccountApiV1BrowserEnvironmentRequest = z.infer<
  typeof PostAccountApiV1BrowserEnvironmentRequest
>;
export const PostAccountApiV1BrowserEnvironmentRequest = z.object({
  proxy: PostAccountApiV1BrowserEnvironmentRequestProxy.optional(),
  isLiveStreamingSession: z.union([z.boolean(), z.null()]).optional(),
});

export type PostAccountApiV1BrowserEnvironmentResponseMessage = z.infer<
  typeof PostAccountApiV1BrowserEnvironmentResponseMessage
>;
export const PostAccountApiV1BrowserEnvironmentResponseMessage = z.object({
  message: z.string(),
});

export type PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment =
  z.infer<
    typeof PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment
  >;
export const PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment =
  z.object({
    connectUrl: z.string(),
    liveStreamingSession: z
      .union([z.string(), z.null(), z.undefined()])
      .optional(),
  });

export type PostAccountApiV1BrowserEnvironmentResponseEnvironment = z.infer<
  typeof PostAccountApiV1BrowserEnvironmentResponseEnvironment
>;
export const PostAccountApiV1BrowserEnvironmentResponseEnvironment = z.object({
  id: z.string(),
  ownerId: z.string(),
  environment: PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment,
});

export type PostAccountApiV1BrowserEnvironmentResponse = z.infer<
  typeof PostAccountApiV1BrowserEnvironmentResponse
>;
export const PostAccountApiV1BrowserEnvironmentResponse = z.union([
  PostAccountApiV1BrowserEnvironmentResponseMessage,
  PostAccountApiV1BrowserEnvironmentResponseEnvironment,
]);

export type GetAccountApiV1SessionResponseMessage = z.infer<
  typeof GetAccountApiV1SessionResponseMessage
>;
export const GetAccountApiV1SessionResponseMessage = z.object({
  message: z.string(),
});

export type GetAccountApiV1SessionResponseAppUserIdSessionStatus = z.infer<
  typeof GetAccountApiV1SessionResponseAppUserIdSessionStatus
>;
export const GetAccountApiV1SessionResponseAppUserIdSessionStatus = z.union([
  z.literal("active"),
  z.literal("revoked"),
  z.literal("unknown"),
]);

export type GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite =
  z.infer<
    typeof GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite
  >;
export const GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite =
  z.union([z.literal("Lax"), z.literal("Strict"), z.literal("None")]);

export type GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem = z.infer<
  typeof GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem
>;
export const GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem =
  z.object({
    name: z.string(),
    value: z.string(),
    domain: z.string(),
    path: z.string(),
    expires: z.union([z.number(), z.null(), z.undefined()]).optional(),
    secure: z.boolean(),
    httpOnly: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
    sameSite: z
      .union([
        GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite,
        z.undefined(),
      ])
      .optional(),
  });

export type GetAccountApiV1SessionResponseAppUserIdSession = z.infer<
  typeof GetAccountApiV1SessionResponseAppUserIdSession
>;
export const GetAccountApiV1SessionResponseAppUserIdSession = z.object({
  id: z.union([z.string(), z.null(), z.undefined()]).optional(),
  status: z
    .union([
      GetAccountApiV1SessionResponseAppUserIdSessionStatus,
      z.undefined(),
    ])
    .optional(),
  cookies: z.array(GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem),
  localStorage: z.array(z.array(z.unknown())),
  sessionStorage: z.array(z.array(z.unknown())),
  proxyId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  url: z.string(),
  metadata: z.union([z.unknown(), z.null(), z.undefined()]).optional(),
});

export type GetAccountApiV1SessionResponseAppUserId = z.infer<
  typeof GetAccountApiV1SessionResponseAppUserId
>;
export const GetAccountApiV1SessionResponseAppUserId = z.object({
  ownerId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  appUserId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  domain: z.string(),
  session: GetAccountApiV1SessionResponseAppUserIdSession,
});

export type GetAccountApiV1SessionResponse = z.infer<
  typeof GetAccountApiV1SessionResponse
>;
export const GetAccountApiV1SessionResponse = z.union([
  GetAccountApiV1SessionResponseMessage,
  GetAccountApiV1SessionResponseAppUserId,
]);

export type PostAccountApiV1SessionRequestSessionStatus = z.infer<
  typeof PostAccountApiV1SessionRequestSessionStatus
>;
export const PostAccountApiV1SessionRequestSessionStatus = z.union([
  z.literal("active"),
  z.literal("revoked"),
  z.literal("unknown"),
]);

export type PostAccountApiV1SessionRequestSessionCookiesItemSameSite = z.infer<
  typeof PostAccountApiV1SessionRequestSessionCookiesItemSameSite
>;
export const PostAccountApiV1SessionRequestSessionCookiesItemSameSite = z.union(
  [
    z.literal("unspecified"),
    z.literal("no_restriction"),
    z.literal("Lax"),
    z.literal("lax"),
    z.literal("Strict"),
    z.literal("strict"),
    z.literal("None"),
    z.literal("none"),
  ],
);

export type PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy =
  z.infer<
    typeof PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy
  >;
export const PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy =
  z.union([
    z.literal("unspecified"),
    z.literal("no_restriction"),
    z.literal("Lax"),
    z.literal("lax"),
    z.literal("Strict"),
    z.literal("strict"),
    z.literal("None"),
    z.literal("none"),
  ]);

export type PostAccountApiV1SessionRequestSessionCookiesItem = z.infer<
  typeof PostAccountApiV1SessionRequestSessionCookiesItem
>;
export const PostAccountApiV1SessionRequestSessionCookiesItem = z.object({
  name: z.string(),
  value: z.string(),
  domain: z.string(),
  path: z.string(),
  expires: z.union([z.number(), z.null(), z.undefined()]).optional(),
  secure: z.boolean(),
  hostOnly: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  httpOnly: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  discard: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  session: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  partitioned: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  sameSite: z
    .union([
      PostAccountApiV1SessionRequestSessionCookiesItemSameSite,
      z.undefined(),
    ])
    .optional(),
  sameSitePolicy: z
    .union([
      PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy,
      z.undefined(),
    ])
    .optional(),
  storeId: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type PostAccountApiV1SessionRequestSession = z.infer<
  typeof PostAccountApiV1SessionRequestSession
>;
export const PostAccountApiV1SessionRequestSession = z.object({
  id: z.union([z.string(), z.null(), z.undefined()]).optional(),
  status: z
    .union([PostAccountApiV1SessionRequestSessionStatus, z.undefined()])
    .optional(),
  cookies: z.array(PostAccountApiV1SessionRequestSessionCookiesItem),
  localStorage: z.array(z.array(z.string())),
  sessionStorage: z.array(z.array(z.string())),
  proxyId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  url: z.string(),
});

export type PostAccountApiV1SessionResponse = z.infer<
  typeof PostAccountApiV1SessionResponse
>;
export const PostAccountApiV1SessionResponse = z.object({
  message: z.string(),
  ownerId: z.string(),
  domain: z.string(),
});

export type PutAccountApiV1SessionRequestSessionStatus = z.infer<
  typeof PutAccountApiV1SessionRequestSessionStatus
>;
export const PutAccountApiV1SessionRequestSessionStatus = z.union([
  z.literal("active"),
  z.literal("revoked"),
  z.literal("unknown"),
]);

export type PutAccountApiV1SessionRequestSessionCookiesItemSameSite = z.infer<
  typeof PutAccountApiV1SessionRequestSessionCookiesItemSameSite
>;
export const PutAccountApiV1SessionRequestSessionCookiesItemSameSite = z.union([
  z.literal("unspecified"),
  z.literal("no_restriction"),
  z.literal("Lax"),
  z.literal("Strict"),
  z.literal("None"),
]);

export type PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy =
  z.infer<typeof PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy>;
export const PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy =
  z.union([
    z.literal("unspecified"),
    z.literal("no_restriction"),
    z.literal("Lax"),
    z.literal("Strict"),
    z.literal("None"),
  ]);

export type PutAccountApiV1SessionRequestSessionCookiesItem = z.infer<
  typeof PutAccountApiV1SessionRequestSessionCookiesItem
>;
export const PutAccountApiV1SessionRequestSessionCookiesItem = z.object({
  name: z.string(),
  value: z.string(),
  domain: z.string(),
  path: z.string(),
  expires: z.union([z.number(), z.null(), z.undefined()]).optional(),
  secure: z.boolean(),
  hostOnly: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  httpOnly: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  discard: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  session: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  partitioned: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  sameSite: z
    .union([
      PutAccountApiV1SessionRequestSessionCookiesItemSameSite,
      z.undefined(),
    ])
    .optional(),
  sameSitePolicy: z
    .union([
      PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy,
      z.undefined(),
    ])
    .optional(),
  storeId: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type PutAccountApiV1SessionRequestSession = z.infer<
  typeof PutAccountApiV1SessionRequestSession
>;
export const PutAccountApiV1SessionRequestSession = z.object({
  id: z.union([z.string(), z.null(), z.undefined()]).optional(),
  status: z
    .union([PutAccountApiV1SessionRequestSessionStatus, z.undefined()])
    .optional(),
  cookies: z.array(PutAccountApiV1SessionRequestSessionCookiesItem),
  localStorage: z.array(z.array(z.string())),
  sessionStorage: z.array(z.array(z.string())),
  proxyId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  url: z.string(),
});

export type PutAccountApiV1SessionResponse = z.infer<
  typeof PutAccountApiV1SessionResponse
>;
export const PutAccountApiV1SessionResponse = z.object({
  message: z.string(),
  ownerId: z.string(),
  domain: z.string(),
});

export type DeleteSessionResponseError = z.infer<
  typeof DeleteSessionResponseError
>;
export const DeleteSessionResponseError = z.object({
  message: z.string(),
});

export type DeleteSessionResponse = z.infer<typeof DeleteSessionResponse>;
export const DeleteSessionResponse = z.object({
  appUserId: z.string(),
  app: z.string(),
});

export type SessionStatus = z.infer<typeof SessionStatus>;
export const SessionStatus = z.union([
  z.literal("active"),
  z.literal("unknown"),
  z.literal("revoked"),
]);

export type GetAccountApiV1SessionStatusResponse = z.infer<
  typeof GetAccountApiV1SessionStatusResponse
>;
export const GetAccountApiV1SessionStatusResponse = z.object({
  status: SessionStatus,
});

export type GetAccountApiV1SessionRequestResponseDetails = z.infer<
  typeof GetAccountApiV1SessionRequestResponseDetails
>;
export const GetAccountApiV1SessionRequestResponseDetails = z.object({
  requestId: z.string(),
  appUserId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  appSdkClientId: z.union([z.string(), z.null(), z.undefined()]).optional(),
  domain: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type GetAccountApiV1SessionRequestResponse = z.infer<
  typeof GetAccountApiV1SessionRequestResponse
>;
export const GetAccountApiV1SessionRequestResponse = z.object({
  message: z.string(),
  succeeded: z.union([z.boolean(), z.null(), z.undefined()]).optional(),
  status: z.union([z.string(), z.null(), z.undefined()]).optional(),
  details: z
    .union([GetAccountApiV1SessionRequestResponseDetails, z.undefined()])
    .optional(),
});

export type PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization =
  z.infer<
    typeof PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization
  >;
export const PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization =
  z.object({
    iosAppId: z.string(),
    authToken: z.string(),
  });

export type PostAccountApiV1SessionRequestRequestAccountAccount = z.infer<
  typeof PostAccountApiV1SessionRequestRequestAccountAccount
>;
export const PostAccountApiV1SessionRequestRequestAccountAccount = z.object({
  ownerId: z.string(),
  domain: z.string(),
});

export type PostAccountApiV1SessionRequestRequestAccount = z.infer<
  typeof PostAccountApiV1SessionRequestRequestAccount
>;
export const PostAccountApiV1SessionRequestRequestAccount = z.object({
  iosPushAuthorization:
    PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization,
  account: PostAccountApiV1SessionRequestRequestAccountAccount,
  appSdkClientId: z.string(),
  alertBody: z.union([z.string(), z.null(), z.undefined()]).optional(),
  alertTitle: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type PostAccountApiV1SessionRequestRequestApp = z.infer<
  typeof PostAccountApiV1SessionRequestRequestApp
>;
export const PostAccountApiV1SessionRequestRequestApp = z.object({
  appUserId: z.string(),
  app: z.string(),
});

export type PostAccountApiV1SessionRequestRequest = z.infer<
  typeof PostAccountApiV1SessionRequestRequest
>;
export const PostAccountApiV1SessionRequestRequest = z.union([
  PostAccountApiV1SessionRequestRequestAccount,
  PostAccountApiV1SessionRequestRequestApp,
]);

export type PostAccountApiV1SessionRequestResponse = z.infer<
  typeof PostAccountApiV1SessionRequestResponse
>;
export const PostAccountApiV1SessionRequestResponse = z.object({
  message: z.string(),
  status: z.string(),
  requestId: z.string(),
});

export type ListSessionsResponseItemAppUser = z.infer<
  typeof ListSessionsResponseItemAppUser
>;
export const ListSessionsResponseItemAppUser = z.object({
  id: z.string(),
  email: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type ListSessionsResponseItem = z.infer<typeof ListSessionsResponseItem>;
export const ListSessionsResponseItem = z.object({
  sessionId: z.string(),
  app: z.string(),
  appUser: ListSessionsResponseItemAppUser,
});

export type ListSessionsResponse = z.infer<typeof ListSessionsResponse>;
export const ListSessionsResponse = z.object({
  sessions: z.array(ListSessionsResponseItem),
});

export type PostAccountApiV1SessionAccessGrantResponse = z.infer<
  typeof PostAccountApiV1SessionAccessGrantResponse
>;
export const PostAccountApiV1SessionAccessGrantResponse = z.object({
  message: z.string(),
});

export type DeleteAccountApiV1SessionAccessGrantResponse = z.infer<
  typeof DeleteAccountApiV1SessionAccessGrantResponse
>;
export const DeleteAccountApiV1SessionAccessGrantResponse = z.object({
  message: z.string(),
});

export type JwksBody = z.infer<typeof JwksBody>;
export const JwksBody = z.object({
  jwksUri: z.string(),
  idClaim: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type AuthorizationType = z.infer<typeof AuthorizationType>;
export const AuthorizationType = z.object({
  jwksUri: z.string(),
  idClaim: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type AuthorizationTypeInput = z.infer<typeof AuthorizationTypeInput>;
export const AuthorizationTypeInput = z.object({
  jwksUri: z.string(),
  idClaim: z.union([z.string(), z.null(), z.undefined()]).optional(),
});

export type CreateUserPool = z.infer<typeof CreateUserPool>;
export const CreateUserPool = z.object({
  name: z.string(),
  description: z.string(),
  authorization: z.union([JwksBody, z.undefined()]).optional(),
});

export type UserPool = z.infer<typeof UserPool>;
export const UserPool = z.object({
  id: UserPoolId,
  name: z.string(),
  description: z.string(),
  authorization: JwksBody,
  organizationId: OrganizationId,
  hosted: z.boolean(),
});

export type UserPoolListItem = z.infer<typeof UserPoolListItem>;
export const UserPoolListItem = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  authorization: JwksBody,
  hosted: z.boolean(),
});

export type UserPoolList = z.infer<typeof UserPoolList>;
export const UserPoolList = z.object({
  resource: z.string(),
  items: z.array(UserPoolListItem),
});

export type UpdateUserPool = z.infer<typeof UpdateUserPool>;
export const UpdateUserPool = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  description: z.union([z.string(), z.null()]).optional(),
  authorization: JwksBody.optional(),
});

export type get_Actions_linkedinListConversations =
  typeof get_Actions_linkedinListConversations;
export const get_Actions_linkedinListConversations = {
  method: z.literal("GET"),
  path: z.literal("/actions/linkedin/listConversations"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      profileName: z.union([z.string(), z.null(), z.undefined()]),
      profileId: z.union([z.string(), z.null(), z.undefined()]),
      appUserId: z.string(),
      contentType: z.union([z.string(), z.null(), z.undefined()]),
      appUserPoolId: z.union([z.string(), z.null(), z.undefined()]),
    }),
  }),
  response: LinkedinListConversationsResponse,
};

export type get_Actions_linkedinListConnections =
  typeof get_Actions_linkedinListConnections;
export const get_Actions_linkedinListConnections = {
  method: z.literal("GET"),
  path: z.literal("/actions/linkedin/listConnections"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      cursor: z.union([z.string(), z.null(), z.undefined()]),
      profileName: z.union([z.string(), z.null(), z.undefined()]),
      appUserId: z.string(),
      appUserPoolId: z.union([z.string(), z.null(), z.undefined()]),
    }),
  }),
  response: LinkedinListConnectionsResponse,
};

export type post_Actions_linkedinCreateConversation =
  typeof post_Actions_linkedinCreateConversation;
export const post_Actions_linkedinCreateConversation = {
  method: z.literal("POST"),
  path: z.literal("/actions/linkedin/createConversation"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: LinkedinCreateConversationBody,
  }),
  response: LinkedinCreateConversationResponse,
};

export type get_Actions_linkedinGetConversation =
  typeof get_Actions_linkedinGetConversation;
export const get_Actions_linkedinGetConversation = {
  method: z.literal("GET"),
  path: z.literal("/actions/linkedin/getConversation"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      id: z.string(),
      appUserId: z.string(),
      appUserPoolId: z.union([z.string(), z.null(), z.undefined()]),
    }),
  }),
  response: LinkedinGetConversationResponse,
};

export type get_Actions_linkedinListMessages =
  typeof get_Actions_linkedinListMessages;
export const get_Actions_linkedinListMessages = {
  method: z.literal("GET"),
  path: z.literal("/actions/linkedin/listMessages"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      id: z.string(),
      appUserId: z.string(),
      appUserPoolId: z.union([z.string(), z.null(), z.undefined()]),
    }),
  }),
  response: LinkedinListMessagesResponse,
};

export type post_Actions_linkedinSendMessage =
  typeof post_Actions_linkedinSendMessage;
export const post_Actions_linkedinSendMessage = {
  method: z.literal("POST"),
  path: z.literal("/actions/linkedin/sendMessage"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: LinkedinSendMessageBody,
  }),
  response: LinkedinSendMessageResponse,
};

export type get_Actions_linkedinGetProfile =
  typeof get_Actions_linkedinGetProfile;
export const get_Actions_linkedinGetProfile = {
  method: z.literal("GET"),
  path: z.literal("/actions/linkedin/getProfile"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      id: z.string(),
      appUserId: z.string(),
      appUserPoolId: z.union([z.string(), z.null(), z.undefined()]),
    }),
  }),
  response: LinkedinGetProfileResponse,
};

export type post_Actions_linkedinSendConnectionRequest =
  typeof post_Actions_linkedinSendConnectionRequest;
export const post_Actions_linkedinSendConnectionRequest = {
  method: z.literal("POST"),
  path: z.literal("/actions/linkedin/sendConnectionRequest"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: LinkedinSendConnectionRequestBody,
  }),
  response: LinkedinSendConnectionRequestResponse,
};

export type post_Actions_linkedinSearchProfiles =
  typeof post_Actions_linkedinSearchProfiles;
export const post_Actions_linkedinSearchProfiles = {
  method: z.literal("POST"),
  path: z.literal("/actions/linkedin/search"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: LinkedinSearchProfilesBody,
  }),
  response: LinkedinSearchProfilesResponse,
};

export type get_Activity_getActivityEvents =
  typeof get_Activity_getActivityEvents;
export const get_Activity_getActivityEvents = {
  method: z.literal("GET"),
  path: z.literal("/account/api/v1/activity"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      groupId: z.union([z.string(), z.null()]).optional(),
      activityType: z
        .union([z.literal("Link"), z.literal("runtime")])
        .optional(),
      app: z.union([z.string(), z.null()]).optional(),
      startTime: z.union([z.string(), z.null()]).optional(),
      endTime: z.union([z.string(), z.null()]).optional(),
      userId: z.union([z.string(), z.null()]).optional(),
      order: z.union([z.string(), z.null()]).optional(),
    }),
  }),
  response: ActivityEventList,
};

export type post_Activity_createEvent = typeof post_Activity_createEvent;
export const post_Activity_createEvent = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/activity"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: CreateEventRequestBody,
  }),
  response: CreateEventResponse,
};

export type post_Activity_createEventWithGroupId =
  typeof post_Activity_createEventWithGroupId;
export const post_Activity_createEventWithGroupId = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/activity/{groupId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      groupId: z.string(),
    }),
    body: CreateEventRequestBody,
  }),
  response: CreateEventResponse,
};

export type get_AppIntegrations_listAppIntegrations =
  typeof get_AppIntegrations_listAppIntegrations;
export const get_AppIntegrations_listAppIntegrations = {
  method: z.literal("GET"),
  path: z.literal("/account/api/v1/appIntegrations"),
  requestFormat: z.literal("json"),
  parameters: z.never(),
  response: ListAppIntegrationsResponse,
};

export type post_AppUserIdToken_createAppUserIdToken =
  typeof post_AppUserIdToken_createAppUserIdToken;
export const post_AppUserIdToken_createAppUserIdToken = {
  method: z.literal("POST"),
  path: z.literal("/org/appUserIdToken"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: CreateAppUserIdToken,
  }),
  response: AppUserIdToken,
};

export type post_Link_initiateLink = typeof post_Link_initiateLink;
export const post_Link_initiateLink = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/link"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: InitiateLinkRequest,
  }),
  response: LinkResponse,
};

export type patch_Link_continueLink = typeof patch_Link_continueLink;
export const patch_Link_continueLink = {
  method: z.literal("PATCH"),
  path: z.literal("/account/api/v1/link/{linkId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      linkId: z.string(),
    }),
    body: ContinueLinkRequest,
  }),
  response: LinkResponse,
};

export type get_Link_createLinkUrl = typeof get_Link_createLinkUrl;
export const get_Link_createLinkUrl = {
  method: z.literal("GET"),
  path: z.literal("/link/url"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      app: z.union([z.string(), Integration]),
      appUserId: z.string(),
      chromeExtensionId: z.union([z.string(), z.null(), z.undefined()]),
      companyLogoUrl: z.union([z.string(), z.null(), z.undefined()]),
      companyName: z.union([z.string(), z.null(), z.undefined()]),
      redirectUrl: z.string(),
      state: z.union([z.string(), z.null(), z.undefined()]),
      authUrl: z.union([z.string(), z.null(), z.undefined()]),
      checkUrl: z.union([z.string(), z.null(), z.undefined()]),
      displayName: z.union([z.string(), z.null(), z.undefined()]),
      iconUrl: z.union([z.string(), z.null(), z.undefined()]),
    }),
  }),
  response: CreateLinkUrlResponse,
};

export type post_Member_createMember = typeof post_Member_createMember;
export const post_Member_createMember = {
  method: z.literal("POST"),
  path: z.literal("/org/member"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: CreateMember,
  }),
  response: Member,
};

export type get_Member_getMember = typeof get_Member_getMember;
export const get_Member_getMember = {
  method: z.literal("GET"),
  path: z.literal("/org/member/{memberId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      memberId: z.string(),
    }),
  }),
  response: Member,
};

export type get_Member_listMembers = typeof get_Member_listMembers;
export const get_Member_listMembers = {
  method: z.literal("GET"),
  path: z.literal("/org/members"),
  requestFormat: z.literal("json"),
  parameters: z.never(),
  response: MemberList,
};

export type post_Member_login = typeof post_Member_login;
export const post_Member_login = {
  method: z.literal("POST"),
  path: z.literal("/org/login"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: LoginMember,
  }),
  response: LoginSession,
};

export type post_Organization_createOrganization =
  typeof post_Organization_createOrganization;
export const post_Organization_createOrganization = {
  method: z.literal("POST"),
  path: z.literal("/org/organization"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: CreateOrganization,
  }),
  response: Organization,
};

export type get_Organization_getOrganization =
  typeof get_Organization_getOrganization;
export const get_Organization_getOrganization = {
  method: z.literal("GET"),
  path: z.literal("/org/organization/{organizationId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      organizationId: z.string(),
    }),
    header: z.object({
      userId: z.union([z.string(), z.null()]).optional(),
      orgId: z.union([z.string(), z.null()]).optional(),
    }),
  }),
  response: Organization,
};

export type delete_Organization_deleteOrganization =
  typeof delete_Organization_deleteOrganization;
export const delete_Organization_deleteOrganization = {
  method: z.literal("DELETE"),
  path: z.literal("/org/organization/{organizationId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      organizationId: z.string(),
    }),
  }),
  response: DeleteOrganizationResponse,
};

export type patch_Organization_updateOrganization =
  typeof patch_Organization_updateOrganization;
export const patch_Organization_updateOrganization = {
  method: z.literal("PATCH"),
  path: z.literal("/org/organization/{organizationId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      organizationId: z.string(),
    }),
    body: UpdateOrganization,
  }),
  response: z.boolean(),
};

export type post_Organization_createAppUser =
  typeof post_Organization_createAppUser;
export const post_Organization_createAppUser = {
  method: z.literal("POST"),
  path: z.literal("/org/user"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: CreateAppUserIdToken,
  }),
  response: CreateAppUserResponse,
};

export type get_Organization_appUser = typeof get_Organization_appUser;
export const get_Organization_appUser = {
  method: z.literal("GET"),
  path: z.literal("/org/user"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      id: z.union([z.string(), z.null()]).optional(),
      email: z.union([z.string(), z.null()]).optional(),
      phoneNumber: z.union([z.string(), z.null()]).optional(),
      externalUserId: z.union([z.string(), z.null()]).optional(),
      appUserPoolId: z.union([z.string(), z.null()]).optional(),
    }),
  }),
  response: AppUser,
};

export type get_Organization_listAppUsers =
  typeof get_Organization_listAppUsers;
export const get_Organization_listAppUsers = {
  method: z.literal("GET"),
  path: z.literal("/org/users"),
  requestFormat: z.literal("json"),
  parameters: z.never(),
  response: AppUserList,
};

export type post_Run_createCdpUrl = typeof post_Run_createCdpUrl;
export const post_Run_createCdpUrl = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/cdpUrl"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: CreateCdpUrlRequest,
  }),
  response: CreateCdpUrlResponse,
};

export type post_RuntimeLog_recordLog = typeof post_RuntimeLog_recordLog;
export const post_RuntimeLog_recordLog = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/logs"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: RuntimeLogCreateRequest,
  }),
  response: RecordLogResponse,
};

export type post_SdkClient_createSdkClient =
  typeof post_SdkClient_createSdkClient;
export const post_SdkClient_createSdkClient = {
  method: z.literal("POST"),
  path: z.literal("/org/sdkClient"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: CreateSdkClient,
  }),
  response: CreatedSdkClient,
};

export type get_SdkClient_getSdkClient = typeof get_SdkClient_getSdkClient;
export const get_SdkClient_getSdkClient = {
  method: z.literal("GET"),
  path: z.literal("/org/sdkClient/{sdkClientId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      sdkClientId: z.string(),
    }),
    header: z.object({
      userId: z.union([z.string(), z.null()]).optional(),
      orgId: z.union([z.string(), z.null()]).optional(),
    }),
  }),
  response: SdkClient,
};

export type patch_SdkClient_updateSdkClient =
  typeof patch_SdkClient_updateSdkClient;
export const patch_SdkClient_updateSdkClient = {
  method: z.literal("PATCH"),
  path: z.literal("/org/sdkClient/{sdkClientId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      sdkClientId: z.string(),
    }),
    body: UpdateSdkClient,
  }),
  response: SdkClient,
};

export type get_SdkClient_auth = typeof get_SdkClient_auth;
export const get_SdkClient_auth = {
  method: z.literal("GET"),
  path: z.literal("/org/sdkClient/auth"),
  requestFormat: z.literal("json"),
  parameters: z.never(),
  response: AuthenticatorResponse,
};

export type get_SdkClient_listSdkClients = typeof get_SdkClient_listSdkClients;
export const get_SdkClient_listSdkClients = {
  method: z.literal("GET"),
  path: z.literal("/org/sdkClients"),
  requestFormat: z.literal("json"),
  parameters: z.never(),
  response: SdkClientList,
};

export type get_Session_getAppIntegration =
  typeof get_Session_getAppIntegration;
export const get_Session_getAppIntegration = {
  method: z.literal("GET"),
  path: z.literal("/account/api/v1/appIntegration"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      id: z.string(),
    }),
  }),
  response: GetAccountApiV1AppIntegrationResponse,
};

export type post_Session_createRuntimeBrowserEnvironment =
  typeof post_Session_createRuntimeBrowserEnvironment;
export const post_Session_createRuntimeBrowserEnvironment = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/browser/environment"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: PostAccountApiV1BrowserEnvironmentRequest,
  }),
  response: PostAccountApiV1BrowserEnvironmentResponse,
};

export type get_Session_getSession = typeof get_Session_getSession;
export const get_Session_getSession = {
  method: z.literal("GET"),
  path: z.literal("/account/api/v1/session"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      ownerId: z.union([z.string(), z.null(), z.undefined()]),
      appUserId: z.union([z.string(), z.null(), z.undefined()]),
      domain: z.string(),
    }),
  }),
  response: GetAccountApiV1SessionResponse,
};

export type post_Session_addSession = typeof post_Session_addSession;
export const post_Session_addSession = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/session"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: z.object({
      ownerId: z.union([z.string(), z.null(), z.undefined()]).optional(),
      domain: z.string(),
      session: PostAccountApiV1SessionRequestSession,
    }),
  }),
  response: PostAccountApiV1SessionResponse,
};

export type put_Session_updateSession = typeof put_Session_updateSession;
export const put_Session_updateSession = {
  method: z.literal("PUT"),
  path: z.literal("/account/api/v1/session"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: z.object({
      ownerId: z.union([z.string(), z.null(), z.undefined()]).optional(),
      domain: z.string(),
      session: PutAccountApiV1SessionRequestSession,
    }),
  }),
  response: PutAccountApiV1SessionResponse,
};

export type delete_Session_removeSession = typeof delete_Session_removeSession;
export const delete_Session_removeSession = {
  method: z.literal("DELETE"),
  path: z.literal("/account/api/v1/session"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      appUserId: z.string(),
      app: z.union([z.string(), Integration]),
    }),
  }),
  response: DeleteSessionResponse,
};

export type get_Session_getSessionStatus = typeof get_Session_getSessionStatus;
export const get_Session_getSessionStatus = {
  method: z.literal("GET"),
  path: z.literal("/account/api/v1/session/status"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      appUserId: z.string(),
      app: z.union([z.string(), Integration]),
    }),
  }),
  response: GetAccountApiV1SessionStatusResponse,
};

export type get_Session_getSessionRequestStatus =
  typeof get_Session_getSessionRequestStatus;
export const get_Session_getSessionRequestStatus = {
  method: z.literal("GET"),
  path: z.literal("/account/api/v1/session/request"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      id: z.string(),
    }),
  }),
  response: GetAccountApiV1SessionRequestResponse,
};

export type post_Session_createSessionRequest =
  typeof post_Session_createSessionRequest;
export const post_Session_createSessionRequest = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/session/request"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: PostAccountApiV1SessionRequestRequest,
  }),
  response: PostAccountApiV1SessionRequestResponse,
};

export type get_Session_listSessions = typeof get_Session_listSessions;
export const get_Session_listSessions = {
  method: z.literal("GET"),
  path: z.literal("/account/api/v1/sessions"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    query: z.object({
      appUserId: z.union([z.string(), z.null()]).optional(),
    }),
  }),
  response: ListSessionsResponse,
};

export type post_Session_addSessionAccessGrant =
  typeof post_Session_addSessionAccessGrant;
export const post_Session_addSessionAccessGrant = {
  method: z.literal("POST"),
  path: z.literal("/account/api/v1/sessionAccessGrant"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: z.object({
      sessionId: z.string(),
      appUserId: z.string(),
    }),
  }),
  response: PostAccountApiV1SessionAccessGrantResponse,
};

export type delete_Session_deleteSessionAccessGrant =
  typeof delete_Session_deleteSessionAccessGrant;
export const delete_Session_deleteSessionAccessGrant = {
  method: z.literal("DELETE"),
  path: z.literal("/account/api/v1/sessionAccessGrant"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: z.object({
      sessionId: z.string(),
      appUserId: z.string(),
    }),
  }),
  response: DeleteAccountApiV1SessionAccessGrantResponse,
};

export type post_UserPool_createUserPool = typeof post_UserPool_createUserPool;
export const post_UserPool_createUserPool = {
  method: z.literal("POST"),
  path: z.literal("/org/userPool"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    body: CreateUserPool,
  }),
  response: UserPool,
};

export type get_UserPool_getUserPool = typeof get_UserPool_getUserPool;
export const get_UserPool_getUserPool = {
  method: z.literal("GET"),
  path: z.literal("/org/userPool/{userPoolId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      userPoolId: z.string(),
    }),
  }),
  response: UserPool,
};

export type patch_UserPool_updateUserPool =
  typeof patch_UserPool_updateUserPool;
export const patch_UserPool_updateUserPool = {
  method: z.literal("PATCH"),
  path: z.literal("/org/userPool/{userPoolId}"),
  requestFormat: z.literal("json"),
  parameters: z.object({
    path: z.object({
      userPoolId: z.string(),
    }),
    body: UpdateUserPool,
  }),
  response: z.boolean(),
};

export type get_UserPool_listUserPools = typeof get_UserPool_listUserPools;
export const get_UserPool_listUserPools = {
  method: z.literal("GET"),
  path: z.literal("/org/userPools"),
  requestFormat: z.literal("json"),
  parameters: z.never(),
  response: UserPoolList,
};

// <EndpointByMethod>
export const EndpointByMethod = {
  get: {
    "/actions/linkedin/listConversations":
      get_Actions_linkedinListConversations,
    "/actions/linkedin/listConnections": get_Actions_linkedinListConnections,
    "/actions/linkedin/getConversation": get_Actions_linkedinGetConversation,
    "/actions/linkedin/listMessages": get_Actions_linkedinListMessages,
    "/actions/linkedin/getProfile": get_Actions_linkedinGetProfile,
    "/account/api/v1/activity": get_Activity_getActivityEvents,
    "/account/api/v1/appIntegrations": get_AppIntegrations_listAppIntegrations,
    "/link/url": get_Link_createLinkUrl,
    "/org/member/{memberId}": get_Member_getMember,
    "/org/members": get_Member_listMembers,
    "/org/organization/{organizationId}": get_Organization_getOrganization,
    "/org/user": get_Organization_appUser,
    "/org/users": get_Organization_listAppUsers,
    "/org/sdkClient/{sdkClientId}": get_SdkClient_getSdkClient,
    "/org/sdkClient/auth": get_SdkClient_auth,
    "/org/sdkClients": get_SdkClient_listSdkClients,
    "/account/api/v1/appIntegration": get_Session_getAppIntegration,
    "/account/api/v1/session": get_Session_getSession,
    "/account/api/v1/session/status": get_Session_getSessionStatus,
    "/account/api/v1/session/request": get_Session_getSessionRequestStatus,
    "/account/api/v1/sessions": get_Session_listSessions,
    "/org/userPool/{userPoolId}": get_UserPool_getUserPool,
    "/org/userPools": get_UserPool_listUserPools,
  },
  post: {
    "/actions/linkedin/createConversation":
      post_Actions_linkedinCreateConversation,
    "/actions/linkedin/sendMessage": post_Actions_linkedinSendMessage,
    "/actions/linkedin/sendConnectionRequest":
      post_Actions_linkedinSendConnectionRequest,
    "/actions/linkedin/search": post_Actions_linkedinSearchProfiles,
    "/account/api/v1/activity": post_Activity_createEvent,
    "/account/api/v1/activity/{groupId}": post_Activity_createEventWithGroupId,
    "/org/appUserIdToken": post_AppUserIdToken_createAppUserIdToken,
    "/account/api/v1/link": post_Link_initiateLink,
    "/org/member": post_Member_createMember,
    "/org/login": post_Member_login,
    "/org/organization": post_Organization_createOrganization,
    "/org/user": post_Organization_createAppUser,
    "/account/api/v1/cdpUrl": post_Run_createCdpUrl,
    "/account/api/v1/logs": post_RuntimeLog_recordLog,
    "/org/sdkClient": post_SdkClient_createSdkClient,
    "/account/api/v1/browser/environment":
      post_Session_createRuntimeBrowserEnvironment,
    "/account/api/v1/session": post_Session_addSession,
    "/account/api/v1/session/request": post_Session_createSessionRequest,
    "/account/api/v1/sessionAccessGrant": post_Session_addSessionAccessGrant,
    "/org/userPool": post_UserPool_createUserPool,
  },
  patch: {
    "/account/api/v1/link/{linkId}": patch_Link_continueLink,
    "/org/organization/{organizationId}": patch_Organization_updateOrganization,
    "/org/sdkClient/{sdkClientId}": patch_SdkClient_updateSdkClient,
    "/org/userPool/{userPoolId}": patch_UserPool_updateUserPool,
  },
  delete: {
    "/org/organization/{organizationId}":
      delete_Organization_deleteOrganization,
    "/account/api/v1/session": delete_Session_removeSession,
    "/account/api/v1/sessionAccessGrant":
      delete_Session_deleteSessionAccessGrant,
  },
  put: {
    "/account/api/v1/session": put_Session_updateSession,
  },
};
export type EndpointByMethod = typeof EndpointByMethod;
// </EndpointByMethod>

// <EndpointByMethod.Shorthands>
export type GetEndpoints = EndpointByMethod["get"];
export type PostEndpoints = EndpointByMethod["post"];
export type PatchEndpoints = EndpointByMethod["patch"];
export type DeleteEndpoints = EndpointByMethod["delete"];
export type PutEndpoints = EndpointByMethod["put"];
export type AllEndpoints = EndpointByMethod[keyof EndpointByMethod];
// </EndpointByMethod.Shorthands>

// <ApiClientTypes>
export type EndpointParameters = {
  body?: unknown;
  query?: Record<string, unknown>;
  header?: Record<string, unknown>;
  path?: Record<string, unknown>;
};

export type MutationMethod = "post" | "put" | "patch" | "delete";
export type Method = "get" | "head" | "options" | MutationMethod;

type RequestFormat = "json" | "form-data" | "form-url" | "binary" | "text";

export type DefaultEndpoint = {
  parameters?: EndpointParameters | undefined;
  response: unknown;
};

export type Endpoint<TConfig extends DefaultEndpoint = DefaultEndpoint> = {
  operationId: string;
  method: Method;
  path: string;
  requestFormat: RequestFormat;
  parameters?: TConfig["parameters"];
  meta: {
    alias: string;
    hasParameters: boolean;
    areParametersRequired: boolean;
  };
  response: TConfig["response"];
};

type Fetcher = (
  method: Method,
  url: string,
  parameters?: EndpointParameters | undefined,
) => Promise<Endpoint["response"]>;

type RequiredKeys<T> = {
  [P in keyof T]-?: undefined extends T[P] ? never : P;
}[keyof T];

type MaybeOptionalArg<T> =
  RequiredKeys<T> extends never ? [config?: T] : [config: T];

// </ApiClientTypes>

// <ApiClient>
export class ApiClient {
  baseUrl: string = "";

  constructor(public fetcher: Fetcher) {}

  setBaseUrl(baseUrl: string) {
    this.baseUrl = baseUrl;
    return this;
  }

  // <ApiClient.get>
  get<Path extends keyof GetEndpoints, TEndpoint extends GetEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>
  ): Promise<z.infer<TEndpoint["response"]>> {
    return this.fetcher("get", this.baseUrl + path, params[0]) as Promise<
      z.infer<TEndpoint["response"]>
    >;
  }
  // </ApiClient.get>

  // <ApiClient.post>
  post<Path extends keyof PostEndpoints, TEndpoint extends PostEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>
  ): Promise<z.infer<TEndpoint["response"]>> {
    return this.fetcher("post", this.baseUrl + path, params[0]) as Promise<
      z.infer<TEndpoint["response"]>
    >;
  }
  // </ApiClient.post>

  // <ApiClient.patch>
  patch<
    Path extends keyof PatchEndpoints,
    TEndpoint extends PatchEndpoints[Path],
  >(
    path: Path,
    ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>
  ): Promise<z.infer<TEndpoint["response"]>> {
    return this.fetcher("patch", this.baseUrl + path, params[0]) as Promise<
      z.infer<TEndpoint["response"]>
    >;
  }
  // </ApiClient.patch>

  // <ApiClient.delete>
  delete<
    Path extends keyof DeleteEndpoints,
    TEndpoint extends DeleteEndpoints[Path],
  >(
    path: Path,
    ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>
  ): Promise<z.infer<TEndpoint["response"]>> {
    return this.fetcher("delete", this.baseUrl + path, params[0]) as Promise<
      z.infer<TEndpoint["response"]>
    >;
  }
  // </ApiClient.delete>

  // <ApiClient.put>
  put<Path extends keyof PutEndpoints, TEndpoint extends PutEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>
  ): Promise<z.infer<TEndpoint["response"]>> {
    return this.fetcher("put", this.baseUrl + path, params[0]) as Promise<
      z.infer<TEndpoint["response"]>
    >;
  }
  // </ApiClient.put>
}

export function createApiClient(fetcher: Fetcher, baseUrl?: string) {
  return new ApiClient(fetcher).setBaseUrl(baseUrl ?? "");
}

/**
 Example usage:
 const api = createApiClient((method, url, params) =>
   fetch(url, { method, body: JSON.stringify(params) }).then((res) => res.json()),
 );
 api.get("/users").then((users) => console.log(users));
 api.post("/users", { body: { name: "John" } }).then((user) => console.log(user));
 api.put("/users/:id", { path: { id: 1 }, body: { name: "John" } }).then((user) => console.log(user));
*/

// </ApiClient
