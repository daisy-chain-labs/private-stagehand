import { z } from "zod";
export type LinkedinCreateConversationBody = z.infer<typeof LinkedinCreateConversationBody>;
export declare const LinkedinCreateConversationBody: z.ZodObject<{
    profileId: z.ZodString;
    appUserId: z.ZodString;
    message: z.ZodString;
    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    profileId: string;
    appUserId: string;
    appUserPoolId?: string | null | undefined;
}, {
    message: string;
    profileId: string;
    appUserId: string;
    appUserPoolId?: string | null | undefined;
}>;
export type LinkedinSendMessageBody = z.infer<typeof LinkedinSendMessageBody>;
export declare const LinkedinSendMessageBody: z.ZodObject<{
    message: z.ZodString;
    appUserId: z.ZodString;
    conversationId: z.ZodString;
    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    appUserId: string;
    conversationId: string;
    appUserPoolId?: string | null | undefined;
}, {
    message: string;
    appUserId: string;
    conversationId: string;
    appUserPoolId?: string | null | undefined;
}>;
export type LinkedinSendMessageResponse = z.infer<typeof LinkedinSendMessageResponse>;
export declare const LinkedinSendMessageResponse: z.ZodObject<{
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
}, {
    success: boolean;
}>;
export type ConversationType = z.infer<typeof ConversationType>;
export declare const ConversationType: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
export type MutedUntil = z.infer<typeof MutedUntil>;
export declare const MutedUntil: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
export type ReadOnlyStatus = z.infer<typeof ReadOnlyStatus>;
export declare const ReadOnlyStatus: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
export type FolderType = z.infer<typeof FolderType>;
export declare const FolderType: z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>;
export type ContentType = z.infer<typeof ContentType>;
export declare const ContentType: z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>;
export type ChatProfile = z.infer<typeof ChatProfile>;
export declare const ChatProfile: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    isSelf: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    isSelf: boolean;
    profileUrl?: string | null | undefined;
}, {
    id: string;
    name: string;
    isSelf: boolean;
    profileUrl?: string | null | undefined;
}>;
export type LinkedinConversationListItem = z.infer<typeof LinkedinConversationListItem>;
export declare const LinkedinConversationListItem: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
    profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    unreadCount: z.ZodNumber;
    archived: z.ZodBoolean;
    mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
    readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
    subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
    organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
    profiles: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        isSelf: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        isSelf: boolean;
        profileUrl?: string | null | undefined;
    }, {
        id: string;
        name: string;
        isSelf: boolean;
        profileUrl?: string | null | undefined;
    }>, "many">;
    seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: "SINGLE" | "GROUP";
    id: string;
    unreadCount: number;
    archived: boolean;
    readOnly: "0" | "1" | "2";
    profiles: {
        id: string;
        name: string;
        isSelf: boolean;
        profileUrl?: string | null | undefined;
    }[];
    profileId?: string | null | undefined;
    timestamp?: string | null | undefined;
    mutedUntil?: string | number | undefined;
    subject?: string | null | undefined;
    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
    organizationId?: string | null | undefined;
    mailboxId?: string | null | undefined;
    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
    seen?: boolean | null | undefined;
    seenBy?: unknown;
}, {
    type: "SINGLE" | "GROUP";
    id: string;
    unreadCount: number;
    archived: boolean;
    readOnly: "0" | "1" | "2";
    profiles: {
        id: string;
        name: string;
        isSelf: boolean;
        profileUrl?: string | null | undefined;
    }[];
    profileId?: string | null | undefined;
    timestamp?: string | null | undefined;
    mutedUntil?: string | number | undefined;
    subject?: string | null | undefined;
    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
    organizationId?: string | null | undefined;
    mailboxId?: string | null | undefined;
    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
    seen?: boolean | null | undefined;
    seenBy?: unknown;
}>;
export type LinkedinListConversationsResponse = z.infer<typeof LinkedinListConversationsResponse>;
export declare const LinkedinListConversationsResponse: z.ZodObject<{
    conversations: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
        profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        unreadCount: z.ZodNumber;
        archived: z.ZodBoolean;
        mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
        readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
        subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
        organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
        profiles: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            isSelf: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }, {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }>, "many">;
        seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    }, {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    }>, "many">;
    count: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    conversations: {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    }[];
    count: number;
}, {
    conversations: {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    }[];
    count: number;
}>;
export type LinkedinConnection = z.infer<typeof LinkedinConnection>;
export declare const LinkedinConnection: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    publicIdentifier: z.ZodString;
    publicProfileUrl: z.ZodString;
    createdAt: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    publicIdentifier: string;
    publicProfileUrl: string;
    headline?: string | null | undefined;
    profilePictureUrl?: string | null | undefined;
    createdAt?: number | null | undefined;
}, {
    id: string;
    name: string;
    publicIdentifier: string;
    publicProfileUrl: string;
    headline?: string | null | undefined;
    profilePictureUrl?: string | null | undefined;
    createdAt?: number | null | undefined;
}>;
export type LinkedinListConnectionsResponse = z.infer<typeof LinkedinListConnectionsResponse>;
export declare const LinkedinListConnectionsResponse: z.ZodObject<{
    connections: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        publicIdentifier: z.ZodString;
        publicProfileUrl: z.ZodString;
        createdAt: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        publicIdentifier: string;
        publicProfileUrl: string;
        headline?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        createdAt?: number | null | undefined;
    }, {
        id: string;
        name: string;
        publicIdentifier: string;
        publicProfileUrl: string;
        headline?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        createdAt?: number | null | undefined;
    }>, "many">;
    cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    pageCount: z.ZodNumber;
    totalCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    connections: {
        id: string;
        name: string;
        publicIdentifier: string;
        publicProfileUrl: string;
        headline?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        createdAt?: number | null | undefined;
    }[];
    pageCount: number;
    cursor?: string | null | undefined;
    totalCount?: number | null | undefined;
}, {
    connections: {
        id: string;
        name: string;
        publicIdentifier: string;
        publicProfileUrl: string;
        headline?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        createdAt?: number | null | undefined;
    }[];
    pageCount: number;
    cursor?: string | null | undefined;
    totalCount?: number | null | undefined;
}>;
export type Message = z.infer<typeof Message>;
export declare const Message: z.ZodObject<{
    id: z.ZodString;
    text: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    edited: z.ZodBoolean;
    deleted: z.ZodBoolean;
    delivered: z.ZodBoolean;
    timestamp: z.ZodString;
    senderProfileId: z.ZodString;
    senderProfileName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    timestamp: string;
    edited: boolean;
    deleted: boolean;
    delivered: boolean;
    senderProfileId: string;
    senderProfileName: string;
    text?: string | null | undefined;
}, {
    id: string;
    timestamp: string;
    edited: boolean;
    deleted: boolean;
    delivered: boolean;
    senderProfileId: string;
    senderProfileName: string;
    text?: string | null | undefined;
}>;
export type LinkedinConversation = z.infer<typeof LinkedinConversation>;
export declare const LinkedinConversation: z.ZodObject<{
    messages: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        text: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        edited: z.ZodBoolean;
        deleted: z.ZodBoolean;
        delivered: z.ZodBoolean;
        timestamp: z.ZodString;
        senderProfileId: z.ZodString;
        senderProfileName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        timestamp: string;
        edited: boolean;
        deleted: boolean;
        delivered: boolean;
        senderProfileId: string;
        senderProfileName: string;
        text?: string | null | undefined;
    }, {
        id: string;
        timestamp: string;
        edited: boolean;
        deleted: boolean;
        delivered: boolean;
        senderProfileId: string;
        senderProfileName: string;
        text?: string | null | undefined;
    }>, "many">;
    id: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
    profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    unreadCount: z.ZodNumber;
    archived: z.ZodBoolean;
    mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
    readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
    subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
    organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
    profiles: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        isSelf: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        isSelf: boolean;
        profileUrl?: string | null | undefined;
    }, {
        id: string;
        name: string;
        isSelf: boolean;
        profileUrl?: string | null | undefined;
    }>, "many">;
    seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: "SINGLE" | "GROUP";
    id: string;
    unreadCount: number;
    archived: boolean;
    readOnly: "0" | "1" | "2";
    profiles: {
        id: string;
        name: string;
        isSelf: boolean;
        profileUrl?: string | null | undefined;
    }[];
    messages: {
        id: string;
        timestamp: string;
        edited: boolean;
        deleted: boolean;
        delivered: boolean;
        senderProfileId: string;
        senderProfileName: string;
        text?: string | null | undefined;
    }[];
    profileId?: string | null | undefined;
    timestamp?: string | null | undefined;
    mutedUntil?: string | number | undefined;
    subject?: string | null | undefined;
    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
    organizationId?: string | null | undefined;
    mailboxId?: string | null | undefined;
    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
    seen?: boolean | null | undefined;
    seenBy?: unknown;
}, {
    type: "SINGLE" | "GROUP";
    id: string;
    unreadCount: number;
    archived: boolean;
    readOnly: "0" | "1" | "2";
    profiles: {
        id: string;
        name: string;
        isSelf: boolean;
        profileUrl?: string | null | undefined;
    }[];
    messages: {
        id: string;
        timestamp: string;
        edited: boolean;
        deleted: boolean;
        delivered: boolean;
        senderProfileId: string;
        senderProfileName: string;
        text?: string | null | undefined;
    }[];
    profileId?: string | null | undefined;
    timestamp?: string | null | undefined;
    mutedUntil?: string | number | undefined;
    subject?: string | null | undefined;
    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
    organizationId?: string | null | undefined;
    mailboxId?: string | null | undefined;
    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
    seen?: boolean | null | undefined;
    seenBy?: unknown;
}>;
export type LinkedinGetConversationResponse = z.infer<typeof LinkedinGetConversationResponse>;
export declare const LinkedinGetConversationResponse: z.ZodObject<{
    conversation: z.ZodObject<{
        messages: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            text: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            edited: z.ZodBoolean;
            deleted: z.ZodBoolean;
            delivered: z.ZodBoolean;
            timestamp: z.ZodString;
            senderProfileId: z.ZodString;
            senderProfileName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }, {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }>, "many">;
        id: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
        profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        unreadCount: z.ZodNumber;
        archived: z.ZodBoolean;
        mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
        readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
        subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
        organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
        profiles: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            isSelf: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }, {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }>, "many">;
        seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        messages: {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    }, {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        messages: {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    conversation: {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        messages: {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    };
}, {
    conversation: {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        messages: {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    };
}>;
export type LinkedinListMessagesResponse = z.infer<typeof LinkedinListMessagesResponse>;
export declare const LinkedinListMessagesResponse: z.ZodObject<{
    conversation: z.ZodObject<{
        messages: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            text: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            edited: z.ZodBoolean;
            deleted: z.ZodBoolean;
            delivered: z.ZodBoolean;
            timestamp: z.ZodString;
            senderProfileId: z.ZodString;
            senderProfileName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }, {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }>, "many">;
        id: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
        profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        unreadCount: z.ZodNumber;
        archived: z.ZodBoolean;
        mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
        readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
        subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
        organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
        profiles: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            isSelf: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }, {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }>, "many">;
        seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        messages: {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    }, {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        messages: {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    conversation: {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        messages: {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    };
}, {
    conversation: {
        type: "SINGLE" | "GROUP";
        id: string;
        unreadCount: number;
        archived: boolean;
        readOnly: "0" | "1" | "2";
        profiles: {
            id: string;
            name: string;
            isSelf: boolean;
            profileUrl?: string | null | undefined;
        }[];
        messages: {
            id: string;
            timestamp: string;
            edited: boolean;
            deleted: boolean;
            delivered: boolean;
            senderProfileId: string;
            senderProfileName: string;
            text?: string | null | undefined;
        }[];
        profileId?: string | null | undefined;
        timestamp?: string | null | undefined;
        mutedUntil?: string | number | undefined;
        subject?: string | null | undefined;
        folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
        organizationId?: string | null | undefined;
        mailboxId?: string | null | undefined;
        contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
        seen?: boolean | null | undefined;
        seenBy?: unknown;
    };
}>;
export type LinkedinCreateConversationResponse = z.infer<typeof LinkedinCreateConversationResponse>;
export declare const LinkedinCreateConversationResponse: z.ZodObject<{
    success: z.ZodBoolean;
    conversationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    conversationId?: string | null | undefined;
}, {
    success: boolean;
    conversationId?: string | null | undefined;
}>;
export type LinkedinProfile = z.infer<typeof LinkedinProfile>;
export declare const LinkedinProfile: z.ZodObject<{
    id: z.ZodString;
    firstName: z.ZodString;
    lastName: z.ZodString;
    headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    publicIdentifier: z.ZodString;
    publicProfileUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    publicIdentifier: string;
    publicProfileUrl: string;
    firstName: string;
    lastName: string;
    headline?: string | null | undefined;
    profilePictureUrl?: string | null | undefined;
}, {
    id: string;
    publicIdentifier: string;
    publicProfileUrl: string;
    firstName: string;
    lastName: string;
    headline?: string | null | undefined;
    profilePictureUrl?: string | null | undefined;
}>;
export type NetworkDistance = z.infer<typeof NetworkDistance>;
export declare const NetworkDistance: z.ZodUnion<[z.ZodLiteral<"DISTANCE_1">, z.ZodLiteral<"DISTANCE_2">, z.ZodLiteral<"DISTANCE_3">, z.ZodLiteral<"OUT_OF_NETWORK">]>;
export type ProfileSearchResult = z.infer<typeof ProfileSearchResult>;
export declare const ProfileSearchResult: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    publicIdentifier: z.ZodString;
    publicProfileUrl: z.ZodString;
    profileUrl: z.ZodString;
    networkDistance: z.ZodUnion<[z.ZodLiteral<"DISTANCE_1">, z.ZodLiteral<"DISTANCE_2">, z.ZodLiteral<"DISTANCE_3">, z.ZodLiteral<"OUT_OF_NETWORK">]>;
    location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    profileUrl: string;
    publicIdentifier: string;
    publicProfileUrl: string;
    networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
    headline?: string | null | undefined;
    profilePictureUrl?: string | null | undefined;
    location?: string | null | undefined;
}, {
    id: string;
    name: string;
    profileUrl: string;
    publicIdentifier: string;
    publicProfileUrl: string;
    networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
    headline?: string | null | undefined;
    profilePictureUrl?: string | null | undefined;
    location?: string | null | undefined;
}>;
export type NetworkDistanceNumber = z.infer<typeof NetworkDistanceNumber>;
export declare const NetworkDistanceNumber: z.ZodUnion<[z.ZodLiteral<"1">, z.ZodLiteral<"2">, z.ZodLiteral<"3">, z.ZodLiteral<"4">]>;
export type LinkedinSearchProfilesResponse = z.infer<typeof LinkedinSearchProfilesResponse>;
export declare const LinkedinSearchProfilesResponse: z.ZodObject<{
    cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    pageCount: z.ZodNumber;
    profiles: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        publicIdentifier: z.ZodString;
        publicProfileUrl: z.ZodString;
        profileUrl: z.ZodString;
        networkDistance: z.ZodUnion<[z.ZodLiteral<"DISTANCE_1">, z.ZodLiteral<"DISTANCE_2">, z.ZodLiteral<"DISTANCE_3">, z.ZodLiteral<"OUT_OF_NETWORK">]>;
        location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        profileUrl: string;
        publicIdentifier: string;
        publicProfileUrl: string;
        networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
        headline?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        location?: string | null | undefined;
    }, {
        id: string;
        name: string;
        profileUrl: string;
        publicIdentifier: string;
        publicProfileUrl: string;
        networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
        headline?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        location?: string | null | undefined;
    }>, "many">;
    totalCount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    profiles: {
        id: string;
        name: string;
        profileUrl: string;
        publicIdentifier: string;
        publicProfileUrl: string;
        networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
        headline?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        location?: string | null | undefined;
    }[];
    pageCount: number;
    totalCount: number;
    cursor?: string | null | undefined;
}, {
    profiles: {
        id: string;
        name: string;
        profileUrl: string;
        publicIdentifier: string;
        publicProfileUrl: string;
        networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
        headline?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        location?: string | null | undefined;
    }[];
    pageCount: number;
    totalCount: number;
    cursor?: string | null | undefined;
}>;
export type Education = z.infer<typeof Education>;
export declare const Education: z.ZodObject<{
    degree: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    school: z.ZodString;
    fieldOfStudy: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    school: string;
    degree?: string | null | undefined;
    fieldOfStudy?: string | null | undefined;
    start?: string | null | undefined;
    end?: string | null | undefined;
}, {
    school: string;
    degree?: string | null | undefined;
    fieldOfStudy?: string | null | undefined;
    start?: string | null | undefined;
    end?: string | null | undefined;
}>;
export type Language = z.infer<typeof Language>;
export declare const Language: z.ZodObject<{
    name: z.ZodString;
    proficiency: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    proficiency?: string | null | undefined;
}, {
    name: string;
    proficiency?: string | null | undefined;
}>;
export type Skill = z.infer<typeof Skill>;
export declare const Skill: z.ZodObject<{
    name: z.ZodString;
    endorsementCount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    name: string;
    endorsementCount: number;
}, {
    name: string;
    endorsementCount: number;
}>;
export type Certification = z.infer<typeof Certification>;
export declare const Certification: z.ZodObject<{
    name: z.ZodString;
    organization: z.ZodString;
    url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    organization: string;
    url?: string | null | undefined;
}, {
    name: string;
    organization: string;
    url?: string | null | undefined;
}>;
export type Social = z.infer<typeof Social>;
export declare const Social: z.ZodObject<{
    type: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    name: string;
}, {
    type: string;
    name: string;
}>;
export type ContactInfo = z.infer<typeof ContactInfo>;
export declare const ContactInfo: z.ZodObject<{
    emails: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
    phones: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
    addresses: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
    socials: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        name: string;
    }, {
        type: string;
        name: string;
    }>, "many">, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    emails?: string[] | null | undefined;
    phones?: string[] | null | undefined;
    addresses?: string[] | null | undefined;
    socials?: {
        type: string;
        name: string;
    }[] | null | undefined;
}, {
    emails?: string[] | null | undefined;
    phones?: string[] | null | undefined;
    addresses?: string[] | null | undefined;
    socials?: {
        type: string;
        name: string;
    }[] | null | undefined;
}>;
export type Birthdate = z.infer<typeof Birthdate>;
export declare const Birthdate: z.ZodObject<{
    month: z.ZodNumber;
    day: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    month: number;
    day: number;
}, {
    month: number;
    day: number;
}>;
export type PrimaryLocale = z.infer<typeof PrimaryLocale>;
export declare const PrimaryLocale: z.ZodObject<{
    country: z.ZodString;
    language: z.ZodString;
}, "strip", z.ZodTypeAny, {
    country: string;
    language: string;
}, {
    country: string;
    language: string;
}>;
export type WorkExperience = z.infer<typeof WorkExperience>;
export declare const WorkExperience: z.ZodObject<{
    position: z.ZodString;
    companyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    company: z.ZodString;
    location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    current: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    status: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    position: string;
    company: string;
    companyId?: string | null | undefined;
    location?: string | null | undefined;
    description?: string | null | undefined;
    current?: boolean | null | undefined;
    status?: string | null | undefined;
    start?: string | null | undefined;
    end?: string | null | undefined;
}, {
    position: string;
    company: string;
    companyId?: string | null | undefined;
    location?: string | null | undefined;
    description?: string | null | undefined;
    current?: boolean | null | undefined;
    status?: string | null | undefined;
    start?: string | null | undefined;
    end?: string | null | undefined;
}>;
export type VolunteeringExperience = z.infer<typeof VolunteeringExperience>;
export declare const VolunteeringExperience: z.ZodObject<{
    company: z.ZodString;
    description: z.ZodString;
    role: z.ZodString;
    cause: z.ZodString;
    start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    company: string;
    description: string;
    role: string;
    cause: string;
    start?: string | null | undefined;
    end?: string | null | undefined;
}, {
    company: string;
    description: string;
    role: string;
    cause: string;
    start?: string | null | undefined;
    end?: string | null | undefined;
}>;
export type LinkedinGetProfileResponse = z.infer<typeof LinkedinGetProfileResponse>;
export declare const LinkedinGetProfileResponse: z.ZodObject<{
    id: z.ZodString;
    firstName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    lastName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    headline: z.ZodString;
    profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    publicIdentifier: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    publicProfileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    summary: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    education: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        degree: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        school: z.ZodString;
        fieldOfStudy: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        school: string;
        degree?: string | null | undefined;
        fieldOfStudy?: string | null | undefined;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }, {
        school: string;
        degree?: string | null | undefined;
        fieldOfStudy?: string | null | undefined;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }>, "many">, z.ZodNull, z.ZodUndefined]>>;
    languages: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        proficiency: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        proficiency?: string | null | undefined;
    }, {
        name: string;
        proficiency?: string | null | undefined;
    }>, "many">, z.ZodNull, z.ZodUndefined]>>;
    skills: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        endorsementCount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: string;
        endorsementCount: number;
    }, {
        name: string;
        endorsementCount: number;
    }>, "many">, z.ZodNull, z.ZodUndefined]>>;
    certifications: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        organization: z.ZodString;
        url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        organization: string;
        url?: string | null | undefined;
    }, {
        name: string;
        organization: string;
        url?: string | null | undefined;
    }>, "many">, z.ZodNull, z.ZodUndefined]>>;
    networkDistance: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"DISTANCE_1">, z.ZodLiteral<"DISTANCE_2">, z.ZodLiteral<"DISTANCE_3">, z.ZodLiteral<"OUT_OF_NETWORK">]>, z.ZodUndefined]>>;
    contactInfo: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        emails: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
        phones: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
        addresses: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
        socials: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            name: string;
        }, {
            type: string;
            name: string;
        }>, "many">, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        emails?: string[] | null | undefined;
        phones?: string[] | null | undefined;
        addresses?: string[] | null | undefined;
        socials?: {
            type: string;
            name: string;
        }[] | null | undefined;
    }, {
        emails?: string[] | null | undefined;
        phones?: string[] | null | undefined;
        addresses?: string[] | null | undefined;
        socials?: {
            type: string;
            name: string;
        }[] | null | undefined;
    }>, z.ZodUndefined]>>;
    websites: z.ZodArray<z.ZodString, "many">;
    birthdate: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        month: z.ZodNumber;
        day: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        month: number;
        day: number;
    }, {
        month: number;
        day: number;
    }>, z.ZodUndefined]>>;
    primaryLocale: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        country: z.ZodString;
        language: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        country: string;
        language: string;
    }, {
        country: string;
        language: string;
    }>, z.ZodUndefined]>>;
    backgroundPictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    hashtags: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
    workExperience: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        position: z.ZodString;
        companyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        company: z.ZodString;
        location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        current: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        status: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        position: string;
        company: string;
        companyId?: string | null | undefined;
        location?: string | null | undefined;
        description?: string | null | undefined;
        current?: boolean | null | undefined;
        status?: string | null | undefined;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }, {
        position: string;
        company: string;
        companyId?: string | null | undefined;
        location?: string | null | undefined;
        description?: string | null | undefined;
        current?: boolean | null | undefined;
        status?: string | null | undefined;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }>, "many">, z.ZodNull, z.ZodUndefined]>>;
    volunteeringExperience: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        company: z.ZodString;
        description: z.ZodString;
        role: z.ZodString;
        cause: z.ZodString;
        start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        company: string;
        description: string;
        role: string;
        cause: string;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }, {
        company: string;
        description: string;
        role: string;
        cause: string;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }>, "many">, z.ZodNull, z.ZodUndefined]>>;
    followerCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    connectionsCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    sharedConnectionsCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    headline: string;
    websites: string[];
    firstName?: string | null | undefined;
    lastName?: string | null | undefined;
    profilePictureUrl?: string | null | undefined;
    publicIdentifier?: string | null | undefined;
    publicProfileUrl?: string | null | undefined;
    location?: string | null | undefined;
    summary?: string | null | undefined;
    education?: {
        school: string;
        degree?: string | null | undefined;
        fieldOfStudy?: string | null | undefined;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }[] | null | undefined;
    languages?: {
        name: string;
        proficiency?: string | null | undefined;
    }[] | null | undefined;
    skills?: {
        name: string;
        endorsementCount: number;
    }[] | null | undefined;
    certifications?: {
        name: string;
        organization: string;
        url?: string | null | undefined;
    }[] | null | undefined;
    networkDistance?: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK" | undefined;
    contactInfo?: {
        emails?: string[] | null | undefined;
        phones?: string[] | null | undefined;
        addresses?: string[] | null | undefined;
        socials?: {
            type: string;
            name: string;
        }[] | null | undefined;
    } | undefined;
    birthdate?: {
        month: number;
        day: number;
    } | undefined;
    primaryLocale?: {
        country: string;
        language: string;
    } | undefined;
    backgroundPictureUrl?: string | null | undefined;
    hashtags?: string[] | null | undefined;
    workExperience?: {
        position: string;
        company: string;
        companyId?: string | null | undefined;
        location?: string | null | undefined;
        description?: string | null | undefined;
        current?: boolean | null | undefined;
        status?: string | null | undefined;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }[] | null | undefined;
    volunteeringExperience?: {
        company: string;
        description: string;
        role: string;
        cause: string;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }[] | null | undefined;
    followerCount?: number | null | undefined;
    connectionsCount?: number | null | undefined;
    sharedConnectionsCount?: number | null | undefined;
}, {
    id: string;
    headline: string;
    websites: string[];
    firstName?: string | null | undefined;
    lastName?: string | null | undefined;
    profilePictureUrl?: string | null | undefined;
    publicIdentifier?: string | null | undefined;
    publicProfileUrl?: string | null | undefined;
    location?: string | null | undefined;
    summary?: string | null | undefined;
    education?: {
        school: string;
        degree?: string | null | undefined;
        fieldOfStudy?: string | null | undefined;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }[] | null | undefined;
    languages?: {
        name: string;
        proficiency?: string | null | undefined;
    }[] | null | undefined;
    skills?: {
        name: string;
        endorsementCount: number;
    }[] | null | undefined;
    certifications?: {
        name: string;
        organization: string;
        url?: string | null | undefined;
    }[] | null | undefined;
    networkDistance?: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK" | undefined;
    contactInfo?: {
        emails?: string[] | null | undefined;
        phones?: string[] | null | undefined;
        addresses?: string[] | null | undefined;
        socials?: {
            type: string;
            name: string;
        }[] | null | undefined;
    } | undefined;
    birthdate?: {
        month: number;
        day: number;
    } | undefined;
    primaryLocale?: {
        country: string;
        language: string;
    } | undefined;
    backgroundPictureUrl?: string | null | undefined;
    hashtags?: string[] | null | undefined;
    workExperience?: {
        position: string;
        company: string;
        companyId?: string | null | undefined;
        location?: string | null | undefined;
        description?: string | null | undefined;
        current?: boolean | null | undefined;
        status?: string | null | undefined;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }[] | null | undefined;
    volunteeringExperience?: {
        company: string;
        description: string;
        role: string;
        cause: string;
        start?: string | null | undefined;
        end?: string | null | undefined;
    }[] | null | undefined;
    followerCount?: number | null | undefined;
    connectionsCount?: number | null | undefined;
    sharedConnectionsCount?: number | null | undefined;
}>;
export type LinkedinSendConnectionRequestBody = z.infer<typeof LinkedinSendConnectionRequestBody>;
export declare const LinkedinSendConnectionRequestBody: z.ZodObject<{
    profileId: z.ZodString;
    appUserId: z.ZodString;
    message: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    profileId: string;
    appUserId: string;
    message?: string | null | undefined;
    appUserPoolId?: string | null | undefined;
}, {
    profileId: string;
    appUserId: string;
    message?: string | null | undefined;
    appUserPoolId?: string | null | undefined;
}>;
export type LinkedinSendConnectionRequestResponse = z.infer<typeof LinkedinSendConnectionRequestResponse>;
export declare const LinkedinSendConnectionRequestResponse: z.ZodObject<{
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
}, {
    success: boolean;
}>;
export type LinkedinSearchProfilesBody = z.infer<typeof LinkedinSearchProfilesBody>;
export declare const LinkedinSearchProfilesBody: z.ZodObject<{
    cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    profileName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    connectionsOf: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    appUserId: z.ZodString;
    networkDistance: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"1">, z.ZodLiteral<"2">, z.ZodLiteral<"3">, z.ZodLiteral<"4">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    cursor?: string | null | undefined;
    profileName?: string | null | undefined;
    connectionsOf?: string | null | undefined;
    networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
    appUserPoolId?: string | null | undefined;
}, {
    appUserId: string;
    cursor?: string | null | undefined;
    profileName?: string | null | undefined;
    connectionsOf?: string | null | undefined;
    networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
    appUserPoolId?: string | null | undefined;
}>;
export type LinkStartEvent = z.infer<typeof LinkStartEvent>;
export declare const LinkStartEvent: z.ZodObject<{
    app: z.ZodString;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    app: string;
}, {
    type: string;
    app: string;
}>;
export type LinkCloseEvent = z.infer<typeof LinkCloseEvent>;
export declare const LinkCloseEvent: z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>;
export type LinkSuccessEvent = z.infer<typeof LinkSuccessEvent>;
export declare const LinkSuccessEvent: z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>;
export type LinkFailedErrorType = z.infer<typeof LinkFailedErrorType>;
export declare const LinkFailedErrorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
export type LinkFailedEvent = z.infer<typeof LinkFailedEvent>;
export declare const LinkFailedEvent: z.ZodObject<{
    type: z.ZodString;
    errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
}, {
    type: string;
    error: string;
    errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
}>;
export type LinkInitialChromeExtensionStatusEvent = z.infer<typeof LinkInitialChromeExtensionStatusEvent>;
export declare const LinkInitialChromeExtensionStatusEvent: z.ZodObject<{
    type: z.ZodString;
    chromeExtensionId: z.ZodString;
    isInitiallyInstalled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: string;
    chromeExtensionId: string;
    isInitiallyInstalled: boolean;
}, {
    type: string;
    chromeExtensionId: string;
    isInitiallyInstalled: boolean;
}>;
export type LinkOpenChromeExtensionPageEvent = z.infer<typeof LinkOpenChromeExtensionPageEvent>;
export declare const LinkOpenChromeExtensionPageEvent: z.ZodObject<{
    type: z.ZodString;
    chromeExtensionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    chromeExtensionId: string;
}, {
    type: string;
    chromeExtensionId: string;
}>;
export type LinkInstalledChromeExtensionEvent = z.infer<typeof LinkInstalledChromeExtensionEvent>;
export declare const LinkInstalledChromeExtensionEvent: z.ZodObject<{
    type: z.ZodString;
    chromeExtensionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    chromeExtensionId: string;
}, {
    type: string;
    chromeExtensionId: string;
}>;
export type LinkOpenAppAuthPageEvent = z.infer<typeof LinkOpenAppAuthPageEvent>;
export declare const LinkOpenAppAuthPageEvent: z.ZodObject<{
    type: z.ZodString;
    app: z.ZodString;
    authUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    app: string;
    authUrl: string;
}, {
    type: string;
    app: string;
    authUrl: string;
}>;
export type LinkEventPayload = z.infer<typeof LinkEventPayload>;
export declare const LinkEventPayload: z.ZodUnion<[z.ZodObject<{
    app: z.ZodString;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    app: string;
}, {
    type: string;
    app: string;
}>, z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>, z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>, z.ZodObject<{
    type: z.ZodString;
    errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
}, {
    type: string;
    error: string;
    errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
}>, z.ZodObject<{
    type: z.ZodString;
    chromeExtensionId: z.ZodString;
    isInitiallyInstalled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: string;
    chromeExtensionId: string;
    isInitiallyInstalled: boolean;
}, {
    type: string;
    chromeExtensionId: string;
    isInitiallyInstalled: boolean;
}>, z.ZodObject<{
    type: z.ZodString;
    chromeExtensionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    chromeExtensionId: string;
}, {
    type: string;
    chromeExtensionId: string;
}>, z.ZodObject<{
    type: z.ZodString;
    chromeExtensionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    chromeExtensionId: string;
}, {
    type: string;
    chromeExtensionId: string;
}>, z.ZodObject<{
    type: z.ZodString;
    app: z.ZodString;
    authUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    app: string;
    authUrl: string;
}, {
    type: string;
    app: string;
    authUrl: string;
}>]>;
export type RuntimeStartEvent = z.infer<typeof RuntimeStartEvent>;
export declare const RuntimeStartEvent: z.ZodObject<{
    type: z.ZodString;
    sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    apps: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: string;
    apps: string[];
    sdkVersion?: string | null | undefined;
}, {
    type: string;
    apps: string[];
    sdkVersion?: string | null | undefined;
}>;
export type RuntimeInjectSessionEvent = z.infer<typeof RuntimeInjectSessionEvent>;
export declare const RuntimeInjectSessionEvent: z.ZodObject<{
    type: z.ZodString;
    anonUserId: z.ZodString;
    apps: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: string;
    apps: string[];
    anonUserId: string;
}, {
    type: string;
    apps: string[];
    anonUserId: string;
}>;
export type RuntimeErrorType = z.infer<typeof RuntimeErrorType>;
export declare const RuntimeErrorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
export type RuntimeSetupFailureEvent = z.infer<typeof RuntimeSetupFailureEvent>;
export declare const RuntimeSetupFailureEvent: z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
    errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorType: "injectSessionError" | "proxyConnectionError";
}, {
    type: string;
    error: string;
    errorType: "injectSessionError" | "proxyConnectionError";
}>;
export type RuntimeExecutionStartEvent = z.infer<typeof RuntimeExecutionStartEvent>;
export declare const RuntimeExecutionStartEvent: z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>;
export type RuntimeExecutionSuccessEvent = z.infer<typeof RuntimeExecutionSuccessEvent>;
export declare const RuntimeExecutionSuccessEvent: z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>;
export type RuntimeExecutionErrorEvent = z.infer<typeof RuntimeExecutionErrorEvent>;
export declare const RuntimeExecutionErrorEvent: z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
    errorStack: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorStack: string;
}, {
    type: string;
    error: string;
    errorStack: string;
}>;
export type RuntimeCreateBrowserEnvironmentErrorEvent = z.infer<typeof RuntimeCreateBrowserEnvironmentErrorEvent>;
export declare const RuntimeCreateBrowserEnvironmentErrorEvent: z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
    errorStack: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorStack: string;
}, {
    type: string;
    error: string;
    errorStack: string;
}>;
export type RuntimeRemoteConnectionErrorEvent = z.infer<typeof RuntimeRemoteConnectionErrorEvent>;
export declare const RuntimeRemoteConnectionErrorEvent: z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
    errorStack: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorStack: string;
}, {
    type: string;
    error: string;
    errorStack: string;
}>;
export type RuntimeCreateBrowserSessionEvent = z.infer<typeof RuntimeCreateBrowserSessionEvent>;
export declare const RuntimeCreateBrowserSessionEvent: z.ZodObject<{
    type: z.ZodString;
    service: z.ZodString;
    sessionId: z.ZodString;
    cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    service: string;
    sessionId: string;
    cdpUrl?: string | null | undefined;
    liveStreamingUrl?: string | null | undefined;
}, {
    type: string;
    service: string;
    sessionId: string;
    cdpUrl?: string | null | undefined;
    liveStreamingUrl?: string | null | undefined;
}>;
export type RuntimeAddedAnonProxyEvent = z.infer<typeof RuntimeAddedAnonProxyEvent>;
export declare const RuntimeAddedAnonProxyEvent: z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>;
export type RuntimePageVisitEvent = z.infer<typeof RuntimePageVisitEvent>;
export declare const RuntimePageVisitEvent: z.ZodObject<{
    type: z.ZodString;
    url: z.ZodString;
    base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    isOnAuthenticatedPage: z.ZodBoolean;
    isLoggedIn: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: string;
    url: string;
    isOnAuthenticatedPage: boolean;
    isLoggedIn: boolean;
    base64ImageUrl?: string | null | undefined;
}, {
    type: string;
    url: string;
    isOnAuthenticatedPage: boolean;
    isLoggedIn: boolean;
    base64ImageUrl?: string | null | undefined;
}>;
export type RuntimeEventPayload = z.infer<typeof RuntimeEventPayload>;
export declare const RuntimeEventPayload: z.ZodUnion<[z.ZodObject<{
    type: z.ZodString;
    sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    apps: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: string;
    apps: string[];
    sdkVersion?: string | null | undefined;
}, {
    type: string;
    apps: string[];
    sdkVersion?: string | null | undefined;
}>, z.ZodObject<{
    type: z.ZodString;
    anonUserId: z.ZodString;
    apps: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: string;
    apps: string[];
    anonUserId: string;
}, {
    type: string;
    apps: string[];
    anonUserId: string;
}>, z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
    errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorType: "injectSessionError" | "proxyConnectionError";
}, {
    type: string;
    error: string;
    errorType: "injectSessionError" | "proxyConnectionError";
}>, z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>, z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>, z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
    errorStack: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorStack: string;
}, {
    type: string;
    error: string;
    errorStack: string;
}>, z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
    errorStack: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorStack: string;
}, {
    type: string;
    error: string;
    errorStack: string;
}>, z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
    errorStack: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    errorStack: string;
}, {
    type: string;
    error: string;
    errorStack: string;
}>, z.ZodObject<{
    type: z.ZodString;
    service: z.ZodString;
    sessionId: z.ZodString;
    cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    service: string;
    sessionId: string;
    cdpUrl?: string | null | undefined;
    liveStreamingUrl?: string | null | undefined;
}, {
    type: string;
    service: string;
    sessionId: string;
    cdpUrl?: string | null | undefined;
    liveStreamingUrl?: string | null | undefined;
}>, z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>, z.ZodObject<{
    type: z.ZodString;
    url: z.ZodString;
    base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    isOnAuthenticatedPage: z.ZodBoolean;
    isLoggedIn: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: string;
    url: string;
    isOnAuthenticatedPage: boolean;
    isLoggedIn: boolean;
    base64ImageUrl?: string | null | undefined;
}, {
    type: string;
    url: string;
    isOnAuthenticatedPage: boolean;
    isLoggedIn: boolean;
    base64ImageUrl?: string | null | undefined;
}>]>;
export type BrowserType = z.infer<typeof BrowserType>;
export declare const BrowserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
export type ActivityType = z.infer<typeof ActivityType>;
export declare const ActivityType: z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>;
export type CreateLinkEvent = z.infer<typeof CreateLinkEvent>;
export declare const CreateLinkEvent: z.ZodObject<{
    activityType: z.ZodString;
    datetime: z.ZodNumber;
    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    data: z.ZodUnion<[z.ZodObject<{
        app: z.ZodString;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        app: string;
    }, {
        type: string;
        app: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    }, {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
        isInitiallyInstalled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    }, {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
    }, {
        type: string;
        chromeExtensionId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
    }, {
        type: string;
        chromeExtensionId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        app: z.ZodString;
        authUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        app: string;
        authUrl: string;
    }, {
        type: string;
        app: string;
        authUrl: string;
    }>]>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    }) & ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    } | undefined);
    activityType: string;
    userId: string;
    datetime: number;
    groupId?: string | null | undefined;
}, {
    data: ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    }) & ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    } | undefined);
    activityType: string;
    userId: string;
    datetime: number;
    groupId?: string | null | undefined;
}>;
export type LinkEvent = z.infer<typeof LinkEvent>;
export declare const LinkEvent: z.ZodObject<{
    activityType: z.ZodString;
    id: z.ZodString;
    groupId: z.ZodString;
    datetime: z.ZodNumber;
    organizationId: z.ZodString;
    organizationName: z.ZodString;
    sdkClientId: z.ZodString;
    sdkClientName: z.ZodString;
    anonAppUserId: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        app: z.ZodString;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        app: string;
    }, {
        type: string;
        app: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    }, {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
        isInitiallyInstalled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    }, {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
    }, {
        type: string;
        chromeExtensionId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
    }, {
        type: string;
        chromeExtensionId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        app: z.ZodString;
        authUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        app: string;
        authUrl: string;
    }, {
        type: string;
        app: string;
        authUrl: string;
    }>]>;
    anonUserId: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    }) & ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    } | undefined);
    id: string;
    groupId: string;
    activityType: string;
    userId: string;
    organizationId: string;
    anonUserId: string;
    datetime: number;
    organizationName: string;
    sdkClientId: string;
    sdkClientName: string;
    anonAppUserId: string;
}, {
    data: ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    }) & ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    } | undefined);
    id: string;
    groupId: string;
    activityType: string;
    userId: string;
    organizationId: string;
    anonUserId: string;
    datetime: number;
    organizationName: string;
    sdkClientId: string;
    sdkClientName: string;
    anonAppUserId: string;
}>;
export type CreateRuntimeEvent = z.infer<typeof CreateRuntimeEvent>;
export declare const CreateRuntimeEvent: z.ZodObject<{
    activityType: z.ZodString;
    browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
    datetime: z.ZodNumber;
    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        apps: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    }, {
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
        anonUserId: z.ZodString;
        apps: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: string;
        apps: string[];
        anonUserId: string;
    }, {
        type: string;
        apps: string[];
        anonUserId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    }, {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        service: z.ZodString;
        sessionId: z.ZodString;
        cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    }, {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        url: z.ZodString;
        base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        isOnAuthenticatedPage: z.ZodBoolean;
        isLoggedIn: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }, {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }>]>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }) & ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    } | undefined);
    activityType: string;
    userId: string;
    datetime: number;
    browserType: "local" | "managed" | "remote";
    groupId?: string | null | undefined;
}, {
    data: ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }) & ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    } | undefined);
    activityType: string;
    userId: string;
    datetime: number;
    browserType: "local" | "managed" | "remote";
    groupId?: string | null | undefined;
}>;
export type RuntimeEvent = z.infer<typeof RuntimeEvent>;
export declare const RuntimeEvent: z.ZodObject<{
    activityType: z.ZodString;
    browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
    id: z.ZodString;
    groupId: z.ZodString;
    datetime: z.ZodNumber;
    organizationId: z.ZodString;
    organizationName: z.ZodString;
    sdkClientId: z.ZodString;
    sdkClientName: z.ZodString;
    anonAppUserId: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        apps: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    }, {
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
        anonUserId: z.ZodString;
        apps: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: string;
        apps: string[];
        anonUserId: string;
    }, {
        type: string;
        apps: string[];
        anonUserId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    }, {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        service: z.ZodString;
        sessionId: z.ZodString;
        cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    }, {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        url: z.ZodString;
        base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        isOnAuthenticatedPage: z.ZodBoolean;
        isLoggedIn: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }, {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }>]>;
    anonUserId: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }) & ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    } | undefined);
    id: string;
    groupId: string;
    activityType: string;
    userId: string;
    organizationId: string;
    anonUserId: string;
    datetime: number;
    organizationName: string;
    sdkClientId: string;
    sdkClientName: string;
    anonAppUserId: string;
    browserType: "local" | "managed" | "remote";
}, {
    data: ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }) & ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    } | undefined);
    id: string;
    groupId: string;
    activityType: string;
    userId: string;
    organizationId: string;
    anonUserId: string;
    datetime: number;
    organizationName: string;
    sdkClientId: string;
    sdkClientName: string;
    anonAppUserId: string;
    browserType: "local" | "managed" | "remote";
}>;
export type Event = z.infer<typeof Event>;
export declare const Event: z.ZodUnion<[z.ZodObject<{
    activityType: z.ZodString;
    id: z.ZodString;
    groupId: z.ZodString;
    datetime: z.ZodNumber;
    organizationId: z.ZodString;
    organizationName: z.ZodString;
    sdkClientId: z.ZodString;
    sdkClientName: z.ZodString;
    anonAppUserId: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        app: z.ZodString;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        app: string;
    }, {
        type: string;
        app: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    }, {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
        isInitiallyInstalled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    }, {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
    }, {
        type: string;
        chromeExtensionId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
    }, {
        type: string;
        chromeExtensionId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        app: z.ZodString;
        authUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        app: string;
        authUrl: string;
    }, {
        type: string;
        app: string;
        authUrl: string;
    }>]>;
    anonUserId: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    }) & ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    } | undefined);
    id: string;
    groupId: string;
    activityType: string;
    userId: string;
    organizationId: string;
    anonUserId: string;
    datetime: number;
    organizationName: string;
    sdkClientId: string;
    sdkClientName: string;
    anonAppUserId: string;
}, {
    data: ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    }) & ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    } | undefined);
    id: string;
    groupId: string;
    activityType: string;
    userId: string;
    organizationId: string;
    anonUserId: string;
    datetime: number;
    organizationName: string;
    sdkClientId: string;
    sdkClientName: string;
    anonAppUserId: string;
}>, z.ZodObject<{
    activityType: z.ZodString;
    browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
    id: z.ZodString;
    groupId: z.ZodString;
    datetime: z.ZodNumber;
    organizationId: z.ZodString;
    organizationName: z.ZodString;
    sdkClientId: z.ZodString;
    sdkClientName: z.ZodString;
    anonAppUserId: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        apps: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    }, {
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
        anonUserId: z.ZodString;
        apps: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: string;
        apps: string[];
        anonUserId: string;
    }, {
        type: string;
        apps: string[];
        anonUserId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    }, {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        service: z.ZodString;
        sessionId: z.ZodString;
        cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    }, {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        url: z.ZodString;
        base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        isOnAuthenticatedPage: z.ZodBoolean;
        isLoggedIn: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }, {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }>]>;
    anonUserId: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }) & ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    } | undefined);
    id: string;
    groupId: string;
    activityType: string;
    userId: string;
    organizationId: string;
    anonUserId: string;
    datetime: number;
    organizationName: string;
    sdkClientId: string;
    sdkClientName: string;
    anonAppUserId: string;
    browserType: "local" | "managed" | "remote";
}, {
    data: ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }) & ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    } | undefined);
    id: string;
    groupId: string;
    activityType: string;
    userId: string;
    organizationId: string;
    anonUserId: string;
    datetime: number;
    organizationName: string;
    sdkClientId: string;
    sdkClientName: string;
    anonAppUserId: string;
    browserType: "local" | "managed" | "remote";
}>]>;
export type CreateEventRequestBody = z.infer<typeof CreateEventRequestBody>;
export declare const CreateEventRequestBody: z.ZodUnion<[z.ZodObject<{
    activityType: z.ZodString;
    datetime: z.ZodNumber;
    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    data: z.ZodUnion<[z.ZodObject<{
        app: z.ZodString;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        app: string;
    }, {
        type: string;
        app: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    }, {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
        isInitiallyInstalled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    }, {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
    }, {
        type: string;
        chromeExtensionId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        chromeExtensionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        chromeExtensionId: string;
    }, {
        type: string;
        chromeExtensionId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        app: z.ZodString;
        authUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        app: string;
        authUrl: string;
    }, {
        type: string;
        app: string;
        authUrl: string;
    }>]>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    }) & ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    } | undefined);
    activityType: string;
    userId: string;
    datetime: number;
    groupId?: string | null | undefined;
}, {
    data: ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    }) & ({
        type: string;
        app: string;
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
    } | {
        type: string;
        chromeExtensionId: string;
        isInitiallyInstalled: boolean;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        chromeExtensionId: string;
    } | {
        type: string;
        app: string;
        authUrl: string;
    } | undefined);
    activityType: string;
    userId: string;
    datetime: number;
    groupId?: string | null | undefined;
}>, z.ZodObject<{
    activityType: z.ZodString;
    browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
    datetime: z.ZodNumber;
    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        apps: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    }, {
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
        anonUserId: z.ZodString;
        apps: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: string;
        apps: string[];
        anonUserId: string;
    }, {
        type: string;
        apps: string[];
        anonUserId: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    }, {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
        errorStack: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        errorStack: string;
    }, {
        type: string;
        error: string;
        errorStack: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        service: z.ZodString;
        sessionId: z.ZodString;
        cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    }, {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        url: z.ZodString;
        base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        isOnAuthenticatedPage: z.ZodBoolean;
        isLoggedIn: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }, {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }>]>;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }) & ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    } | undefined);
    activityType: string;
    userId: string;
    datetime: number;
    browserType: "local" | "managed" | "remote";
    groupId?: string | null | undefined;
}, {
    data: ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    }) & ({
        type: string;
        apps: string[];
        sdkVersion?: string | null | undefined;
    } | {
        type: string;
        apps: string[];
        anonUserId: string;
    } | {
        type: string;
        error: string;
        errorType: "injectSessionError" | "proxyConnectionError";
    } | {
        type: string;
    } | {
        type: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        error: string;
        errorStack: string;
    } | {
        type: string;
        service: string;
        sessionId: string;
        cdpUrl?: string | null | undefined;
        liveStreamingUrl?: string | null | undefined;
    } | {
        type: string;
    } | {
        type: string;
        url: string;
        isOnAuthenticatedPage: boolean;
        isLoggedIn: boolean;
        base64ImageUrl?: string | null | undefined;
    } | undefined);
    activityType: string;
    userId: string;
    datetime: number;
    browserType: "local" | "managed" | "remote";
    groupId?: string | null | undefined;
}>]>;
export type ActivityEventList = z.infer<typeof ActivityEventList>;
export declare const ActivityEventList: z.ZodObject<{
    events: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        activityType: z.ZodString;
        id: z.ZodString;
        groupId: z.ZodString;
        datetime: z.ZodNumber;
        organizationId: z.ZodString;
        organizationName: z.ZodString;
        sdkClientId: z.ZodString;
        sdkClientName: z.ZodString;
        anonAppUserId: z.ZodString;
        data: z.ZodUnion<[z.ZodObject<{
            app: z.ZodString;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            app: string;
        }, {
            type: string;
            app: string;
        }>, z.ZodObject<{
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
        }, {
            type: string;
        }>, z.ZodObject<{
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
        }, {
            type: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
            error: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        }, {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        }>, z.ZodObject<{
            type: z.ZodString;
            chromeExtensionId: z.ZodString;
            isInitiallyInstalled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        }, {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        }>, z.ZodObject<{
            type: z.ZodString;
            chromeExtensionId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            chromeExtensionId: string;
        }, {
            type: string;
            chromeExtensionId: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            chromeExtensionId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            chromeExtensionId: string;
        }, {
            type: string;
            chromeExtensionId: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            app: z.ZodString;
            authUrl: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            app: string;
            authUrl: string;
        }, {
            type: string;
            app: string;
            authUrl: string;
        }>]>;
        anonUserId: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: ({
            type: string;
            app: string;
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        } | {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            app: string;
            authUrl: string;
        }) & ({
            type: string;
            app: string;
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        } | {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            app: string;
            authUrl: string;
        } | undefined);
        id: string;
        groupId: string;
        activityType: string;
        userId: string;
        organizationId: string;
        anonUserId: string;
        datetime: number;
        organizationName: string;
        sdkClientId: string;
        sdkClientName: string;
        anonAppUserId: string;
    }, {
        data: ({
            type: string;
            app: string;
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        } | {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            app: string;
            authUrl: string;
        }) & ({
            type: string;
            app: string;
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        } | {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            app: string;
            authUrl: string;
        } | undefined);
        id: string;
        groupId: string;
        activityType: string;
        userId: string;
        organizationId: string;
        anonUserId: string;
        datetime: number;
        organizationName: string;
        sdkClientId: string;
        sdkClientName: string;
        anonAppUserId: string;
    }>, z.ZodObject<{
        activityType: z.ZodString;
        browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
        id: z.ZodString;
        groupId: z.ZodString;
        datetime: z.ZodNumber;
        organizationId: z.ZodString;
        organizationName: z.ZodString;
        sdkClientId: z.ZodString;
        sdkClientName: z.ZodString;
        anonAppUserId: z.ZodString;
        data: z.ZodUnion<[z.ZodObject<{
            type: z.ZodString;
            sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            apps: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        }, {
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodString;
            anonUserId: z.ZodString;
            apps: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            type: string;
            apps: string[];
            anonUserId: string;
        }, {
            type: string;
            apps: string[];
            anonUserId: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            error: z.ZodString;
            errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        }, {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        }>, z.ZodObject<{
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
        }, {
            type: string;
        }>, z.ZodObject<{
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
        }, {
            type: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            error: z.ZodString;
            errorStack: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            error: string;
            errorStack: string;
        }, {
            type: string;
            error: string;
            errorStack: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            error: z.ZodString;
            errorStack: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            error: string;
            errorStack: string;
        }, {
            type: string;
            error: string;
            errorStack: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            error: z.ZodString;
            errorStack: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            error: string;
            errorStack: string;
        }, {
            type: string;
            error: string;
            errorStack: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            service: z.ZodString;
            sessionId: z.ZodString;
            cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        }, {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
        }, {
            type: string;
        }>, z.ZodObject<{
            type: z.ZodString;
            url: z.ZodString;
            base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            isOnAuthenticatedPage: z.ZodBoolean;
            isLoggedIn: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        }, {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        }>]>;
        anonUserId: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: ({
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        } | {
            type: string;
            apps: string[];
            anonUserId: string;
        } | {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        } | {
            type: string;
        } | {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        }) & ({
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        } | {
            type: string;
            apps: string[];
            anonUserId: string;
        } | {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        } | {
            type: string;
        } | {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        } | undefined);
        id: string;
        groupId: string;
        activityType: string;
        userId: string;
        organizationId: string;
        anonUserId: string;
        datetime: number;
        organizationName: string;
        sdkClientId: string;
        sdkClientName: string;
        anonAppUserId: string;
        browserType: "local" | "managed" | "remote";
    }, {
        data: ({
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        } | {
            type: string;
            apps: string[];
            anonUserId: string;
        } | {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        } | {
            type: string;
        } | {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        }) & ({
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        } | {
            type: string;
            apps: string[];
            anonUserId: string;
        } | {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        } | {
            type: string;
        } | {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        } | undefined);
        id: string;
        groupId: string;
        activityType: string;
        userId: string;
        organizationId: string;
        anonUserId: string;
        datetime: number;
        organizationName: string;
        sdkClientId: string;
        sdkClientName: string;
        anonAppUserId: string;
        browserType: "local" | "managed" | "remote";
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    events: ({
        data: ({
            type: string;
            app: string;
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        } | {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            app: string;
            authUrl: string;
        }) & ({
            type: string;
            app: string;
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        } | {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            app: string;
            authUrl: string;
        } | undefined);
        id: string;
        groupId: string;
        activityType: string;
        userId: string;
        organizationId: string;
        anonUserId: string;
        datetime: number;
        organizationName: string;
        sdkClientId: string;
        sdkClientName: string;
        anonAppUserId: string;
    } | {
        data: ({
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        } | {
            type: string;
            apps: string[];
            anonUserId: string;
        } | {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        } | {
            type: string;
        } | {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        }) & ({
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        } | {
            type: string;
            apps: string[];
            anonUserId: string;
        } | {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        } | {
            type: string;
        } | {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        } | undefined);
        id: string;
        groupId: string;
        activityType: string;
        userId: string;
        organizationId: string;
        anonUserId: string;
        datetime: number;
        organizationName: string;
        sdkClientId: string;
        sdkClientName: string;
        anonAppUserId: string;
        browserType: "local" | "managed" | "remote";
    })[];
}, {
    events: ({
        data: ({
            type: string;
            app: string;
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        } | {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            app: string;
            authUrl: string;
        }) & ({
            type: string;
            app: string;
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
        } | {
            type: string;
            chromeExtensionId: string;
            isInitiallyInstalled: boolean;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            chromeExtensionId: string;
        } | {
            type: string;
            app: string;
            authUrl: string;
        } | undefined);
        id: string;
        groupId: string;
        activityType: string;
        userId: string;
        organizationId: string;
        anonUserId: string;
        datetime: number;
        organizationName: string;
        sdkClientId: string;
        sdkClientName: string;
        anonAppUserId: string;
    } | {
        data: ({
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        } | {
            type: string;
            apps: string[];
            anonUserId: string;
        } | {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        } | {
            type: string;
        } | {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        }) & ({
            type: string;
            apps: string[];
            sdkVersion?: string | null | undefined;
        } | {
            type: string;
            apps: string[];
            anonUserId: string;
        } | {
            type: string;
            error: string;
            errorType: "injectSessionError" | "proxyConnectionError";
        } | {
            type: string;
        } | {
            type: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            error: string;
            errorStack: string;
        } | {
            type: string;
            service: string;
            sessionId: string;
            cdpUrl?: string | null | undefined;
            liveStreamingUrl?: string | null | undefined;
        } | {
            type: string;
        } | {
            type: string;
            url: string;
            isOnAuthenticatedPage: boolean;
            isLoggedIn: boolean;
            base64ImageUrl?: string | null | undefined;
        } | undefined);
        id: string;
        groupId: string;
        activityType: string;
        userId: string;
        organizationId: string;
        anonUserId: string;
        datetime: number;
        organizationName: string;
        sdkClientId: string;
        sdkClientName: string;
        anonAppUserId: string;
        browserType: "local" | "managed" | "remote";
    })[];
}>;
export type CreateEventResponseSuccess = z.infer<typeof CreateEventResponseSuccess>;
export declare const CreateEventResponseSuccess: z.ZodObject<{
    type: z.ZodString;
    groupId: z.ZodString;
    id: z.ZodString;
    activityType: z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>;
}, "strip", z.ZodTypeAny, {
    type: string;
    id: string;
    groupId: string;
    activityType: "Link" | "runtime";
}, {
    type: string;
    id: string;
    groupId: string;
    activityType: "Link" | "runtime";
}>;
export type CreateEventResponseFailure = z.infer<typeof CreateEventResponseFailure>;
export declare const CreateEventResponseFailure: z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
}, {
    type: string;
    error: string;
}>;
export type CreateEventResponse = z.infer<typeof CreateEventResponse>;
export declare const CreateEventResponse: z.ZodUnion<[z.ZodObject<{
    type: z.ZodString;
    groupId: z.ZodString;
    id: z.ZodString;
    activityType: z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>;
}, "strip", z.ZodTypeAny, {
    type: string;
    id: string;
    groupId: string;
    activityType: "Link" | "runtime";
}, {
    type: string;
    id: string;
    groupId: string;
    activityType: "Link" | "runtime";
}>, z.ZodObject<{
    type: z.ZodString;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
}, {
    type: string;
    error: string;
}>]>;
export type ListAppIntegrationsResponseItem = z.infer<typeof ListAppIntegrationsResponseItem>;
export declare const ListAppIntegrationsResponseItem: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    iconUrl: z.ZodString;
    experimental: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    domains: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    iconUrl: string;
    name: string;
    domains: string[];
    experimental?: boolean | null | undefined;
}, {
    id: string;
    iconUrl: string;
    name: string;
    domains: string[];
    experimental?: boolean | null | undefined;
}>;
export type ListAppIntegrationsResponse = z.infer<typeof ListAppIntegrationsResponse>;
export declare const ListAppIntegrationsResponse: z.ZodObject<{
    apps: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        iconUrl: z.ZodString;
        experimental: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        domains: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        id: string;
        iconUrl: string;
        name: string;
        domains: string[];
        experimental?: boolean | null | undefined;
    }, {
        id: string;
        iconUrl: string;
        name: string;
        domains: string[];
        experimental?: boolean | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    apps: {
        id: string;
        iconUrl: string;
        name: string;
        domains: string[];
        experimental?: boolean | null | undefined;
    }[];
}, {
    apps: {
        id: string;
        iconUrl: string;
        name: string;
        domains: string[];
        experimental?: boolean | null | undefined;
    }[];
}>;
export type UserPoolId = z.infer<typeof UserPoolId>;
export declare const UserPoolId: z.ZodString;
export type CreateAppUserIdTokenWithUserPool = z.infer<typeof CreateAppUserIdTokenWithUserPool>;
export declare const CreateAppUserIdTokenWithUserPool: z.ZodObject<{
    userPoolId: z.ZodString;
    appUserId: z.ZodString;
    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    userPoolId: string;
    exp?: number | null | undefined;
}, {
    appUserId: string;
    userPoolId: string;
    exp?: number | null | undefined;
}>;
export type SdkClientId = z.infer<typeof SdkClientId>;
export declare const SdkClientId: z.ZodString;
export type CreateAppUserIdTokenWithSdkClient = z.infer<typeof CreateAppUserIdTokenWithSdkClient>;
export declare const CreateAppUserIdTokenWithSdkClient: z.ZodObject<{
    sdkClientId: z.ZodString;
    appUserId: z.ZodString;
    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    sdkClientId: string;
    exp?: number | null | undefined;
}, {
    appUserId: string;
    sdkClientId: string;
    exp?: number | null | undefined;
}>;
export type CreateAppUserIdTokenWithDefault = z.infer<typeof CreateAppUserIdTokenWithDefault>;
export declare const CreateAppUserIdTokenWithDefault: z.ZodObject<{
    appUserId: z.ZodString;
    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    exp?: number | null | undefined;
}, {
    appUserId: string;
    exp?: number | null | undefined;
}>;
export type CreateAppUserIdToken = z.infer<typeof CreateAppUserIdToken>;
export declare const CreateAppUserIdToken: z.ZodUnion<[z.ZodObject<{
    appUserId: z.ZodString;
    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    exp?: number | null | undefined;
}, {
    appUserId: string;
    exp?: number | null | undefined;
}>, z.ZodObject<{
    sdkClientId: z.ZodString;
    appUserId: z.ZodString;
    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    sdkClientId: string;
    exp?: number | null | undefined;
}, {
    appUserId: string;
    sdkClientId: string;
    exp?: number | null | undefined;
}>, z.ZodObject<{
    userPoolId: z.ZodString;
    appUserId: z.ZodString;
    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    userPoolId: string;
    exp?: number | null | undefined;
}, {
    appUserId: string;
    userPoolId: string;
    exp?: number | null | undefined;
}>]>;
export type AppUserIdToken = z.infer<typeof AppUserIdToken>;
export declare const AppUserIdToken: z.ZodObject<{
    appUserIdToken: z.ZodString;
}, "strip", z.ZodTypeAny, {
    appUserIdToken: string;
}, {
    appUserIdToken: string;
}>;
export type MissingFieldErrorType = z.infer<typeof MissingFieldErrorType>;
export declare const MissingFieldErrorType: z.ZodObject<{
    field: z.ZodString;
}, "strip", z.ZodTypeAny, {
    field: string;
}, {
    field: string;
}>;
export type CreateLinkUrlResponse = z.infer<typeof CreateLinkUrlResponse>;
export declare const CreateLinkUrlResponse: z.ZodObject<{
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
}, {
    url: string;
}>;
export type LinkApp = z.infer<typeof LinkApp>;
export declare const LinkApp: z.ZodUnion<[z.ZodLiteral<"rippling">, z.ZodLiteral<"gusto">]>;
export type BrowserProvider = z.infer<typeof BrowserProvider>;
export declare const BrowserProvider: z.ZodUnion<[z.ZodLiteral<"browserbase">, z.ZodLiteral<"rebrowser">, z.ZodLiteral<"undetect">]>;
export type InitiateLinkRequest = z.infer<typeof InitiateLinkRequest>;
export declare const InitiateLinkRequest: z.ZodObject<{
    app: z.ZodUnion<[z.ZodLiteral<"rippling">, z.ZodLiteral<"gusto">]>;
    appUserId: z.ZodString;
    provider: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"browserbase">, z.ZodLiteral<"rebrowser">, z.ZodLiteral<"undetect">]>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    app: "rippling" | "gusto";
    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
}, {
    appUserId: string;
    app: "rippling" | "gusto";
    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
}>;
export type LinkResponseSuccess = z.infer<typeof LinkResponseSuccess>;
export declare const LinkResponseSuccess: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export type LinkResponseFailure = z.infer<typeof LinkResponseFailure>;
export declare const LinkResponseFailure: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export type EmailSchema = z.infer<typeof EmailSchema>;
export declare const EmailSchema: z.ZodObject<{
    description: z.ZodString;
}, "strip", z.ZodTypeAny, {
    description: string;
}, {
    description: string;
}>;
export type PasswordSchema = z.infer<typeof PasswordSchema>;
export declare const PasswordSchema: z.ZodObject<{
    description: z.ZodString;
    sensitive: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    description: string;
    sensitive: boolean;
}, {
    description: string;
    sensitive: boolean;
}>;
export type MfaSchema = z.infer<typeof MfaSchema>;
export declare const MfaSchema: z.ZodObject<{
    description: z.ZodString;
}, "strip", z.ZodTypeAny, {
    description: string;
}, {
    description: string;
}>;
export type LinkResponseSchema = z.infer<typeof LinkResponseSchema>;
export declare const LinkResponseSchema: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
    label: z.ZodOptional<z.ZodLiteral<"email">>;
}, "strip", z.ZodTypeAny, {
    label?: "email" | undefined;
}, {
    label?: "email" | undefined;
}>, z.ZodObject<{
    description: z.ZodString;
}, "strip", z.ZodTypeAny, {
    description: string;
}, {
    description: string;
}>>, z.ZodIntersection<z.ZodObject<{
    label: z.ZodOptional<z.ZodLiteral<"password">>;
}, "strip", z.ZodTypeAny, {
    label?: "password" | undefined;
}, {
    label?: "password" | undefined;
}>, z.ZodObject<{
    description: z.ZodString;
    sensitive: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    description: string;
    sensitive: boolean;
}, {
    description: string;
    sensitive: boolean;
}>>, z.ZodIntersection<z.ZodObject<{
    label: z.ZodOptional<z.ZodLiteral<"mfa">>;
}, "strip", z.ZodTypeAny, {
    label?: "mfa" | undefined;
}, {
    label?: "mfa" | undefined;
}>, z.ZodObject<{
    description: z.ZodString;
}, "strip", z.ZodTypeAny, {
    description: string;
}, {
    description: string;
}>>]>;
export type HttpMethod = z.infer<typeof HttpMethod>;
export declare const HttpMethod: z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"PATCH">]>;
export type LinkResponseInProgress = z.infer<typeof LinkResponseInProgress>;
export declare const LinkResponseInProgress: z.ZodObject<{
    schema: z.ZodArray<z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
        label: z.ZodOptional<z.ZodLiteral<"email">>;
    }, "strip", z.ZodTypeAny, {
        label?: "email" | undefined;
    }, {
        label?: "email" | undefined;
    }>, z.ZodObject<{
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        description: string;
    }, {
        description: string;
    }>>, z.ZodIntersection<z.ZodObject<{
        label: z.ZodOptional<z.ZodLiteral<"password">>;
    }, "strip", z.ZodTypeAny, {
        label?: "password" | undefined;
    }, {
        label?: "password" | undefined;
    }>, z.ZodObject<{
        description: z.ZodString;
        sensitive: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        description: string;
        sensitive: boolean;
    }, {
        description: string;
        sensitive: boolean;
    }>>, z.ZodIntersection<z.ZodObject<{
        label: z.ZodOptional<z.ZodLiteral<"mfa">>;
    }, "strip", z.ZodTypeAny, {
        label?: "mfa" | undefined;
    }, {
        label?: "mfa" | undefined;
    }>, z.ZodObject<{
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        description: string;
    }, {
        description: string;
    }>>]>, "many">;
    url: z.ZodString;
    method: z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"PATCH">]>;
    linkId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
    url: string;
    schema: (({
        label?: "email" | undefined;
    } & {
        description: string;
    }) | ({
        label?: "password" | undefined;
    } & {
        description: string;
        sensitive: boolean;
    }) | ({
        label?: "mfa" | undefined;
    } & {
        description: string;
    }))[];
    linkId: string;
}, {
    method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
    url: string;
    schema: (({
        label?: "email" | undefined;
    } & {
        description: string;
    }) | ({
        label?: "password" | undefined;
    } & {
        description: string;
        sensitive: boolean;
    }) | ({
        label?: "mfa" | undefined;
    } & {
        description: string;
    }))[];
    linkId: string;
}>;
export type LinkResponse = z.infer<typeof LinkResponse>;
export declare const LinkResponse: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
    status: z.ZodOptional<z.ZodLiteral<"SUCCESS">>;
}, "strip", z.ZodTypeAny, {
    status?: "SUCCESS" | undefined;
}, {
    status?: "SUCCESS" | undefined;
}>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
    status: z.ZodOptional<z.ZodLiteral<"FAILURE">>;
}, "strip", z.ZodTypeAny, {
    status?: "FAILURE" | undefined;
}, {
    status?: "FAILURE" | undefined;
}>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
    status: z.ZodOptional<z.ZodLiteral<"IN_PROGRESS">>;
}, "strip", z.ZodTypeAny, {
    status?: "IN_PROGRESS" | undefined;
}, {
    status?: "IN_PROGRESS" | undefined;
}>, z.ZodObject<{
    schema: z.ZodArray<z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
        label: z.ZodOptional<z.ZodLiteral<"email">>;
    }, "strip", z.ZodTypeAny, {
        label?: "email" | undefined;
    }, {
        label?: "email" | undefined;
    }>, z.ZodObject<{
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        description: string;
    }, {
        description: string;
    }>>, z.ZodIntersection<z.ZodObject<{
        label: z.ZodOptional<z.ZodLiteral<"password">>;
    }, "strip", z.ZodTypeAny, {
        label?: "password" | undefined;
    }, {
        label?: "password" | undefined;
    }>, z.ZodObject<{
        description: z.ZodString;
        sensitive: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        description: string;
        sensitive: boolean;
    }, {
        description: string;
        sensitive: boolean;
    }>>, z.ZodIntersection<z.ZodObject<{
        label: z.ZodOptional<z.ZodLiteral<"mfa">>;
    }, "strip", z.ZodTypeAny, {
        label?: "mfa" | undefined;
    }, {
        label?: "mfa" | undefined;
    }>, z.ZodObject<{
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        description: string;
    }, {
        description: string;
    }>>]>, "many">;
    url: z.ZodString;
    method: z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"PATCH">]>;
    linkId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
    url: string;
    schema: (({
        label?: "email" | undefined;
    } & {
        description: string;
    }) | ({
        label?: "password" | undefined;
    } & {
        description: string;
        sensitive: boolean;
    }) | ({
        label?: "mfa" | undefined;
    } & {
        description: string;
    }))[];
    linkId: string;
}, {
    method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
    url: string;
    schema: (({
        label?: "email" | undefined;
    } & {
        description: string;
    }) | ({
        label?: "password" | undefined;
    } & {
        description: string;
        sensitive: boolean;
    }) | ({
        label?: "mfa" | undefined;
    } & {
        description: string;
    }))[];
    linkId: string;
}>>]>;
export type ContinueLinkRequestEmailPassword = z.infer<typeof ContinueLinkRequestEmailPassword>;
export declare const ContinueLinkRequestEmailPassword: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    password: string;
    email: string;
}, {
    password: string;
    email: string;
}>;
export type ContinueLinkRequestMfa = z.infer<typeof ContinueLinkRequestMfa>;
export declare const ContinueLinkRequestMfa: z.ZodObject<{
    mfa: z.ZodString;
}, "strip", z.ZodTypeAny, {
    mfa: string;
}, {
    mfa: string;
}>;
export type ContinueLinkRequest = z.infer<typeof ContinueLinkRequest>;
export declare const ContinueLinkRequest: z.ZodUnion<[z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    password: string;
    email: string;
}, {
    password: string;
    email: string;
}>, z.ZodObject<{
    mfa: z.ZodString;
}, "strip", z.ZodTypeAny, {
    mfa: string;
}, {
    mfa: string;
}>]>;
export type MemberRole = z.infer<typeof MemberRole>;
export declare const MemberRole: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
export type CreateMember = z.infer<typeof CreateMember>;
export declare const CreateMember: z.ZodObject<{
    name: z.ZodString;
    email: z.ZodString;
    password: z.ZodString;
    role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    password: string;
    email: string;
    name: string;
    role: string;
}, {
    password: string;
    email: string;
    name: string;
    role: string;
}>;
export type MemberId = z.infer<typeof MemberId>;
export declare const MemberId: z.ZodString;
export type OrganizationId = z.infer<typeof OrganizationId>;
export declare const OrganizationId: z.ZodString;
export type Member = z.infer<typeof Member>;
export declare const Member: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    email: z.ZodString;
    organizationId: z.ZodString;
    role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    email: string;
    id: string;
    name: string;
    organizationId: string;
    role: string;
}, {
    email: string;
    id: string;
    name: string;
    organizationId: string;
    role: string;
}>;
export type LoginMember = z.infer<typeof LoginMember>;
export declare const LoginMember: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    password: string;
    email: string;
}, {
    password: string;
    email: string;
}>;
export type LoginSession = z.infer<typeof LoginSession>;
export declare const LoginSession: z.ZodObject<{
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    token: string;
}, {
    token: string;
}>;
export type MemberListItem = z.infer<typeof MemberListItem>;
export declare const MemberListItem: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    email: z.ZodString;
    role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    email: string;
    id: string;
    name: string;
    createdAt: string;
    role: string;
}, {
    email: string;
    id: string;
    name: string;
    createdAt: string;
    role: string;
}>;
export type MemberList = z.infer<typeof MemberList>;
export declare const MemberList: z.ZodObject<{
    resource: z.ZodString;
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        email: z.ZodString;
        role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
        createdAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        email: string;
        id: string;
        name: string;
        createdAt: string;
        role: string;
    }, {
        email: string;
        id: string;
        name: string;
        createdAt: string;
        role: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    resource: string;
    items: {
        email: string;
        id: string;
        name: string;
        createdAt: string;
        role: string;
    }[];
}, {
    resource: string;
    items: {
        email: string;
        id: string;
        name: string;
        createdAt: string;
        role: string;
    }[];
}>;
export type CreateOrganizationMember = z.infer<typeof CreateOrganizationMember>;
export declare const CreateOrganizationMember: z.ZodObject<{
    name: z.ZodString;
    email: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    password: string;
    email: string;
    name: string;
}, {
    password: string;
    email: string;
    name: string;
}>;
export type CreateOrganization = z.infer<typeof CreateOrganization>;
export declare const CreateOrganization: z.ZodObject<{
    name: z.ZodString;
    member: z.ZodObject<{
        name: z.ZodString;
        email: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        password: string;
        email: string;
        name: string;
    }, {
        password: string;
        email: string;
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    member: {
        password: string;
        email: string;
        name: string;
    };
}, {
    name: string;
    member: {
        password: string;
        email: string;
        name: string;
    };
}>;
export type Organization = z.infer<typeof Organization>;
export declare const Organization: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    members: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        email: z.ZodString;
        organizationId: z.ZodString;
        role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        email: string;
        id: string;
        name: string;
        organizationId: string;
        role: string;
    }, {
        email: string;
        id: string;
        name: string;
        organizationId: string;
        role: string;
    }>, "many">;
    apiKey: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    sdkAccessToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    members: {
        email: string;
        id: string;
        name: string;
        organizationId: string;
        role: string;
    }[];
    logoUrl?: string | null | undefined;
    apiKey?: string | null | undefined;
    sdkAccessToken?: string | null | undefined;
}, {
    id: string;
    name: string;
    members: {
        email: string;
        id: string;
        name: string;
        organizationId: string;
        role: string;
    }[];
    logoUrl?: string | null | undefined;
    apiKey?: string | null | undefined;
    sdkAccessToken?: string | null | undefined;
}>;
export type AppUserListItem = z.infer<typeof AppUserListItem>;
export declare const AppUserListItem: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    appUserPoolId: z.ZodString;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    appUserPoolId: string;
    id: string;
    createdAt: string;
    email?: string | null | undefined;
    phoneNumber?: string | null | undefined;
}, {
    appUserPoolId: string;
    id: string;
    createdAt: string;
    email?: string | null | undefined;
    phoneNumber?: string | null | undefined;
}>;
export type AppUserList = z.infer<typeof AppUserList>;
export declare const AppUserList: z.ZodObject<{
    appUsers: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        appUserPoolId: z.ZodString;
        createdAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        appUserPoolId: string;
        id: string;
        createdAt: string;
        email?: string | null | undefined;
        phoneNumber?: string | null | undefined;
    }, {
        appUserPoolId: string;
        id: string;
        createdAt: string;
        email?: string | null | undefined;
        phoneNumber?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    appUsers: {
        appUserPoolId: string;
        id: string;
        createdAt: string;
        email?: string | null | undefined;
        phoneNumber?: string | null | undefined;
    }[];
}, {
    appUsers: {
        appUserPoolId: string;
        id: string;
        createdAt: string;
        email?: string | null | undefined;
        phoneNumber?: string | null | undefined;
    }[];
}>;
export type AppUser = z.infer<typeof AppUser>;
export declare const AppUser: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    externalUserId: z.ZodString;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    externalUserId: string;
    createdAt: string;
    email?: string | null | undefined;
    phoneNumber?: string | null | undefined;
}, {
    id: string;
    externalUserId: string;
    createdAt: string;
    email?: string | null | undefined;
    phoneNumber?: string | null | undefined;
}>;
export type UpdateOrganization = z.infer<typeof UpdateOrganization>;
export declare const UpdateOrganization: z.ZodObject<{
    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    logoUrl?: string | null | undefined;
}, {
    name?: string | null | undefined;
    logoUrl?: string | null | undefined;
}>;
export type DeleteOrganizationResponse = z.infer<typeof DeleteOrganizationResponse>;
export declare const DeleteOrganizationResponse: z.ZodBoolean;
export type CreateAppUserResponse = z.infer<typeof CreateAppUserResponse>;
export declare const CreateAppUserResponse: z.ZodObject<{
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
}, {
    success: boolean;
}>;
export type Integration = z.infer<typeof Integration>;
export declare const Integration: z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>;
export type App = z.infer<typeof App>;
export declare const App: z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>;
export type Apps = z.infer<typeof Apps>;
export declare const Apps: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>, "many">, z.ZodString]>;
export type CreateCdpUrlResponse = z.infer<typeof CreateCdpUrlResponse>;
export declare const CreateCdpUrlResponse: z.ZodObject<{
    cdpUrl: z.ZodString;
    liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    cdpUrl: string;
    liveStreamingUrl?: string | null | undefined;
}, {
    cdpUrl: string;
    liveStreamingUrl?: string | null | undefined;
}>;
export type ProxyConfig = z.infer<typeof ProxyConfig>;
export declare const ProxyConfig: z.ZodObject<{
    server: z.ZodString;
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    password: string;
    server: string;
}, {
    username: string;
    password: string;
    server: string;
}>;
export type ProxyType = z.infer<typeof ProxyType>;
export declare const ProxyType: z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
    server: z.ZodString;
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    password: string;
    server: string;
}, {
    username: string;
    password: string;
    server: string;
}>]>;
export type CreateCdpUrlRequest = z.infer<typeof CreateCdpUrlRequest>;
export declare const CreateCdpUrlRequest: z.ZodObject<{
    apps: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>, "many">, z.ZodString]>;
    appUserId: z.ZodString;
    activityGroupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        server: z.ZodString;
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
        server: string;
    }, {
        username: string;
        password: string;
        server: string;
    }>]>, z.ZodUndefined]>>;
    cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    sessionDuration: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    keepAlive: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    provider: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"browserbase">, z.ZodLiteral<"rebrowser">, z.ZodLiteral<"undetect">]>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    apps: (string | string[]) & (string | string[] | undefined);
    activityGroupId?: string | null | undefined;
    proxy?: boolean | {
        username: string;
        password: string;
        server: string;
    } | undefined;
    cdpUrl?: string | null | undefined;
    sessionDuration?: number | null | undefined;
    keepAlive?: boolean | null | undefined;
    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
}, {
    appUserId: string;
    apps: (string | string[]) & (string | string[] | undefined);
    activityGroupId?: string | null | undefined;
    proxy?: boolean | {
        username: string;
        password: string;
        server: string;
    } | undefined;
    cdpUrl?: string | null | undefined;
    sessionDuration?: number | null | undefined;
    keepAlive?: boolean | null | undefined;
    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
}>;
export type AnonEnvironment = z.infer<typeof AnonEnvironment>;
export declare const AnonEnvironment: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"development">, z.ZodLiteral<"staging">, z.ZodLiteral<"sandbox">, z.ZodLiteral<"prod">]>;
export type LocalBrowserConfigProxy = z.infer<typeof LocalBrowserConfigProxy>;
export declare const LocalBrowserConfigProxy: z.ZodObject<{
    isAnonProxyEnabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    isAnonProxyEnabled: boolean;
}, {
    isAnonProxyEnabled: boolean;
}>;
export type LocalBrowserConfig = z.infer<typeof LocalBrowserConfig>;
export declare const LocalBrowserConfig: z.ZodObject<{
    browserType: z.ZodString;
    isHeadless: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        isAnonProxyEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isAnonProxyEnabled: boolean;
    }, {
        isAnonProxyEnabled: boolean;
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    browserType: string;
    isHeadless?: boolean | null | undefined;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
}, {
    browserType: string;
    isHeadless?: boolean | null | undefined;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
}>;
export type BrowserbaseSession = z.infer<typeof BrowserbaseSession>;
export declare const BrowserbaseSession: z.ZodObject<{
    sessionId: z.ZodString;
    sessionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    sessionId: string;
    sessionUrl?: string | null | undefined;
}, {
    sessionId: string;
    sessionUrl?: string | null | undefined;
}>;
export type ManagedBrowserConfigProxy = z.infer<typeof ManagedBrowserConfigProxy>;
export declare const ManagedBrowserConfigProxy: z.ZodObject<{
    isAnonProxyEnabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    isAnonProxyEnabled: boolean;
}, {
    isAnonProxyEnabled: boolean;
}>;
export type ManagedBrowserConfig = z.infer<typeof ManagedBrowserConfig>;
export declare const ManagedBrowserConfig: z.ZodObject<{
    browserType: z.ZodString;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        isAnonProxyEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isAnonProxyEnabled: boolean;
    }, {
        isAnonProxyEnabled: boolean;
    }>, z.ZodUndefined]>>;
    browserbase: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        sessionId: z.ZodString;
        sessionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    }, {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    browserType: string;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
    browserbase?: {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    } | undefined;
}, {
    browserType: string;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
    browserbase?: {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    } | undefined;
}>;
export type RemoteBrowserConfig = z.infer<typeof RemoteBrowserConfig>;
export declare const RemoteBrowserConfig: z.ZodObject<{
    browserType: z.ZodString;
}, "strip", z.ZodTypeAny, {
    browserType: string;
}, {
    browserType: string;
}>;
export type InferredRuntimeBrowserConfigProxy = z.infer<typeof InferredRuntimeBrowserConfigProxy>;
export declare const InferredRuntimeBrowserConfigProxy: z.ZodObject<{
    ip: z.ZodString;
    username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    ip: string;
    username?: string | null | undefined;
}, {
    ip: string;
    username?: string | null | undefined;
}>;
export type InferredRuntimeBrowserConfig = z.infer<typeof InferredRuntimeBrowserConfig>;
export declare const InferredRuntimeBrowserConfig: z.ZodObject<{
    browserType: z.ZodString;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        ip: z.ZodString;
        username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        ip: string;
        username?: string | null | undefined;
    }, {
        ip: string;
        username?: string | null | undefined;
    }>, z.ZodUndefined]>>;
    connectionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    browserType: string;
    proxy?: {
        ip: string;
        username?: string | null | undefined;
    } | undefined;
    connectionUrl?: string | null | undefined;
}, {
    browserType: string;
    proxy?: {
        ip: string;
        username?: string | null | undefined;
    } | undefined;
    connectionUrl?: string | null | undefined;
}>;
export type RuntimeResultType = z.infer<typeof RuntimeResultType>;
export declare const RuntimeResultType: z.ZodUnion<[z.ZodLiteral<"success">, z.ZodLiteral<"error">]>;
export type BaseRuntimeResult = z.infer<typeof BaseRuntimeResult>;
export declare const BaseRuntimeResult: z.ZodObject<{
    type: z.ZodUnion<[z.ZodLiteral<"success">, z.ZodLiteral<"error">]>;
    startSdkTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "error" | "success";
    startSdkTime: number;
}, {
    type: "error" | "success";
    startSdkTime: number;
}>;
export type SuccessRuntimeResult = z.infer<typeof SuccessRuntimeResult>;
export declare const SuccessRuntimeResult: z.ZodObject<{
    type: z.ZodString;
    startSdkTime: z.ZodNumber;
    startRuntimeExecutionTime: z.ZodNumber;
    endRuntimeExecutionTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
}, {
    type: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
}>;
export type FailedToInject = z.infer<typeof FailedToInject>;
export declare const FailedToInject: z.ZodObject<{
    type: z.ZodString;
    startSdkTime: z.ZodNumber;
    classification: z.ZodString;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    startSdkTime: number;
    classification: string;
}, {
    type: string;
    error: string;
    startSdkTime: number;
    classification: string;
}>;
export type RuntimePlaywrightError = z.infer<typeof RuntimePlaywrightError>;
export declare const RuntimePlaywrightError: z.ZodObject<{
    type: z.ZodString;
    startSdkTime: z.ZodNumber;
    classification: z.ZodString;
    error: z.ZodString;
    startRuntimeExecutionTime: z.ZodNumber;
    endRuntimeExecutionTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
    classification: string;
}, {
    type: string;
    error: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
    classification: string;
}>;
export type OtherError = z.infer<typeof OtherError>;
export declare const OtherError: z.ZodObject<{
    type: z.ZodString;
    startSdkTime: z.ZodNumber;
    classification: z.ZodString;
    error: z.ZodString;
    startRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    endRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    startSdkTime: number;
    classification: string;
    startRuntimeExecutionTime?: number | null | undefined;
    endRuntimeExecutionTime?: number | null | undefined;
}, {
    type: string;
    error: string;
    startSdkTime: number;
    classification: string;
    startRuntimeExecutionTime?: number | null | undefined;
    endRuntimeExecutionTime?: number | null | undefined;
}>;
export type RuntimeResult = z.infer<typeof RuntimeResult>;
export declare const RuntimeResult: z.ZodUnion<[z.ZodObject<{
    type: z.ZodString;
    startSdkTime: z.ZodNumber;
    startRuntimeExecutionTime: z.ZodNumber;
    endRuntimeExecutionTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
}, {
    type: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
}>, z.ZodObject<{
    type: z.ZodString;
    startSdkTime: z.ZodNumber;
    classification: z.ZodString;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    startSdkTime: number;
    classification: string;
}, {
    type: string;
    error: string;
    startSdkTime: number;
    classification: string;
}>, z.ZodObject<{
    type: z.ZodString;
    startSdkTime: z.ZodNumber;
    classification: z.ZodString;
    error: z.ZodString;
    startRuntimeExecutionTime: z.ZodNumber;
    endRuntimeExecutionTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
    classification: string;
}, {
    type: string;
    error: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
    classification: string;
}>, z.ZodObject<{
    type: z.ZodString;
    startSdkTime: z.ZodNumber;
    classification: z.ZodString;
    error: z.ZodString;
    startRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    endRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    startSdkTime: number;
    classification: string;
    startRuntimeExecutionTime?: number | null | undefined;
    endRuntimeExecutionTime?: number | null | undefined;
}, {
    type: string;
    error: string;
    startSdkTime: number;
    classification: string;
    startRuntimeExecutionTime?: number | null | undefined;
    endRuntimeExecutionTime?: number | null | undefined;
}>]>;
export type UserMetadata = z.infer<typeof UserMetadata>;
export declare const UserMetadata: z.ZodObject<{
    anonSessionId: z.ZodString;
    anonUserId: z.ZodString;
    externalUserId: z.ZodString;
    orgId: z.ZodString;
    orgName: z.ZodString;
    sdkClientId: z.ZodString;
    sdkClientName: z.ZodString;
    sessionCollectionTime: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    orgId: string;
    externalUserId: string;
    anonUserId: string;
    sdkClientId: string;
    sdkClientName: string;
    anonSessionId: string;
    orgName: string;
    sessionCollectionTime?: string | null | undefined;
}, {
    orgId: string;
    externalUserId: string;
    anonUserId: string;
    sdkClientId: string;
    sdkClientName: string;
    anonSessionId: string;
    orgName: string;
    sessionCollectionTime?: string | null | undefined;
}>;
export type BrowserConfig = z.infer<typeof BrowserConfig>;
export declare const BrowserConfig: z.ZodUnion<[z.ZodObject<{
    browserType: z.ZodString;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        isAnonProxyEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isAnonProxyEnabled: boolean;
    }, {
        isAnonProxyEnabled: boolean;
    }>, z.ZodUndefined]>>;
    browserbase: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        sessionId: z.ZodString;
        sessionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    }, {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    browserType: string;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
    browserbase?: {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    } | undefined;
}, {
    browserType: string;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
    browserbase?: {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    } | undefined;
}>, z.ZodObject<{
    browserType: z.ZodString;
    isHeadless: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        isAnonProxyEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isAnonProxyEnabled: boolean;
    }, {
        isAnonProxyEnabled: boolean;
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    browserType: string;
    isHeadless?: boolean | null | undefined;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
}, {
    browserType: string;
    isHeadless?: boolean | null | undefined;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
}>, z.ZodObject<{
    browserType: z.ZodString;
}, "strip", z.ZodTypeAny, {
    browserType: string;
}, {
    browserType: string;
}>]>;
export type CreateUserMetadata = z.infer<typeof CreateUserMetadata>;
export declare const CreateUserMetadata: z.ZodObject<{
    anonSessionId: z.ZodString;
    externalUserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    externalUserId: string;
    anonSessionId: string;
}, {
    externalUserId: string;
    anonSessionId: string;
}>;
export type RuntimeLog = z.infer<typeof RuntimeLog>;
export declare const RuntimeLog: z.ZodObject<{
    environment: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"development">, z.ZodLiteral<"staging">, z.ZodLiteral<"sandbox">, z.ZodLiteral<"prod">]>;
    userMetadata: z.ZodObject<{
        anonSessionId: z.ZodString;
        anonUserId: z.ZodString;
        externalUserId: z.ZodString;
        orgId: z.ZodString;
        orgName: z.ZodString;
        sdkClientId: z.ZodString;
        sdkClientName: z.ZodString;
        sessionCollectionTime: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        orgId: string;
        externalUserId: string;
        anonUserId: string;
        sdkClientId: string;
        sdkClientName: string;
        anonSessionId: string;
        orgName: string;
        sessionCollectionTime?: string | null | undefined;
    }, {
        orgId: string;
        externalUserId: string;
        anonUserId: string;
        sdkClientId: string;
        sdkClientName: string;
        anonSessionId: string;
        orgName: string;
        sessionCollectionTime?: string | null | undefined;
    }>;
    browserConfig: z.ZodUnion<[z.ZodObject<{
        browserType: z.ZodString;
        proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            isAnonProxyEnabled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isAnonProxyEnabled: boolean;
        }, {
            isAnonProxyEnabled: boolean;
        }>, z.ZodUndefined]>>;
        browserbase: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            sessionId: z.ZodString;
            sessionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        }, {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        }>, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    }, {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    }>, z.ZodObject<{
        browserType: z.ZodString;
        isHeadless: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            isAnonProxyEnabled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isAnonProxyEnabled: boolean;
        }, {
            isAnonProxyEnabled: boolean;
        }>, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    }, {
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    }>, z.ZodObject<{
        browserType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        browserType: string;
    }, {
        browserType: string;
    }>]>;
    app: z.ZodString;
    runtimeResult: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        startSdkTime: z.ZodNumber;
        startRuntimeExecutionTime: z.ZodNumber;
        endRuntimeExecutionTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    }, {
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    }>, z.ZodObject<{
        type: z.ZodString;
        startSdkTime: z.ZodNumber;
        classification: z.ZodString;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    }, {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        startSdkTime: z.ZodNumber;
        classification: z.ZodString;
        error: z.ZodString;
        startRuntimeExecutionTime: z.ZodNumber;
        endRuntimeExecutionTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    }, {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        startSdkTime: z.ZodNumber;
        classification: z.ZodString;
        error: z.ZodString;
        startRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        endRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    }, {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    app: string;
    environment: "local" | "development" | "staging" | "sandbox" | "prod";
    userMetadata: {
        orgId: string;
        externalUserId: string;
        anonUserId: string;
        sdkClientId: string;
        sdkClientName: string;
        anonSessionId: string;
        orgName: string;
        sessionCollectionTime?: string | null | undefined;
    };
    browserConfig: ({
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    } | {
        browserType: string;
    }) & ({
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    } | {
        browserType: string;
    } | undefined);
    runtimeResult: ({
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    }) & ({
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    } | undefined);
}, {
    app: string;
    environment: "local" | "development" | "staging" | "sandbox" | "prod";
    userMetadata: {
        orgId: string;
        externalUserId: string;
        anonUserId: string;
        sdkClientId: string;
        sdkClientName: string;
        anonSessionId: string;
        orgName: string;
        sessionCollectionTime?: string | null | undefined;
    };
    browserConfig: ({
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    } | {
        browserType: string;
    }) & ({
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    } | {
        browserType: string;
    } | undefined);
    runtimeResult: ({
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    }) & ({
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    } | undefined);
}>;
export type BrowserConfigCreateRequest = z.infer<typeof BrowserConfigCreateRequest>;
export declare const BrowserConfigCreateRequest: z.ZodUnion<[z.ZodObject<{
    browserType: z.ZodString;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        isAnonProxyEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isAnonProxyEnabled: boolean;
    }, {
        isAnonProxyEnabled: boolean;
    }>, z.ZodUndefined]>>;
    browserbase: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        sessionId: z.ZodString;
        sessionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    }, {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    browserType: string;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
    browserbase?: {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    } | undefined;
}, {
    browserType: string;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
    browserbase?: {
        sessionId: string;
        sessionUrl?: string | null | undefined;
    } | undefined;
}>, z.ZodObject<{
    browserType: z.ZodString;
    isHeadless: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        isAnonProxyEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isAnonProxyEnabled: boolean;
    }, {
        isAnonProxyEnabled: boolean;
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    browserType: string;
    isHeadless?: boolean | null | undefined;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
}, {
    browserType: string;
    isHeadless?: boolean | null | undefined;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
}>, z.ZodObject<{
    browserType: z.ZodString;
}, "strip", z.ZodTypeAny, {
    browserType: string;
}, {
    browserType: string;
}>, z.ZodObject<{
    browserType: z.ZodString;
    proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        ip: z.ZodString;
        username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        ip: string;
        username?: string | null | undefined;
    }, {
        ip: string;
        username?: string | null | undefined;
    }>, z.ZodUndefined]>>;
    connectionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    browserType: string;
    proxy?: {
        ip: string;
        username?: string | null | undefined;
    } | undefined;
    connectionUrl?: string | null | undefined;
}, {
    browserType: string;
    proxy?: {
        ip: string;
        username?: string | null | undefined;
    } | undefined;
    connectionUrl?: string | null | undefined;
}>]>;
export type RuntimeLogCreateRequest = z.infer<typeof RuntimeLogCreateRequest>;
export declare const RuntimeLogCreateRequest: z.ZodObject<{
    environment: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"development">, z.ZodLiteral<"staging">, z.ZodLiteral<"sandbox">, z.ZodLiteral<"prod">]>;
    userMetadata: z.ZodObject<{
        anonSessionId: z.ZodString;
        externalUserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        externalUserId: string;
        anonSessionId: string;
    }, {
        externalUserId: string;
        anonSessionId: string;
    }>;
    browserConfig: z.ZodUnion<[z.ZodObject<{
        browserType: z.ZodString;
        proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            isAnonProxyEnabled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isAnonProxyEnabled: boolean;
        }, {
            isAnonProxyEnabled: boolean;
        }>, z.ZodUndefined]>>;
        browserbase: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            sessionId: z.ZodString;
            sessionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        }, {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        }>, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    }, {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    }>, z.ZodObject<{
        browserType: z.ZodString;
        isHeadless: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            isAnonProxyEnabled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isAnonProxyEnabled: boolean;
        }, {
            isAnonProxyEnabled: boolean;
        }>, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    }, {
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    }>, z.ZodObject<{
        browserType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        browserType: string;
    }, {
        browserType: string;
    }>, z.ZodObject<{
        browserType: z.ZodString;
        proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            ip: z.ZodString;
            username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            ip: string;
            username?: string | null | undefined;
        }, {
            ip: string;
            username?: string | null | undefined;
        }>, z.ZodUndefined]>>;
        connectionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        browserType: string;
        proxy?: {
            ip: string;
            username?: string | null | undefined;
        } | undefined;
        connectionUrl?: string | null | undefined;
    }, {
        browserType: string;
        proxy?: {
            ip: string;
            username?: string | null | undefined;
        } | undefined;
        connectionUrl?: string | null | undefined;
    }>]>;
    app: z.ZodString;
    runtimeResult: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        startSdkTime: z.ZodNumber;
        startRuntimeExecutionTime: z.ZodNumber;
        endRuntimeExecutionTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    }, {
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    }>, z.ZodObject<{
        type: z.ZodString;
        startSdkTime: z.ZodNumber;
        classification: z.ZodString;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    }, {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        startSdkTime: z.ZodNumber;
        classification: z.ZodString;
        error: z.ZodString;
        startRuntimeExecutionTime: z.ZodNumber;
        endRuntimeExecutionTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    }, {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    }>, z.ZodObject<{
        type: z.ZodString;
        startSdkTime: z.ZodNumber;
        classification: z.ZodString;
        error: z.ZodString;
        startRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        endRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    }, {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    app: string;
    environment: "local" | "development" | "staging" | "sandbox" | "prod";
    userMetadata: {
        externalUserId: string;
        anonSessionId: string;
    };
    browserConfig: ({
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    } | {
        browserType: string;
    } | {
        browserType: string;
        proxy?: {
            ip: string;
            username?: string | null | undefined;
        } | undefined;
        connectionUrl?: string | null | undefined;
    }) & ({
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    } | {
        browserType: string;
    } | {
        browserType: string;
        proxy?: {
            ip: string;
            username?: string | null | undefined;
        } | undefined;
        connectionUrl?: string | null | undefined;
    } | undefined);
    runtimeResult: ({
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    }) & ({
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    } | undefined);
}, {
    app: string;
    environment: "local" | "development" | "staging" | "sandbox" | "prod";
    userMetadata: {
        externalUserId: string;
        anonSessionId: string;
    };
    browserConfig: ({
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    } | {
        browserType: string;
    } | {
        browserType: string;
        proxy?: {
            ip: string;
            username?: string | null | undefined;
        } | undefined;
        connectionUrl?: string | null | undefined;
    }) & ({
        browserType: string;
        isHeadless?: boolean | null | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: string;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | null | undefined;
        } | undefined;
    } | {
        browserType: string;
    } | {
        browserType: string;
        proxy?: {
            ip: string;
            username?: string | null | undefined;
        } | undefined;
        connectionUrl?: string | null | undefined;
    } | undefined);
    runtimeResult: ({
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    }) & ({
        type: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: string;
    } | {
        type: string;
        error: string;
        startSdkTime: number;
        classification: string;
        startRuntimeExecutionTime?: number | null | undefined;
        endRuntimeExecutionTime?: number | null | undefined;
    } | undefined);
}>;
export type RecordLogResponse = z.infer<typeof RecordLogResponse>;
export declare const RecordLogResponse: z.ZodObject<{
    message: z.ZodString;
    recordedAt: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    recordedAt?: string | null | undefined;
}, {
    message: string;
    recordedAt?: string | null | undefined;
}>;
export type SdkClientOauthConfig = z.infer<typeof SdkClientOauthConfig>;
export declare const SdkClientOauthConfig: z.ZodObject<{
    logoUrl: z.ZodString;
    chromeExtensionId: z.ZodString;
    redirectUrls: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    chromeExtensionId: string;
    logoUrl: string;
    redirectUrls: string[];
}, {
    chromeExtensionId: string;
    logoUrl: string;
    redirectUrls: string[];
}>;
export type SdkClientKindApplicationApplication = z.infer<typeof SdkClientKindApplicationApplication>;
export declare const SdkClientKindApplicationApplication: z.ZodObject<{
    userPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    oauthConfig: z.ZodOptional<z.ZodObject<{
        logoUrl: z.ZodString;
        chromeExtensionId: z.ZodString;
        redirectUrls: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    }, {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    userPoolId?: string | null | undefined;
    oauthConfig?: {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    } | undefined;
}, {
    userPoolId?: string | null | undefined;
    oauthConfig?: {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    } | undefined;
}>;
export type SdkClientKindApplication = z.infer<typeof SdkClientKindApplication>;
export declare const SdkClientKindApplication: z.ZodObject<{
    application: z.ZodObject<{
        userPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        oauthConfig: z.ZodOptional<z.ZodObject<{
            logoUrl: z.ZodString;
            chromeExtensionId: z.ZodString;
            redirectUrls: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        }, {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        userPoolId?: string | null | undefined;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    }, {
        userPoolId?: string | null | undefined;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    application: {
        userPoolId?: string | null | undefined;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    };
}, {
    application: {
        userPoolId?: string | null | undefined;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    };
}>;
export type SdkClientKind = z.infer<typeof SdkClientKind>;
export declare const SdkClientKind: z.ZodUnion<[z.ZodString, z.ZodObject<{
    application: z.ZodObject<{
        userPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        oauthConfig: z.ZodOptional<z.ZodObject<{
            logoUrl: z.ZodString;
            chromeExtensionId: z.ZodString;
            redirectUrls: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        }, {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        userPoolId?: string | null | undefined;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    }, {
        userPoolId?: string | null | undefined;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    application: {
        userPoolId?: string | null | undefined;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    };
}, {
    application: {
        userPoolId?: string | null | undefined;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    };
}>]>;
export type SdkAuthUserPool = z.infer<typeof SdkAuthUserPool>;
export declare const SdkAuthUserPool: z.ZodObject<{
    type: z.ZodString;
    userPoolId: z.ZodString;
    oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        logoUrl: z.ZodString;
        chromeExtensionId: z.ZodString;
        redirectUrls: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    }, {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    userPoolId: string;
    oauthConfig?: {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    } | undefined;
}, {
    type: string;
    userPoolId: string;
    oauthConfig?: {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    } | undefined;
}>;
export type SdkAuthApiKey = z.infer<typeof SdkAuthApiKey>;
export declare const SdkAuthApiKey: z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>;
export type SdkAuthNewApiKey = z.infer<typeof SdkAuthNewApiKey>;
export declare const SdkAuthNewApiKey: z.ZodObject<{
    type: z.ZodString;
    secret: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    secret: string;
}, {
    type: string;
    secret: string;
}>;
export type SdkAuth = z.infer<typeof SdkAuth>;
export declare const SdkAuth: z.ZodUnion<[z.ZodObject<{
    type: z.ZodString;
    userPoolId: z.ZodString;
    oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        logoUrl: z.ZodString;
        chromeExtensionId: z.ZodString;
        redirectUrls: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    }, {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    userPoolId: string;
    oauthConfig?: {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    } | undefined;
}, {
    type: string;
    userPoolId: string;
    oauthConfig?: {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    } | undefined;
}>, z.ZodObject<{
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
}, {
    type: string;
}>]>;
export type CreatedSdkAuth = z.infer<typeof CreatedSdkAuth>;
export declare const CreatedSdkAuth: z.ZodUnion<[z.ZodObject<{
    type: z.ZodString;
    userPoolId: z.ZodString;
    oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        logoUrl: z.ZodString;
        chromeExtensionId: z.ZodString;
        redirectUrls: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    }, {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    userPoolId: string;
    oauthConfig?: {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    } | undefined;
}, {
    type: string;
    userPoolId: string;
    oauthConfig?: {
        chromeExtensionId: string;
        logoUrl: string;
        redirectUrls: string[];
    } | undefined;
}>, z.ZodObject<{
    type: z.ZodString;
    secret: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    secret: string;
}, {
    type: string;
    secret: string;
}>]>;
export type SdkClient = z.infer<typeof SdkClient>;
export declare const SdkClient: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    auth: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        userPoolId: z.ZodString;
        oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            logoUrl: z.ZodString;
            chromeExtensionId: z.ZodString;
            redirectUrls: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        }, {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        }>, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    }, {
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
    }, {
        type: string;
    }>]>;
    organizationId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    organizationId: string;
    description: string;
    auth: ({
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    } | {
        type: string;
    }) & ({
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    } | {
        type: string;
    } | undefined);
}, {
    id: string;
    name: string;
    organizationId: string;
    description: string;
    auth: ({
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    } | {
        type: string;
    }) & ({
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    } | {
        type: string;
    } | undefined);
}>;
export type CreatedSdkClient = z.infer<typeof CreatedSdkClient>;
export declare const CreatedSdkClient: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    auth: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        userPoolId: z.ZodString;
        oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            logoUrl: z.ZodString;
            chromeExtensionId: z.ZodString;
            redirectUrls: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        }, {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        }>, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    }, {
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodString;
        secret: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        secret: string;
    }, {
        type: string;
        secret: string;
    }>]>;
    organizationId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    organizationId: string;
    description: string;
    auth: ({
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    } | {
        type: string;
        secret: string;
    }) & ({
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    } | {
        type: string;
        secret: string;
    } | undefined);
}, {
    id: string;
    name: string;
    organizationId: string;
    description: string;
    auth: ({
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    } | {
        type: string;
        secret: string;
    }) & ({
        type: string;
        userPoolId: string;
        oauthConfig?: {
            chromeExtensionId: string;
            logoUrl: string;
            redirectUrls: string[];
        } | undefined;
    } | {
        type: string;
        secret: string;
    } | undefined);
}>;
export type SdkClientAuthorization = z.infer<typeof SdkClientAuthorization>;
export declare const SdkClientAuthorization: z.ZodObject<{
    jwksUri: z.ZodString;
    idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    jwksUri: string;
    idClaim?: string | null | undefined;
}, {
    jwksUri: string;
    idClaim?: string | null | undefined;
}>;
export type CreateSdkClient = z.infer<typeof CreateSdkClient>;
export declare const CreateSdkClient: z.ZodObject<{
    name: z.ZodString;
    kind: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodObject<{
        application: z.ZodObject<{
            userPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            oauthConfig: z.ZodOptional<z.ZodObject<{
                logoUrl: z.ZodString;
                chromeExtensionId: z.ZodString;
                redirectUrls: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            }, {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            }>>;
        }, "strip", z.ZodTypeAny, {
            userPoolId?: string | null | undefined;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        }, {
            userPoolId?: string | null | undefined;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        application: {
            userPoolId?: string | null | undefined;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        };
    }, {
        application: {
            userPoolId?: string | null | undefined;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        };
    }>]>, z.ZodUndefined]>>;
    description: z.ZodString;
    oauthDisabled: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    authorization: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        jwksUri: z.ZodString;
        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }>, z.ZodUndefined]>>;
    organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description: string;
    kind?: string | {
        application: {
            userPoolId?: string | null | undefined;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        };
    } | undefined;
    oauthDisabled?: boolean | null | undefined;
    authorization?: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    } | undefined;
    organizationId?: string | undefined;
}, {
    name: string;
    description: string;
    kind?: string | {
        application: {
            userPoolId?: string | null | undefined;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        };
    } | undefined;
    oauthDisabled?: boolean | null | undefined;
    authorization?: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    } | undefined;
    organizationId?: string | undefined;
}>;
export type SdkClientListItem = z.infer<typeof SdkClientListItem>;
export declare const SdkClientListItem: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    createdAt: z.ZodString;
    logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    chromeExtensionId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    redirectUrls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    createdAt: string;
    description: string;
    appUserPoolId?: string | null | undefined;
    logoUrl?: string | null | undefined;
    chromeExtensionId?: string | null | undefined;
    redirectUrls?: string[] | null | undefined;
}, {
    id: string;
    name: string;
    createdAt: string;
    description: string;
    appUserPoolId?: string | null | undefined;
    logoUrl?: string | null | undefined;
    chromeExtensionId?: string | null | undefined;
    redirectUrls?: string[] | null | undefined;
}>;
export type SdkClientList = z.infer<typeof SdkClientList>;
export declare const SdkClientList: z.ZodObject<{
    resource: z.ZodString;
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        createdAt: z.ZodString;
        logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        chromeExtensionId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        redirectUrls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        createdAt: string;
        description: string;
        appUserPoolId?: string | null | undefined;
        logoUrl?: string | null | undefined;
        chromeExtensionId?: string | null | undefined;
        redirectUrls?: string[] | null | undefined;
    }, {
        id: string;
        name: string;
        createdAt: string;
        description: string;
        appUserPoolId?: string | null | undefined;
        logoUrl?: string | null | undefined;
        chromeExtensionId?: string | null | undefined;
        redirectUrls?: string[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    resource: string;
    items: {
        id: string;
        name: string;
        createdAt: string;
        description: string;
        appUserPoolId?: string | null | undefined;
        logoUrl?: string | null | undefined;
        chromeExtensionId?: string | null | undefined;
        redirectUrls?: string[] | null | undefined;
    }[];
}, {
    resource: string;
    items: {
        id: string;
        name: string;
        createdAt: string;
        description: string;
        appUserPoolId?: string | null | undefined;
        logoUrl?: string | null | undefined;
        chromeExtensionId?: string | null | undefined;
        redirectUrls?: string[] | null | undefined;
    }[];
}>;
export type UpdateOauthConfig = z.infer<typeof UpdateOauthConfig>;
export declare const UpdateOauthConfig: z.ZodObject<{
    logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    chromeExtensionId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    redirectUrls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    logoUrl?: string | null | undefined;
    chromeExtensionId?: string | null | undefined;
    redirectUrls?: string[] | null | undefined;
}, {
    logoUrl?: string | null | undefined;
    chromeExtensionId?: string | null | undefined;
    redirectUrls?: string[] | null | undefined;
}>;
export type UpdateSdkClient = z.infer<typeof UpdateSdkClient>;
export declare const UpdateSdkClient: z.ZodObject<{
    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    oauthConfig: z.ZodOptional<z.ZodObject<{
        logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        chromeExtensionId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        redirectUrls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        logoUrl?: string | null | undefined;
        chromeExtensionId?: string | null | undefined;
        redirectUrls?: string[] | null | undefined;
    }, {
        logoUrl?: string | null | undefined;
        chromeExtensionId?: string | null | undefined;
        redirectUrls?: string[] | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    description?: string | null | undefined;
    oauthConfig?: {
        logoUrl?: string | null | undefined;
        chromeExtensionId?: string | null | undefined;
        redirectUrls?: string[] | null | undefined;
    } | undefined;
}, {
    name?: string | null | undefined;
    description?: string | null | undefined;
    oauthConfig?: {
        logoUrl?: string | null | undefined;
        chromeExtensionId?: string | null | undefined;
        redirectUrls?: string[] | null | undefined;
    } | undefined;
}>;
export type AuthenticatorResponse = z.infer<typeof AuthenticatorResponse>;
export declare const AuthenticatorResponse: z.ZodObject<{
    authenticatorId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    authenticatorId: string;
}, {
    authenticatorId: string;
}>;
export type GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage = z.infer<typeof GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage>;
export declare const GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"session">, z.ZodLiteral<"cookie">]>;
export type GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem = z.infer<typeof GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem>;
export declare const GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem: z.ZodObject<{
    storage: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"session">, z.ZodLiteral<"cookie">]>;
    key: z.ZodString;
    domains: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    key: string;
    storage: "local" | "session" | "cookie";
    domains?: string[] | null | undefined;
}, {
    key: string;
    storage: "local" | "session" | "cookie";
    domains?: string[] | null | undefined;
}>;
export type GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem = z.infer<typeof GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem>;
export declare const GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem: z.ZodObject<{
    domain: z.ZodString;
}, "strip", z.ZodTypeAny, {
    domain: string;
}, {
    domain: string;
}>;
export type GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem = z.infer<typeof GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem>;
export declare const GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem: z.ZodObject<{
    selector: z.ZodString;
    exists: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    selector: string;
    exists: boolean;
}, {
    selector: string;
    exists: boolean;
}>;
export type GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule = z.infer<typeof GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule>;
export declare const GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule: z.ZodUnion<[z.ZodLiteral<"ALL">, z.ZodLiteral<"ANY">]>;
export type GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem = z.infer<typeof GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem>;
export declare const GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem: z.ZodObject<{
    url: z.ZodString;
    criteria: z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        exists: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        exists: boolean;
    }, {
        selector: string;
        exists: boolean;
    }>, "many">;
    matchRule: z.ZodUnion<[z.ZodLiteral<"ALL">, z.ZodLiteral<"ANY">]>;
}, "strip", z.ZodTypeAny, {
    url: string;
    criteria: {
        selector: string;
        exists: boolean;
    }[];
    matchRule: "ALL" | "ANY";
}, {
    url: string;
    criteria: {
        selector: string;
        exists: boolean;
    }[];
    matchRule: "ALL" | "ANY";
}>;
export type GetAccountApiV1AppIntegrationResponseAppAppSessionValidation = z.infer<typeof GetAccountApiV1AppIntegrationResponseAppAppSessionValidation>;
export declare const GetAccountApiV1AppIntegrationResponseAppAppSessionValidation: z.ZodObject<{
    sessionValidityChecks: z.ZodArray<z.ZodObject<{
        url: z.ZodString;
        criteria: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            exists: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            exists: boolean;
        }, {
            selector: string;
            exists: boolean;
        }>, "many">;
        matchRule: z.ZodUnion<[z.ZodLiteral<"ALL">, z.ZodLiteral<"ANY">]>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        criteria: {
            selector: string;
            exists: boolean;
        }[];
        matchRule: "ALL" | "ANY";
    }, {
        url: string;
        criteria: {
            selector: string;
            exists: boolean;
        }[];
        matchRule: "ALL" | "ANY";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    sessionValidityChecks: {
        url: string;
        criteria: {
            selector: string;
            exists: boolean;
        }[];
        matchRule: "ALL" | "ANY";
    }[];
}, {
    sessionValidityChecks: {
        url: string;
        criteria: {
            selector: string;
            exists: boolean;
        }[];
        matchRule: "ALL" | "ANY";
    }[];
}>;
export type GetAccountApiV1AppIntegrationResponseAppApp = z.infer<typeof GetAccountApiV1AppIntegrationResponseAppApp>;
export declare const GetAccountApiV1AppIntegrationResponseAppApp: z.ZodObject<{
    authUrl: z.ZodString;
    displayName: z.ZodString;
    iconUrl: z.ZodString;
    domCompletionIndicator: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    completionIndicators: z.ZodArray<z.ZodObject<{
        storage: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"session">, z.ZodLiteral<"cookie">]>;
        key: z.ZodString;
        domains: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        storage: "local" | "session" | "cookie";
        domains?: string[] | null | undefined;
    }, {
        key: string;
        storage: "local" | "session" | "cookie";
        domains?: string[] | null | undefined;
    }>, "many">;
    sessionExtractionDomains: z.ZodArray<z.ZodObject<{
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        domain: string;
    }, {
        domain: string;
    }>, "many">;
    sessionValidation: z.ZodObject<{
        sessionValidityChecks: z.ZodArray<z.ZodObject<{
            url: z.ZodString;
            criteria: z.ZodArray<z.ZodObject<{
                selector: z.ZodString;
                exists: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                selector: string;
                exists: boolean;
            }, {
                selector: string;
                exists: boolean;
            }>, "many">;
            matchRule: z.ZodUnion<[z.ZodLiteral<"ALL">, z.ZodLiteral<"ANY">]>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            criteria: {
                selector: string;
                exists: boolean;
            }[];
            matchRule: "ALL" | "ANY";
        }, {
            url: string;
            criteria: {
                selector: string;
                exists: boolean;
            }[];
            matchRule: "ALL" | "ANY";
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        sessionValidityChecks: {
            url: string;
            criteria: {
                selector: string;
                exists: boolean;
            }[];
            matchRule: "ALL" | "ANY";
        }[];
    }, {
        sessionValidityChecks: {
            url: string;
            criteria: {
                selector: string;
                exists: boolean;
            }[];
            matchRule: "ALL" | "ANY";
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    authUrl: string;
    displayName: string;
    iconUrl: string;
    completionIndicators: {
        key: string;
        storage: "local" | "session" | "cookie";
        domains?: string[] | null | undefined;
    }[];
    sessionExtractionDomains: {
        domain: string;
    }[];
    sessionValidation: {
        sessionValidityChecks: {
            url: string;
            criteria: {
                selector: string;
                exists: boolean;
            }[];
            matchRule: "ALL" | "ANY";
        }[];
    };
    domCompletionIndicator?: string | null | undefined;
}, {
    authUrl: string;
    displayName: string;
    iconUrl: string;
    completionIndicators: {
        key: string;
        storage: "local" | "session" | "cookie";
        domains?: string[] | null | undefined;
    }[];
    sessionExtractionDomains: {
        domain: string;
    }[];
    sessionValidation: {
        sessionValidityChecks: {
            url: string;
            criteria: {
                selector: string;
                exists: boolean;
            }[];
            matchRule: "ALL" | "ANY";
        }[];
    };
    domCompletionIndicator?: string | null | undefined;
}>;
export type GetAccountApiV1AppIntegrationResponseApp = z.infer<typeof GetAccountApiV1AppIntegrationResponseApp>;
export declare const GetAccountApiV1AppIntegrationResponseApp: z.ZodObject<{
    app: z.ZodObject<{
        authUrl: z.ZodString;
        displayName: z.ZodString;
        iconUrl: z.ZodString;
        domCompletionIndicator: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        completionIndicators: z.ZodArray<z.ZodObject<{
            storage: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"session">, z.ZodLiteral<"cookie">]>;
            key: z.ZodString;
            domains: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }, {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }>, "many">;
        sessionExtractionDomains: z.ZodArray<z.ZodObject<{
            domain: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            domain: string;
        }, {
            domain: string;
        }>, "many">;
        sessionValidation: z.ZodObject<{
            sessionValidityChecks: z.ZodArray<z.ZodObject<{
                url: z.ZodString;
                criteria: z.ZodArray<z.ZodObject<{
                    selector: z.ZodString;
                    exists: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    selector: string;
                    exists: boolean;
                }, {
                    selector: string;
                    exists: boolean;
                }>, "many">;
                matchRule: z.ZodUnion<[z.ZodLiteral<"ALL">, z.ZodLiteral<"ANY">]>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }, {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        }, {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        }>;
    }, "strip", z.ZodTypeAny, {
        authUrl: string;
        displayName: string;
        iconUrl: string;
        completionIndicators: {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }[];
        sessionExtractionDomains: {
            domain: string;
        }[];
        sessionValidation: {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        };
        domCompletionIndicator?: string | null | undefined;
    }, {
        authUrl: string;
        displayName: string;
        iconUrl: string;
        completionIndicators: {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }[];
        sessionExtractionDomains: {
            domain: string;
        }[];
        sessionValidation: {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        };
        domCompletionIndicator?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    app: {
        authUrl: string;
        displayName: string;
        iconUrl: string;
        completionIndicators: {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }[];
        sessionExtractionDomains: {
            domain: string;
        }[];
        sessionValidation: {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        };
        domCompletionIndicator?: string | null | undefined;
    };
}, {
    app: {
        authUrl: string;
        displayName: string;
        iconUrl: string;
        completionIndicators: {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }[];
        sessionExtractionDomains: {
            domain: string;
        }[];
        sessionValidation: {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        };
        domCompletionIndicator?: string | null | undefined;
    };
}>;
export type GetAccountApiV1AppIntegrationResponseMessage = z.infer<typeof GetAccountApiV1AppIntegrationResponseMessage>;
export declare const GetAccountApiV1AppIntegrationResponseMessage: z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>;
export type GetAccountApiV1AppIntegrationResponse = z.infer<typeof GetAccountApiV1AppIntegrationResponse>;
export declare const GetAccountApiV1AppIntegrationResponse: z.ZodUnion<[z.ZodObject<{
    app: z.ZodObject<{
        authUrl: z.ZodString;
        displayName: z.ZodString;
        iconUrl: z.ZodString;
        domCompletionIndicator: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        completionIndicators: z.ZodArray<z.ZodObject<{
            storage: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"session">, z.ZodLiteral<"cookie">]>;
            key: z.ZodString;
            domains: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }, {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }>, "many">;
        sessionExtractionDomains: z.ZodArray<z.ZodObject<{
            domain: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            domain: string;
        }, {
            domain: string;
        }>, "many">;
        sessionValidation: z.ZodObject<{
            sessionValidityChecks: z.ZodArray<z.ZodObject<{
                url: z.ZodString;
                criteria: z.ZodArray<z.ZodObject<{
                    selector: z.ZodString;
                    exists: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    selector: string;
                    exists: boolean;
                }, {
                    selector: string;
                    exists: boolean;
                }>, "many">;
                matchRule: z.ZodUnion<[z.ZodLiteral<"ALL">, z.ZodLiteral<"ANY">]>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }, {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        }, {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        }>;
    }, "strip", z.ZodTypeAny, {
        authUrl: string;
        displayName: string;
        iconUrl: string;
        completionIndicators: {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }[];
        sessionExtractionDomains: {
            domain: string;
        }[];
        sessionValidation: {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        };
        domCompletionIndicator?: string | null | undefined;
    }, {
        authUrl: string;
        displayName: string;
        iconUrl: string;
        completionIndicators: {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }[];
        sessionExtractionDomains: {
            domain: string;
        }[];
        sessionValidation: {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        };
        domCompletionIndicator?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    app: {
        authUrl: string;
        displayName: string;
        iconUrl: string;
        completionIndicators: {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }[];
        sessionExtractionDomains: {
            domain: string;
        }[];
        sessionValidation: {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        };
        domCompletionIndicator?: string | null | undefined;
    };
}, {
    app: {
        authUrl: string;
        displayName: string;
        iconUrl: string;
        completionIndicators: {
            key: string;
            storage: "local" | "session" | "cookie";
            domains?: string[] | null | undefined;
        }[];
        sessionExtractionDomains: {
            domain: string;
        }[];
        sessionValidation: {
            sessionValidityChecks: {
                url: string;
                criteria: {
                    selector: string;
                    exists: boolean;
                }[];
                matchRule: "ALL" | "ANY";
            }[];
        };
        domCompletionIndicator?: string | null | undefined;
    };
}>, z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>]>;
export type PostAccountApiV1BrowserEnvironmentRequestProxy = z.infer<typeof PostAccountApiV1BrowserEnvironmentRequestProxy>;
export declare const PostAccountApiV1BrowserEnvironmentRequestProxy: z.ZodObject<{
    server: z.ZodString;
    bypass: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    password: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    server: string;
    bypass?: string | null | undefined;
    username?: string | null | undefined;
    password?: string | null | undefined;
}, {
    server: string;
    bypass?: string | null | undefined;
    username?: string | null | undefined;
    password?: string | null | undefined;
}>;
export type PostAccountApiV1BrowserEnvironmentRequest = z.infer<typeof PostAccountApiV1BrowserEnvironmentRequest>;
export declare const PostAccountApiV1BrowserEnvironmentRequest: z.ZodObject<{
    proxy: z.ZodOptional<z.ZodObject<{
        server: z.ZodString;
        bypass: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        password: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        server: string;
        bypass?: string | null | undefined;
        username?: string | null | undefined;
        password?: string | null | undefined;
    }, {
        server: string;
        bypass?: string | null | undefined;
        username?: string | null | undefined;
        password?: string | null | undefined;
    }>>;
    isLiveStreamingSession: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    proxy?: {
        server: string;
        bypass?: string | null | undefined;
        username?: string | null | undefined;
        password?: string | null | undefined;
    } | undefined;
    isLiveStreamingSession?: boolean | null | undefined;
}, {
    proxy?: {
        server: string;
        bypass?: string | null | undefined;
        username?: string | null | undefined;
        password?: string | null | undefined;
    } | undefined;
    isLiveStreamingSession?: boolean | null | undefined;
}>;
export type PostAccountApiV1BrowserEnvironmentResponseMessage = z.infer<typeof PostAccountApiV1BrowserEnvironmentResponseMessage>;
export declare const PostAccountApiV1BrowserEnvironmentResponseMessage: z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>;
export type PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment = z.infer<typeof PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment>;
export declare const PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment: z.ZodObject<{
    connectUrl: z.ZodString;
    liveStreamingSession: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    connectUrl: string;
    liveStreamingSession?: string | null | undefined;
}, {
    connectUrl: string;
    liveStreamingSession?: string | null | undefined;
}>;
export type PostAccountApiV1BrowserEnvironmentResponseEnvironment = z.infer<typeof PostAccountApiV1BrowserEnvironmentResponseEnvironment>;
export declare const PostAccountApiV1BrowserEnvironmentResponseEnvironment: z.ZodObject<{
    id: z.ZodString;
    ownerId: z.ZodString;
    environment: z.ZodObject<{
        connectUrl: z.ZodString;
        liveStreamingSession: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        connectUrl: string;
        liveStreamingSession?: string | null | undefined;
    }, {
        connectUrl: string;
        liveStreamingSession?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    ownerId: string;
    environment: {
        connectUrl: string;
        liveStreamingSession?: string | null | undefined;
    };
}, {
    id: string;
    ownerId: string;
    environment: {
        connectUrl: string;
        liveStreamingSession?: string | null | undefined;
    };
}>;
export type PostAccountApiV1BrowserEnvironmentResponse = z.infer<typeof PostAccountApiV1BrowserEnvironmentResponse>;
export declare const PostAccountApiV1BrowserEnvironmentResponse: z.ZodUnion<[z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>, z.ZodObject<{
    id: z.ZodString;
    ownerId: z.ZodString;
    environment: z.ZodObject<{
        connectUrl: z.ZodString;
        liveStreamingSession: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        connectUrl: string;
        liveStreamingSession?: string | null | undefined;
    }, {
        connectUrl: string;
        liveStreamingSession?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    ownerId: string;
    environment: {
        connectUrl: string;
        liveStreamingSession?: string | null | undefined;
    };
}, {
    id: string;
    ownerId: string;
    environment: {
        connectUrl: string;
        liveStreamingSession?: string | null | undefined;
    };
}>]>;
export type GetAccountApiV1SessionResponseMessage = z.infer<typeof GetAccountApiV1SessionResponseMessage>;
export declare const GetAccountApiV1SessionResponseMessage: z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>;
export type GetAccountApiV1SessionResponseAppUserIdSessionStatus = z.infer<typeof GetAccountApiV1SessionResponseAppUserIdSessionStatus>;
export declare const GetAccountApiV1SessionResponseAppUserIdSessionStatus: z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>;
export type GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite = z.infer<typeof GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite>;
export declare const GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite: z.ZodUnion<[z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>;
export type GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem = z.infer<typeof GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem>;
export declare const GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
    domain: z.ZodString;
    path: z.ZodString;
    expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    secure: z.ZodBoolean;
    httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
    domain: string;
    path: string;
    secure: boolean;
    expires?: number | null | undefined;
    httpOnly?: boolean | null | undefined;
    sameSite?: "Lax" | "Strict" | "None" | undefined;
}, {
    value: string;
    name: string;
    domain: string;
    path: string;
    secure: boolean;
    expires?: number | null | undefined;
    httpOnly?: boolean | null | undefined;
    sameSite?: "Lax" | "Strict" | "None" | undefined;
}>;
export type GetAccountApiV1SessionResponseAppUserIdSession = z.infer<typeof GetAccountApiV1SessionResponseAppUserIdSession>;
export declare const GetAccountApiV1SessionResponseAppUserIdSession: z.ZodObject<{
    id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
    cookies: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodString;
        domain: z.ZodString;
        path: z.ZodString;
        expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        secure: z.ZodBoolean;
        httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        httpOnly?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | undefined;
    }, {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        httpOnly?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | undefined;
    }>, "many">;
    localStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
    sessionStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
    proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    url: z.ZodString;
    metadata: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    url: string;
    cookies: {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        httpOnly?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | undefined;
    }[];
    localStorage: unknown[][];
    sessionStorage: unknown[][];
    id?: string | null | undefined;
    status?: "unknown" | "active" | "revoked" | undefined;
    proxyId?: string | null | undefined;
    metadata?: unknown;
}, {
    url: string;
    cookies: {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        httpOnly?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | undefined;
    }[];
    localStorage: unknown[][];
    sessionStorage: unknown[][];
    id?: string | null | undefined;
    status?: "unknown" | "active" | "revoked" | undefined;
    proxyId?: string | null | undefined;
    metadata?: unknown;
}>;
export type GetAccountApiV1SessionResponseAppUserId = z.infer<typeof GetAccountApiV1SessionResponseAppUserId>;
export declare const GetAccountApiV1SessionResponseAppUserId: z.ZodObject<{
    ownerId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    domain: z.ZodString;
    session: z.ZodObject<{
        id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
        cookies: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodString;
            domain: z.ZodString;
            path: z.ZodString;
            expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            secure: z.ZodBoolean;
            httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }, {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }>, "many">;
        localStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
        sessionStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
        proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        url: z.ZodString;
        metadata: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        cookies: {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }[];
        localStorage: unknown[][];
        sessionStorage: unknown[][];
        id?: string | null | undefined;
        status?: "unknown" | "active" | "revoked" | undefined;
        proxyId?: string | null | undefined;
        metadata?: unknown;
    }, {
        url: string;
        cookies: {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }[];
        localStorage: unknown[][];
        sessionStorage: unknown[][];
        id?: string | null | undefined;
        status?: "unknown" | "active" | "revoked" | undefined;
        proxyId?: string | null | undefined;
        metadata?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    session: {
        url: string;
        cookies: {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }[];
        localStorage: unknown[][];
        sessionStorage: unknown[][];
        id?: string | null | undefined;
        status?: "unknown" | "active" | "revoked" | undefined;
        proxyId?: string | null | undefined;
        metadata?: unknown;
    };
    domain: string;
    ownerId?: string | null | undefined;
    appUserId?: string | null | undefined;
}, {
    session: {
        url: string;
        cookies: {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }[];
        localStorage: unknown[][];
        sessionStorage: unknown[][];
        id?: string | null | undefined;
        status?: "unknown" | "active" | "revoked" | undefined;
        proxyId?: string | null | undefined;
        metadata?: unknown;
    };
    domain: string;
    ownerId?: string | null | undefined;
    appUserId?: string | null | undefined;
}>;
export type GetAccountApiV1SessionResponse = z.infer<typeof GetAccountApiV1SessionResponse>;
export declare const GetAccountApiV1SessionResponse: z.ZodUnion<[z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>, z.ZodObject<{
    ownerId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    domain: z.ZodString;
    session: z.ZodObject<{
        id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
        cookies: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodString;
            domain: z.ZodString;
            path: z.ZodString;
            expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            secure: z.ZodBoolean;
            httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }, {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }>, "many">;
        localStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
        sessionStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
        proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        url: z.ZodString;
        metadata: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        cookies: {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }[];
        localStorage: unknown[][];
        sessionStorage: unknown[][];
        id?: string | null | undefined;
        status?: "unknown" | "active" | "revoked" | undefined;
        proxyId?: string | null | undefined;
        metadata?: unknown;
    }, {
        url: string;
        cookies: {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }[];
        localStorage: unknown[][];
        sessionStorage: unknown[][];
        id?: string | null | undefined;
        status?: "unknown" | "active" | "revoked" | undefined;
        proxyId?: string | null | undefined;
        metadata?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    session: {
        url: string;
        cookies: {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }[];
        localStorage: unknown[][];
        sessionStorage: unknown[][];
        id?: string | null | undefined;
        status?: "unknown" | "active" | "revoked" | undefined;
        proxyId?: string | null | undefined;
        metadata?: unknown;
    };
    domain: string;
    ownerId?: string | null | undefined;
    appUserId?: string | null | undefined;
}, {
    session: {
        url: string;
        cookies: {
            value: string;
            name: string;
            domain: string;
            path: string;
            secure: boolean;
            expires?: number | null | undefined;
            httpOnly?: boolean | null | undefined;
            sameSite?: "Lax" | "Strict" | "None" | undefined;
        }[];
        localStorage: unknown[][];
        sessionStorage: unknown[][];
        id?: string | null | undefined;
        status?: "unknown" | "active" | "revoked" | undefined;
        proxyId?: string | null | undefined;
        metadata?: unknown;
    };
    domain: string;
    ownerId?: string | null | undefined;
    appUserId?: string | null | undefined;
}>]>;
export type PostAccountApiV1SessionRequestSessionStatus = z.infer<typeof PostAccountApiV1SessionRequestSessionStatus>;
export declare const PostAccountApiV1SessionRequestSessionStatus: z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>;
export type PostAccountApiV1SessionRequestSessionCookiesItemSameSite = z.infer<typeof PostAccountApiV1SessionRequestSessionCookiesItemSameSite>;
export declare const PostAccountApiV1SessionRequestSessionCookiesItemSameSite: z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>;
export type PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy = z.infer<typeof PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy>;
export declare const PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy: z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>;
export type PostAccountApiV1SessionRequestSessionCookiesItem = z.infer<typeof PostAccountApiV1SessionRequestSessionCookiesItem>;
export declare const PostAccountApiV1SessionRequestSessionCookiesItem: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
    domain: z.ZodString;
    path: z.ZodString;
    expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    secure: z.ZodBoolean;
    hostOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    discard: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    session: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    partitioned: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>, z.ZodUndefined]>>;
    sameSitePolicy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>, z.ZodUndefined]>>;
    storeId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
    domain: string;
    path: string;
    secure: boolean;
    expires?: number | null | undefined;
    hostOnly?: boolean | null | undefined;
    httpOnly?: boolean | null | undefined;
    discard?: boolean | null | undefined;
    session?: boolean | null | undefined;
    partitioned?: boolean | null | undefined;
    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
    storeId?: string | null | undefined;
}, {
    value: string;
    name: string;
    domain: string;
    path: string;
    secure: boolean;
    expires?: number | null | undefined;
    hostOnly?: boolean | null | undefined;
    httpOnly?: boolean | null | undefined;
    discard?: boolean | null | undefined;
    session?: boolean | null | undefined;
    partitioned?: boolean | null | undefined;
    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
    storeId?: string | null | undefined;
}>;
export type PostAccountApiV1SessionRequestSession = z.infer<typeof PostAccountApiV1SessionRequestSession>;
export declare const PostAccountApiV1SessionRequestSession: z.ZodObject<{
    id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
    cookies: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodString;
        domain: z.ZodString;
        path: z.ZodString;
        expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        secure: z.ZodBoolean;
        hostOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        discard: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        session: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        partitioned: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>, z.ZodUndefined]>>;
        sameSitePolicy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>, z.ZodUndefined]>>;
        storeId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        hostOnly?: boolean | null | undefined;
        httpOnly?: boolean | null | undefined;
        discard?: boolean | null | undefined;
        session?: boolean | null | undefined;
        partitioned?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
        sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
        storeId?: string | null | undefined;
    }, {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        hostOnly?: boolean | null | undefined;
        httpOnly?: boolean | null | undefined;
        discard?: boolean | null | undefined;
        session?: boolean | null | undefined;
        partitioned?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
        sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
        storeId?: string | null | undefined;
    }>, "many">;
    localStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    sessionStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    cookies: {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        hostOnly?: boolean | null | undefined;
        httpOnly?: boolean | null | undefined;
        discard?: boolean | null | undefined;
        session?: boolean | null | undefined;
        partitioned?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
        sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
        storeId?: string | null | undefined;
    }[];
    localStorage: string[][];
    sessionStorage: string[][];
    id?: string | null | undefined;
    status?: "unknown" | "active" | "revoked" | undefined;
    proxyId?: string | null | undefined;
}, {
    url: string;
    cookies: {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        hostOnly?: boolean | null | undefined;
        httpOnly?: boolean | null | undefined;
        discard?: boolean | null | undefined;
        session?: boolean | null | undefined;
        partitioned?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
        sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
        storeId?: string | null | undefined;
    }[];
    localStorage: string[][];
    sessionStorage: string[][];
    id?: string | null | undefined;
    status?: "unknown" | "active" | "revoked" | undefined;
    proxyId?: string | null | undefined;
}>;
export type PostAccountApiV1SessionResponse = z.infer<typeof PostAccountApiV1SessionResponse>;
export declare const PostAccountApiV1SessionResponse: z.ZodObject<{
    message: z.ZodString;
    ownerId: z.ZodString;
    domain: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    ownerId: string;
    domain: string;
}, {
    message: string;
    ownerId: string;
    domain: string;
}>;
export type PutAccountApiV1SessionRequestSessionStatus = z.infer<typeof PutAccountApiV1SessionRequestSessionStatus>;
export declare const PutAccountApiV1SessionRequestSessionStatus: z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>;
export type PutAccountApiV1SessionRequestSessionCookiesItemSameSite = z.infer<typeof PutAccountApiV1SessionRequestSessionCookiesItemSameSite>;
export declare const PutAccountApiV1SessionRequestSessionCookiesItemSameSite: z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>;
export type PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy = z.infer<typeof PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy>;
export declare const PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy: z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>;
export type PutAccountApiV1SessionRequestSessionCookiesItem = z.infer<typeof PutAccountApiV1SessionRequestSessionCookiesItem>;
export declare const PutAccountApiV1SessionRequestSessionCookiesItem: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
    domain: z.ZodString;
    path: z.ZodString;
    expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    secure: z.ZodBoolean;
    hostOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    discard: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    session: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    partitioned: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
    sameSitePolicy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
    storeId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
    domain: string;
    path: string;
    secure: boolean;
    expires?: number | null | undefined;
    hostOnly?: boolean | null | undefined;
    httpOnly?: boolean | null | undefined;
    discard?: boolean | null | undefined;
    session?: boolean | null | undefined;
    partitioned?: boolean | null | undefined;
    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
    storeId?: string | null | undefined;
}, {
    value: string;
    name: string;
    domain: string;
    path: string;
    secure: boolean;
    expires?: number | null | undefined;
    hostOnly?: boolean | null | undefined;
    httpOnly?: boolean | null | undefined;
    discard?: boolean | null | undefined;
    session?: boolean | null | undefined;
    partitioned?: boolean | null | undefined;
    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
    storeId?: string | null | undefined;
}>;
export type PutAccountApiV1SessionRequestSession = z.infer<typeof PutAccountApiV1SessionRequestSession>;
export declare const PutAccountApiV1SessionRequestSession: z.ZodObject<{
    id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
    cookies: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodString;
        domain: z.ZodString;
        path: z.ZodString;
        expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        secure: z.ZodBoolean;
        hostOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        discard: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        session: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        partitioned: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
        sameSitePolicy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
        storeId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        hostOnly?: boolean | null | undefined;
        httpOnly?: boolean | null | undefined;
        discard?: boolean | null | undefined;
        session?: boolean | null | undefined;
        partitioned?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
        sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
        storeId?: string | null | undefined;
    }, {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        hostOnly?: boolean | null | undefined;
        httpOnly?: boolean | null | undefined;
        discard?: boolean | null | undefined;
        session?: boolean | null | undefined;
        partitioned?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
        sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
        storeId?: string | null | undefined;
    }>, "many">;
    localStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    sessionStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    cookies: {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        hostOnly?: boolean | null | undefined;
        httpOnly?: boolean | null | undefined;
        discard?: boolean | null | undefined;
        session?: boolean | null | undefined;
        partitioned?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
        sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
        storeId?: string | null | undefined;
    }[];
    localStorage: string[][];
    sessionStorage: string[][];
    id?: string | null | undefined;
    status?: "unknown" | "active" | "revoked" | undefined;
    proxyId?: string | null | undefined;
}, {
    url: string;
    cookies: {
        value: string;
        name: string;
        domain: string;
        path: string;
        secure: boolean;
        expires?: number | null | undefined;
        hostOnly?: boolean | null | undefined;
        httpOnly?: boolean | null | undefined;
        discard?: boolean | null | undefined;
        session?: boolean | null | undefined;
        partitioned?: boolean | null | undefined;
        sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
        sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
        storeId?: string | null | undefined;
    }[];
    localStorage: string[][];
    sessionStorage: string[][];
    id?: string | null | undefined;
    status?: "unknown" | "active" | "revoked" | undefined;
    proxyId?: string | null | undefined;
}>;
export type PutAccountApiV1SessionResponse = z.infer<typeof PutAccountApiV1SessionResponse>;
export declare const PutAccountApiV1SessionResponse: z.ZodObject<{
    message: z.ZodString;
    ownerId: z.ZodString;
    domain: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    ownerId: string;
    domain: string;
}, {
    message: string;
    ownerId: string;
    domain: string;
}>;
export type DeleteSessionResponseError = z.infer<typeof DeleteSessionResponseError>;
export declare const DeleteSessionResponseError: z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>;
export type DeleteSessionResponse = z.infer<typeof DeleteSessionResponse>;
export declare const DeleteSessionResponse: z.ZodObject<{
    appUserId: z.ZodString;
    app: z.ZodString;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    app: string;
}, {
    appUserId: string;
    app: string;
}>;
export type SessionStatus = z.infer<typeof SessionStatus>;
export declare const SessionStatus: z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"unknown">, z.ZodLiteral<"revoked">]>;
export type GetAccountApiV1SessionStatusResponse = z.infer<typeof GetAccountApiV1SessionStatusResponse>;
export declare const GetAccountApiV1SessionStatusResponse: z.ZodObject<{
    status: z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"unknown">, z.ZodLiteral<"revoked">]>;
}, "strip", z.ZodTypeAny, {
    status: "unknown" | "active" | "revoked";
}, {
    status: "unknown" | "active" | "revoked";
}>;
export type GetAccountApiV1SessionRequestResponseDetails = z.infer<typeof GetAccountApiV1SessionRequestResponseDetails>;
export declare const GetAccountApiV1SessionRequestResponseDetails: z.ZodObject<{
    requestId: z.ZodString;
    appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    appSdkClientId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    domain: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    requestId: string;
    appUserId?: string | null | undefined;
    appSdkClientId?: string | null | undefined;
    domain?: string | null | undefined;
}, {
    requestId: string;
    appUserId?: string | null | undefined;
    appSdkClientId?: string | null | undefined;
    domain?: string | null | undefined;
}>;
export type GetAccountApiV1SessionRequestResponse = z.infer<typeof GetAccountApiV1SessionRequestResponse>;
export declare const GetAccountApiV1SessionRequestResponse: z.ZodObject<{
    message: z.ZodString;
    succeeded: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
    status: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    details: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        requestId: z.ZodString;
        appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        appSdkClientId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        domain: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        requestId: string;
        appUserId?: string | null | undefined;
        appSdkClientId?: string | null | undefined;
        domain?: string | null | undefined;
    }, {
        requestId: string;
        appUserId?: string | null | undefined;
        appSdkClientId?: string | null | undefined;
        domain?: string | null | undefined;
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    succeeded?: boolean | null | undefined;
    status?: string | null | undefined;
    details?: {
        requestId: string;
        appUserId?: string | null | undefined;
        appSdkClientId?: string | null | undefined;
        domain?: string | null | undefined;
    } | undefined;
}, {
    message: string;
    succeeded?: boolean | null | undefined;
    status?: string | null | undefined;
    details?: {
        requestId: string;
        appUserId?: string | null | undefined;
        appSdkClientId?: string | null | undefined;
        domain?: string | null | undefined;
    } | undefined;
}>;
export type PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization = z.infer<typeof PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization>;
export declare const PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization: z.ZodObject<{
    iosAppId: z.ZodString;
    authToken: z.ZodString;
}, "strip", z.ZodTypeAny, {
    iosAppId: string;
    authToken: string;
}, {
    iosAppId: string;
    authToken: string;
}>;
export type PostAccountApiV1SessionRequestRequestAccountAccount = z.infer<typeof PostAccountApiV1SessionRequestRequestAccountAccount>;
export declare const PostAccountApiV1SessionRequestRequestAccountAccount: z.ZodObject<{
    ownerId: z.ZodString;
    domain: z.ZodString;
}, "strip", z.ZodTypeAny, {
    ownerId: string;
    domain: string;
}, {
    ownerId: string;
    domain: string;
}>;
export type PostAccountApiV1SessionRequestRequestAccount = z.infer<typeof PostAccountApiV1SessionRequestRequestAccount>;
export declare const PostAccountApiV1SessionRequestRequestAccount: z.ZodObject<{
    iosPushAuthorization: z.ZodObject<{
        iosAppId: z.ZodString;
        authToken: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        iosAppId: string;
        authToken: string;
    }, {
        iosAppId: string;
        authToken: string;
    }>;
    account: z.ZodObject<{
        ownerId: z.ZodString;
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ownerId: string;
        domain: string;
    }, {
        ownerId: string;
        domain: string;
    }>;
    appSdkClientId: z.ZodString;
    alertBody: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    alertTitle: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appSdkClientId: string;
    iosPushAuthorization: {
        iosAppId: string;
        authToken: string;
    };
    account: {
        ownerId: string;
        domain: string;
    };
    alertBody?: string | null | undefined;
    alertTitle?: string | null | undefined;
}, {
    appSdkClientId: string;
    iosPushAuthorization: {
        iosAppId: string;
        authToken: string;
    };
    account: {
        ownerId: string;
        domain: string;
    };
    alertBody?: string | null | undefined;
    alertTitle?: string | null | undefined;
}>;
export type PostAccountApiV1SessionRequestRequestApp = z.infer<typeof PostAccountApiV1SessionRequestRequestApp>;
export declare const PostAccountApiV1SessionRequestRequestApp: z.ZodObject<{
    appUserId: z.ZodString;
    app: z.ZodString;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    app: string;
}, {
    appUserId: string;
    app: string;
}>;
export type PostAccountApiV1SessionRequestRequest = z.infer<typeof PostAccountApiV1SessionRequestRequest>;
export declare const PostAccountApiV1SessionRequestRequest: z.ZodUnion<[z.ZodObject<{
    iosPushAuthorization: z.ZodObject<{
        iosAppId: z.ZodString;
        authToken: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        iosAppId: string;
        authToken: string;
    }, {
        iosAppId: string;
        authToken: string;
    }>;
    account: z.ZodObject<{
        ownerId: z.ZodString;
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        ownerId: string;
        domain: string;
    }, {
        ownerId: string;
        domain: string;
    }>;
    appSdkClientId: z.ZodString;
    alertBody: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    alertTitle: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    appSdkClientId: string;
    iosPushAuthorization: {
        iosAppId: string;
        authToken: string;
    };
    account: {
        ownerId: string;
        domain: string;
    };
    alertBody?: string | null | undefined;
    alertTitle?: string | null | undefined;
}, {
    appSdkClientId: string;
    iosPushAuthorization: {
        iosAppId: string;
        authToken: string;
    };
    account: {
        ownerId: string;
        domain: string;
    };
    alertBody?: string | null | undefined;
    alertTitle?: string | null | undefined;
}>, z.ZodObject<{
    appUserId: z.ZodString;
    app: z.ZodString;
}, "strip", z.ZodTypeAny, {
    appUserId: string;
    app: string;
}, {
    appUserId: string;
    app: string;
}>]>;
export type PostAccountApiV1SessionRequestResponse = z.infer<typeof PostAccountApiV1SessionRequestResponse>;
export declare const PostAccountApiV1SessionRequestResponse: z.ZodObject<{
    message: z.ZodString;
    status: z.ZodString;
    requestId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    status: string;
    requestId: string;
}, {
    message: string;
    status: string;
    requestId: string;
}>;
export type ListSessionsResponseItemAppUser = z.infer<typeof ListSessionsResponseItemAppUser>;
export declare const ListSessionsResponseItemAppUser: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    email?: string | null | undefined;
}, {
    id: string;
    email?: string | null | undefined;
}>;
export type ListSessionsResponseItem = z.infer<typeof ListSessionsResponseItem>;
export declare const ListSessionsResponseItem: z.ZodObject<{
    sessionId: z.ZodString;
    app: z.ZodString;
    appUser: z.ZodObject<{
        id: z.ZodString;
        email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        email?: string | null | undefined;
    }, {
        id: string;
        email?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    app: string;
    sessionId: string;
    appUser: {
        id: string;
        email?: string | null | undefined;
    };
}, {
    app: string;
    sessionId: string;
    appUser: {
        id: string;
        email?: string | null | undefined;
    };
}>;
export type ListSessionsResponse = z.infer<typeof ListSessionsResponse>;
export declare const ListSessionsResponse: z.ZodObject<{
    sessions: z.ZodArray<z.ZodObject<{
        sessionId: z.ZodString;
        app: z.ZodString;
        appUser: z.ZodObject<{
            id: z.ZodString;
            email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            email?: string | null | undefined;
        }, {
            id: string;
            email?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        app: string;
        sessionId: string;
        appUser: {
            id: string;
            email?: string | null | undefined;
        };
    }, {
        app: string;
        sessionId: string;
        appUser: {
            id: string;
            email?: string | null | undefined;
        };
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    sessions: {
        app: string;
        sessionId: string;
        appUser: {
            id: string;
            email?: string | null | undefined;
        };
    }[];
}, {
    sessions: {
        app: string;
        sessionId: string;
        appUser: {
            id: string;
            email?: string | null | undefined;
        };
    }[];
}>;
export type PostAccountApiV1SessionAccessGrantResponse = z.infer<typeof PostAccountApiV1SessionAccessGrantResponse>;
export declare const PostAccountApiV1SessionAccessGrantResponse: z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>;
export type DeleteAccountApiV1SessionAccessGrantResponse = z.infer<typeof DeleteAccountApiV1SessionAccessGrantResponse>;
export declare const DeleteAccountApiV1SessionAccessGrantResponse: z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>;
export type JwksBody = z.infer<typeof JwksBody>;
export declare const JwksBody: z.ZodObject<{
    jwksUri: z.ZodString;
    idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    jwksUri: string;
    idClaim?: string | null | undefined;
}, {
    jwksUri: string;
    idClaim?: string | null | undefined;
}>;
export type AuthorizationType = z.infer<typeof AuthorizationType>;
export declare const AuthorizationType: z.ZodObject<{
    jwksUri: z.ZodString;
    idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    jwksUri: string;
    idClaim?: string | null | undefined;
}, {
    jwksUri: string;
    idClaim?: string | null | undefined;
}>;
export type AuthorizationTypeInput = z.infer<typeof AuthorizationTypeInput>;
export declare const AuthorizationTypeInput: z.ZodObject<{
    jwksUri: z.ZodString;
    idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    jwksUri: string;
    idClaim?: string | null | undefined;
}, {
    jwksUri: string;
    idClaim?: string | null | undefined;
}>;
export type CreateUserPool = z.infer<typeof CreateUserPool>;
export declare const CreateUserPool: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    authorization: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        jwksUri: z.ZodString;
        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }>, z.ZodUndefined]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description: string;
    authorization?: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    } | undefined;
}, {
    name: string;
    description: string;
    authorization?: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    } | undefined;
}>;
export type UserPool = z.infer<typeof UserPool>;
export declare const UserPool: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    authorization: z.ZodObject<{
        jwksUri: z.ZodString;
        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }>;
    organizationId: z.ZodString;
    hosted: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    organizationId: string;
    description: string;
    authorization: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    };
    hosted: boolean;
}, {
    id: string;
    name: string;
    organizationId: string;
    description: string;
    authorization: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    };
    hosted: boolean;
}>;
export type UserPoolListItem = z.infer<typeof UserPoolListItem>;
export declare const UserPoolListItem: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    authorization: z.ZodObject<{
        jwksUri: z.ZodString;
        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }>;
    hosted: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    description: string;
    authorization: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    };
    hosted: boolean;
}, {
    id: string;
    name: string;
    description: string;
    authorization: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    };
    hosted: boolean;
}>;
export type UserPoolList = z.infer<typeof UserPoolList>;
export declare const UserPoolList: z.ZodObject<{
    resource: z.ZodString;
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        authorization: z.ZodObject<{
            jwksUri: z.ZodString;
            idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            jwksUri: string;
            idClaim?: string | null | undefined;
        }, {
            jwksUri: string;
            idClaim?: string | null | undefined;
        }>;
        hosted: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        description: string;
        authorization: {
            jwksUri: string;
            idClaim?: string | null | undefined;
        };
        hosted: boolean;
    }, {
        id: string;
        name: string;
        description: string;
        authorization: {
            jwksUri: string;
            idClaim?: string | null | undefined;
        };
        hosted: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    resource: string;
    items: {
        id: string;
        name: string;
        description: string;
        authorization: {
            jwksUri: string;
            idClaim?: string | null | undefined;
        };
        hosted: boolean;
    }[];
}, {
    resource: string;
    items: {
        id: string;
        name: string;
        description: string;
        authorization: {
            jwksUri: string;
            idClaim?: string | null | undefined;
        };
        hosted: boolean;
    }[];
}>;
export type UpdateUserPool = z.infer<typeof UpdateUserPool>;
export declare const UpdateUserPool: z.ZodObject<{
    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    authorization: z.ZodOptional<z.ZodObject<{
        jwksUri: z.ZodString;
        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }, {
        jwksUri: string;
        idClaim?: string | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name?: string | null | undefined;
    description?: string | null | undefined;
    authorization?: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    } | undefined;
}, {
    name?: string | null | undefined;
    description?: string | null | undefined;
    authorization?: {
        jwksUri: string;
        idClaim?: string | null | undefined;
    } | undefined;
}>;
export type get_Actions_linkedinListConversations = typeof get_Actions_linkedinListConversations;
export declare const get_Actions_linkedinListConversations: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/actions/linkedin/listConversations">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            profileName: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            profileId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            appUserId: z.ZodString;
            contentType: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            profileName?: string | null | undefined;
            profileId?: string | null | undefined;
            contentType?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        }, {
            appUserId: string;
            profileName?: string | null | undefined;
            profileId?: string | null | undefined;
            contentType?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId: string;
            profileName?: string | null | undefined;
            profileId?: string | null | undefined;
            contentType?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        query: {
            appUserId: string;
            profileName?: string | null | undefined;
            profileId?: string | null | undefined;
            contentType?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        conversations: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
            profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            unreadCount: z.ZodNumber;
            archived: z.ZodBoolean;
            mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
            readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
            subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
            organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
            profiles: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                isSelf: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }, {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }>, "many">;
            seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        }, {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        }>, "many">;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        conversations: {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        }[];
        count: number;
    }, {
        conversations: {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        }[];
        count: number;
    }>;
};
export type get_Actions_linkedinListConnections = typeof get_Actions_linkedinListConnections;
export declare const get_Actions_linkedinListConnections: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/actions/linkedin/listConnections">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            cursor: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            profileName: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            appUserId: z.ZodString;
            appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            cursor?: string | null | undefined;
            profileName?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        }, {
            appUserId: string;
            cursor?: string | null | undefined;
            profileName?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId: string;
            cursor?: string | null | undefined;
            profileName?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        query: {
            appUserId: string;
            cursor?: string | null | undefined;
            profileName?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        connections: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            publicIdentifier: z.ZodString;
            publicProfileUrl: z.ZodString;
            createdAt: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            publicIdentifier: string;
            publicProfileUrl: string;
            headline?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            createdAt?: number | null | undefined;
        }, {
            id: string;
            name: string;
            publicIdentifier: string;
            publicProfileUrl: string;
            headline?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            createdAt?: number | null | undefined;
        }>, "many">;
        cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        pageCount: z.ZodNumber;
        totalCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        connections: {
            id: string;
            name: string;
            publicIdentifier: string;
            publicProfileUrl: string;
            headline?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            createdAt?: number | null | undefined;
        }[];
        pageCount: number;
        cursor?: string | null | undefined;
        totalCount?: number | null | undefined;
    }, {
        connections: {
            id: string;
            name: string;
            publicIdentifier: string;
            publicProfileUrl: string;
            headline?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            createdAt?: number | null | undefined;
        }[];
        pageCount: number;
        cursor?: string | null | undefined;
        totalCount?: number | null | undefined;
    }>;
};
export type post_Actions_linkedinCreateConversation = typeof post_Actions_linkedinCreateConversation;
export declare const post_Actions_linkedinCreateConversation: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/actions/linkedin/createConversation">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            profileId: z.ZodString;
            appUserId: z.ZodString;
            message: z.ZodString;
            appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            profileId: string;
            appUserId: string;
            appUserPoolId?: string | null | undefined;
        }, {
            message: string;
            profileId: string;
            appUserId: string;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            message: string;
            profileId: string;
            appUserId: string;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        body: {
            message: string;
            profileId: string;
            appUserId: string;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        success: z.ZodBoolean;
        conversationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        conversationId?: string | null | undefined;
    }, {
        success: boolean;
        conversationId?: string | null | undefined;
    }>;
};
export type get_Actions_linkedinGetConversation = typeof get_Actions_linkedinGetConversation;
export declare const get_Actions_linkedinGetConversation: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/actions/linkedin/getConversation">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            id: z.ZodString;
            appUserId: z.ZodString;
            appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        }, {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        query: {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        conversation: z.ZodObject<{
            messages: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                text: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                edited: z.ZodBoolean;
                deleted: z.ZodBoolean;
                delivered: z.ZodBoolean;
                timestamp: z.ZodString;
                senderProfileId: z.ZodString;
                senderProfileName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }, {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }>, "many">;
            id: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
            profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            unreadCount: z.ZodNumber;
            archived: z.ZodBoolean;
            mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
            readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
            subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
            organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
            profiles: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                isSelf: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }, {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }>, "many">;
            seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            messages: {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        }, {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            messages: {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        }>;
    }, "strip", z.ZodTypeAny, {
        conversation: {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            messages: {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        };
    }, {
        conversation: {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            messages: {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        };
    }>;
};
export type get_Actions_linkedinListMessages = typeof get_Actions_linkedinListMessages;
export declare const get_Actions_linkedinListMessages: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/actions/linkedin/listMessages">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            id: z.ZodString;
            appUserId: z.ZodString;
            appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        }, {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        query: {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        conversation: z.ZodObject<{
            messages: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                text: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                edited: z.ZodBoolean;
                deleted: z.ZodBoolean;
                delivered: z.ZodBoolean;
                timestamp: z.ZodString;
                senderProfileId: z.ZodString;
                senderProfileName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }, {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }>, "many">;
            id: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
            profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            unreadCount: z.ZodNumber;
            archived: z.ZodBoolean;
            mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
            readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
            subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
            organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
            profiles: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                isSelf: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }, {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }>, "many">;
            seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            messages: {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        }, {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            messages: {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        }>;
    }, "strip", z.ZodTypeAny, {
        conversation: {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            messages: {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        };
    }, {
        conversation: {
            type: "SINGLE" | "GROUP";
            id: string;
            unreadCount: number;
            archived: boolean;
            readOnly: "0" | "1" | "2";
            profiles: {
                id: string;
                name: string;
                isSelf: boolean;
                profileUrl?: string | null | undefined;
            }[];
            messages: {
                id: string;
                timestamp: string;
                edited: boolean;
                deleted: boolean;
                delivered: boolean;
                senderProfileId: string;
                senderProfileName: string;
                text?: string | null | undefined;
            }[];
            profileId?: string | null | undefined;
            timestamp?: string | null | undefined;
            mutedUntil?: string | number | undefined;
            subject?: string | null | undefined;
            folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
            organizationId?: string | null | undefined;
            mailboxId?: string | null | undefined;
            contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
            seen?: boolean | null | undefined;
            seenBy?: unknown;
        };
    }>;
};
export type post_Actions_linkedinSendMessage = typeof post_Actions_linkedinSendMessage;
export declare const post_Actions_linkedinSendMessage: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/actions/linkedin/sendMessage">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            message: z.ZodString;
            appUserId: z.ZodString;
            conversationId: z.ZodString;
            appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            appUserId: string;
            conversationId: string;
            appUserPoolId?: string | null | undefined;
        }, {
            message: string;
            appUserId: string;
            conversationId: string;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            message: string;
            appUserId: string;
            conversationId: string;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        body: {
            message: string;
            appUserId: string;
            conversationId: string;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
    }, {
        success: boolean;
    }>;
};
export type get_Actions_linkedinGetProfile = typeof get_Actions_linkedinGetProfile;
export declare const get_Actions_linkedinGetProfile: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/actions/linkedin/getProfile">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            id: z.ZodString;
            appUserId: z.ZodString;
            appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        }, {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        query: {
            appUserId: string;
            id: string;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        firstName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        lastName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        headline: z.ZodString;
        profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        publicIdentifier: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        publicProfileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        summary: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        education: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            degree: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            school: z.ZodString;
            fieldOfStudy: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            school: string;
            degree?: string | null | undefined;
            fieldOfStudy?: string | null | undefined;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }, {
            school: string;
            degree?: string | null | undefined;
            fieldOfStudy?: string | null | undefined;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }>, "many">, z.ZodNull, z.ZodUndefined]>>;
        languages: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            proficiency: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            proficiency?: string | null | undefined;
        }, {
            name: string;
            proficiency?: string | null | undefined;
        }>, "many">, z.ZodNull, z.ZodUndefined]>>;
        skills: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            endorsementCount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            endorsementCount: number;
        }, {
            name: string;
            endorsementCount: number;
        }>, "many">, z.ZodNull, z.ZodUndefined]>>;
        certifications: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            organization: z.ZodString;
            url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            organization: string;
            url?: string | null | undefined;
        }, {
            name: string;
            organization: string;
            url?: string | null | undefined;
        }>, "many">, z.ZodNull, z.ZodUndefined]>>;
        networkDistance: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"DISTANCE_1">, z.ZodLiteral<"DISTANCE_2">, z.ZodLiteral<"DISTANCE_3">, z.ZodLiteral<"OUT_OF_NETWORK">]>, z.ZodUndefined]>>;
        contactInfo: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            emails: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
            phones: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
            addresses: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
            socials: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                name: string;
            }, {
                type: string;
                name: string;
            }>, "many">, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            emails?: string[] | null | undefined;
            phones?: string[] | null | undefined;
            addresses?: string[] | null | undefined;
            socials?: {
                type: string;
                name: string;
            }[] | null | undefined;
        }, {
            emails?: string[] | null | undefined;
            phones?: string[] | null | undefined;
            addresses?: string[] | null | undefined;
            socials?: {
                type: string;
                name: string;
            }[] | null | undefined;
        }>, z.ZodUndefined]>>;
        websites: z.ZodArray<z.ZodString, "many">;
        birthdate: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            month: number;
            day: number;
        }, {
            month: number;
            day: number;
        }>, z.ZodUndefined]>>;
        primaryLocale: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            country: z.ZodString;
            language: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            language: string;
        }, {
            country: string;
            language: string;
        }>, z.ZodUndefined]>>;
        backgroundPictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        hashtags: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
        workExperience: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            position: z.ZodString;
            companyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            company: z.ZodString;
            location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            current: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            status: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            position: string;
            company: string;
            companyId?: string | null | undefined;
            location?: string | null | undefined;
            description?: string | null | undefined;
            current?: boolean | null | undefined;
            status?: string | null | undefined;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }, {
            position: string;
            company: string;
            companyId?: string | null | undefined;
            location?: string | null | undefined;
            description?: string | null | undefined;
            current?: boolean | null | undefined;
            status?: string | null | undefined;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }>, "many">, z.ZodNull, z.ZodUndefined]>>;
        volunteeringExperience: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
            company: z.ZodString;
            description: z.ZodString;
            role: z.ZodString;
            cause: z.ZodString;
            start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            company: string;
            description: string;
            role: string;
            cause: string;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }, {
            company: string;
            description: string;
            role: string;
            cause: string;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }>, "many">, z.ZodNull, z.ZodUndefined]>>;
        followerCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        connectionsCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        sharedConnectionsCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        headline: string;
        websites: string[];
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        publicIdentifier?: string | null | undefined;
        publicProfileUrl?: string | null | undefined;
        location?: string | null | undefined;
        summary?: string | null | undefined;
        education?: {
            school: string;
            degree?: string | null | undefined;
            fieldOfStudy?: string | null | undefined;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }[] | null | undefined;
        languages?: {
            name: string;
            proficiency?: string | null | undefined;
        }[] | null | undefined;
        skills?: {
            name: string;
            endorsementCount: number;
        }[] | null | undefined;
        certifications?: {
            name: string;
            organization: string;
            url?: string | null | undefined;
        }[] | null | undefined;
        networkDistance?: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK" | undefined;
        contactInfo?: {
            emails?: string[] | null | undefined;
            phones?: string[] | null | undefined;
            addresses?: string[] | null | undefined;
            socials?: {
                type: string;
                name: string;
            }[] | null | undefined;
        } | undefined;
        birthdate?: {
            month: number;
            day: number;
        } | undefined;
        primaryLocale?: {
            country: string;
            language: string;
        } | undefined;
        backgroundPictureUrl?: string | null | undefined;
        hashtags?: string[] | null | undefined;
        workExperience?: {
            position: string;
            company: string;
            companyId?: string | null | undefined;
            location?: string | null | undefined;
            description?: string | null | undefined;
            current?: boolean | null | undefined;
            status?: string | null | undefined;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }[] | null | undefined;
        volunteeringExperience?: {
            company: string;
            description: string;
            role: string;
            cause: string;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }[] | null | undefined;
        followerCount?: number | null | undefined;
        connectionsCount?: number | null | undefined;
        sharedConnectionsCount?: number | null | undefined;
    }, {
        id: string;
        headline: string;
        websites: string[];
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
        profilePictureUrl?: string | null | undefined;
        publicIdentifier?: string | null | undefined;
        publicProfileUrl?: string | null | undefined;
        location?: string | null | undefined;
        summary?: string | null | undefined;
        education?: {
            school: string;
            degree?: string | null | undefined;
            fieldOfStudy?: string | null | undefined;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }[] | null | undefined;
        languages?: {
            name: string;
            proficiency?: string | null | undefined;
        }[] | null | undefined;
        skills?: {
            name: string;
            endorsementCount: number;
        }[] | null | undefined;
        certifications?: {
            name: string;
            organization: string;
            url?: string | null | undefined;
        }[] | null | undefined;
        networkDistance?: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK" | undefined;
        contactInfo?: {
            emails?: string[] | null | undefined;
            phones?: string[] | null | undefined;
            addresses?: string[] | null | undefined;
            socials?: {
                type: string;
                name: string;
            }[] | null | undefined;
        } | undefined;
        birthdate?: {
            month: number;
            day: number;
        } | undefined;
        primaryLocale?: {
            country: string;
            language: string;
        } | undefined;
        backgroundPictureUrl?: string | null | undefined;
        hashtags?: string[] | null | undefined;
        workExperience?: {
            position: string;
            company: string;
            companyId?: string | null | undefined;
            location?: string | null | undefined;
            description?: string | null | undefined;
            current?: boolean | null | undefined;
            status?: string | null | undefined;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }[] | null | undefined;
        volunteeringExperience?: {
            company: string;
            description: string;
            role: string;
            cause: string;
            start?: string | null | undefined;
            end?: string | null | undefined;
        }[] | null | undefined;
        followerCount?: number | null | undefined;
        connectionsCount?: number | null | undefined;
        sharedConnectionsCount?: number | null | undefined;
    }>;
};
export type post_Actions_linkedinSendConnectionRequest = typeof post_Actions_linkedinSendConnectionRequest;
export declare const post_Actions_linkedinSendConnectionRequest: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/actions/linkedin/sendConnectionRequest">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            profileId: z.ZodString;
            appUserId: z.ZodString;
            message: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            profileId: string;
            appUserId: string;
            message?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        }, {
            profileId: string;
            appUserId: string;
            message?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            profileId: string;
            appUserId: string;
            message?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        body: {
            profileId: string;
            appUserId: string;
            message?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
    }, {
        success: boolean;
    }>;
};
export type post_Actions_linkedinSearchProfiles = typeof post_Actions_linkedinSearchProfiles;
export declare const post_Actions_linkedinSearchProfiles: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/actions/linkedin/search">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            profileName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            connectionsOf: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            appUserId: z.ZodString;
            networkDistance: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"1">, z.ZodLiteral<"2">, z.ZodLiteral<"3">, z.ZodLiteral<"4">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
            appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            cursor?: string | null | undefined;
            profileName?: string | null | undefined;
            connectionsOf?: string | null | undefined;
            networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
            appUserPoolId?: string | null | undefined;
        }, {
            appUserId: string;
            cursor?: string | null | undefined;
            profileName?: string | null | undefined;
            connectionsOf?: string | null | undefined;
            networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            appUserId: string;
            cursor?: string | null | undefined;
            profileName?: string | null | undefined;
            connectionsOf?: string | null | undefined;
            networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        body: {
            appUserId: string;
            cursor?: string | null | undefined;
            profileName?: string | null | undefined;
            connectionsOf?: string | null | undefined;
            networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        pageCount: z.ZodNumber;
        profiles: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            publicIdentifier: z.ZodString;
            publicProfileUrl: z.ZodString;
            profileUrl: z.ZodString;
            networkDistance: z.ZodUnion<[z.ZodLiteral<"DISTANCE_1">, z.ZodLiteral<"DISTANCE_2">, z.ZodLiteral<"DISTANCE_3">, z.ZodLiteral<"OUT_OF_NETWORK">]>;
            location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            profileUrl: string;
            publicIdentifier: string;
            publicProfileUrl: string;
            networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
            headline?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            location?: string | null | undefined;
        }, {
            id: string;
            name: string;
            profileUrl: string;
            publicIdentifier: string;
            publicProfileUrl: string;
            networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
            headline?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            location?: string | null | undefined;
        }>, "many">;
        totalCount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        profiles: {
            id: string;
            name: string;
            profileUrl: string;
            publicIdentifier: string;
            publicProfileUrl: string;
            networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
            headline?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            location?: string | null | undefined;
        }[];
        pageCount: number;
        totalCount: number;
        cursor?: string | null | undefined;
    }, {
        profiles: {
            id: string;
            name: string;
            profileUrl: string;
            publicIdentifier: string;
            publicProfileUrl: string;
            networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
            headline?: string | null | undefined;
            profilePictureUrl?: string | null | undefined;
            location?: string | null | undefined;
        }[];
        pageCount: number;
        totalCount: number;
        cursor?: string | null | undefined;
    }>;
};
export type get_Activity_getActivityEvents = typeof get_Activity_getActivityEvents;
export declare const get_Activity_getActivityEvents: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/account/api/v1/activity">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            activityType: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>>;
            app: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            startTime: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            endTime: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            userId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            order: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            groupId?: string | null | undefined;
            activityType?: "Link" | "runtime" | undefined;
            app?: string | null | undefined;
            startTime?: string | null | undefined;
            endTime?: string | null | undefined;
            userId?: string | null | undefined;
            order?: string | null | undefined;
        }, {
            groupId?: string | null | undefined;
            activityType?: "Link" | "runtime" | undefined;
            app?: string | null | undefined;
            startTime?: string | null | undefined;
            endTime?: string | null | undefined;
            userId?: string | null | undefined;
            order?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            groupId?: string | null | undefined;
            activityType?: "Link" | "runtime" | undefined;
            app?: string | null | undefined;
            startTime?: string | null | undefined;
            endTime?: string | null | undefined;
            userId?: string | null | undefined;
            order?: string | null | undefined;
        };
    }, {
        query: {
            groupId?: string | null | undefined;
            activityType?: "Link" | "runtime" | undefined;
            app?: string | null | undefined;
            startTime?: string | null | undefined;
            endTime?: string | null | undefined;
            userId?: string | null | undefined;
            order?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        events: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            activityType: z.ZodString;
            id: z.ZodString;
            groupId: z.ZodString;
            datetime: z.ZodNumber;
            organizationId: z.ZodString;
            organizationName: z.ZodString;
            sdkClientId: z.ZodString;
            sdkClientName: z.ZodString;
            anonAppUserId: z.ZodString;
            data: z.ZodUnion<[z.ZodObject<{
                app: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                app: string;
            }, {
                type: string;
                app: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            }, {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
                isInitiallyInstalled: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            }, {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
            }, {
                type: string;
                chromeExtensionId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
            }, {
                type: string;
                chromeExtensionId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                app: z.ZodString;
                authUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                app: string;
                authUrl: string;
            }, {
                type: string;
                app: string;
                authUrl: string;
            }>]>;
            anonUserId: z.ZodString;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            id: string;
            groupId: string;
            activityType: string;
            userId: string;
            organizationId: string;
            anonUserId: string;
            datetime: number;
            organizationName: string;
            sdkClientId: string;
            sdkClientName: string;
            anonAppUserId: string;
        }, {
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            id: string;
            groupId: string;
            activityType: string;
            userId: string;
            organizationId: string;
            anonUserId: string;
            datetime: number;
            organizationName: string;
            sdkClientId: string;
            sdkClientName: string;
            anonAppUserId: string;
        }>, z.ZodObject<{
            activityType: z.ZodString;
            browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
            id: z.ZodString;
            groupId: z.ZodString;
            datetime: z.ZodNumber;
            organizationId: z.ZodString;
            organizationName: z.ZodString;
            sdkClientId: z.ZodString;
            sdkClientName: z.ZodString;
            anonAppUserId: z.ZodString;
            data: z.ZodUnion<[z.ZodObject<{
                type: z.ZodString;
                sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                apps: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            }, {
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodString;
                anonUserId: z.ZodString;
                apps: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: string;
                apps: string[];
                anonUserId: string;
            }, {
                type: string;
                apps: string[];
                anonUserId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            }, {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                service: z.ZodString;
                sessionId: z.ZodString;
                cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            }, {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                url: z.ZodString;
                base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                isOnAuthenticatedPage: z.ZodBoolean;
                isLoggedIn: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }, {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }>]>;
            anonUserId: z.ZodString;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            id: string;
            groupId: string;
            activityType: string;
            userId: string;
            organizationId: string;
            anonUserId: string;
            datetime: number;
            organizationName: string;
            sdkClientId: string;
            sdkClientName: string;
            anonAppUserId: string;
            browserType: "local" | "managed" | "remote";
        }, {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            id: string;
            groupId: string;
            activityType: string;
            userId: string;
            organizationId: string;
            anonUserId: string;
            datetime: number;
            organizationName: string;
            sdkClientId: string;
            sdkClientName: string;
            anonAppUserId: string;
            browserType: "local" | "managed" | "remote";
        }>]>, "many">;
    }, "strip", z.ZodTypeAny, {
        events: ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            id: string;
            groupId: string;
            activityType: string;
            userId: string;
            organizationId: string;
            anonUserId: string;
            datetime: number;
            organizationName: string;
            sdkClientId: string;
            sdkClientName: string;
            anonAppUserId: string;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            id: string;
            groupId: string;
            activityType: string;
            userId: string;
            organizationId: string;
            anonUserId: string;
            datetime: number;
            organizationName: string;
            sdkClientId: string;
            sdkClientName: string;
            anonAppUserId: string;
            browserType: "local" | "managed" | "remote";
        })[];
    }, {
        events: ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            id: string;
            groupId: string;
            activityType: string;
            userId: string;
            organizationId: string;
            anonUserId: string;
            datetime: number;
            organizationName: string;
            sdkClientId: string;
            sdkClientName: string;
            anonAppUserId: string;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            id: string;
            groupId: string;
            activityType: string;
            userId: string;
            organizationId: string;
            anonUserId: string;
            datetime: number;
            organizationName: string;
            sdkClientId: string;
            sdkClientName: string;
            anonAppUserId: string;
            browserType: "local" | "managed" | "remote";
        })[];
    }>;
};
export type post_Activity_createEvent = typeof post_Activity_createEvent;
export declare const post_Activity_createEvent: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/activity">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodUnion<[z.ZodObject<{
            activityType: z.ZodString;
            datetime: z.ZodNumber;
            groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            data: z.ZodUnion<[z.ZodObject<{
                app: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                app: string;
            }, {
                type: string;
                app: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            }, {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
                isInitiallyInstalled: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            }, {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
            }, {
                type: string;
                chromeExtensionId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
            }, {
                type: string;
                chromeExtensionId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                app: z.ZodString;
                authUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                app: string;
                authUrl: string;
            }, {
                type: string;
                app: string;
                authUrl: string;
            }>]>;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        }, {
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        }>, z.ZodObject<{
            activityType: z.ZodString;
            browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
            datetime: z.ZodNumber;
            groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            data: z.ZodUnion<[z.ZodObject<{
                type: z.ZodString;
                sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                apps: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            }, {
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodString;
                anonUserId: z.ZodString;
                apps: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: string;
                apps: string[];
                anonUserId: string;
            }, {
                type: string;
                apps: string[];
                anonUserId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            }, {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                service: z.ZodString;
                sessionId: z.ZodString;
                cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            }, {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                url: z.ZodString;
                base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                isOnAuthenticatedPage: z.ZodBoolean;
                isLoggedIn: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }, {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }>]>;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        }, {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        body: ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        }) & ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        } | undefined);
    }, {
        body: ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        }) & ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        } | undefined);
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        groupId: z.ZodString;
        id: z.ZodString;
        activityType: z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: string;
        groupId: string;
        activityType: "Link" | "runtime";
    }, {
        type: string;
        id: string;
        groupId: string;
        activityType: "Link" | "runtime";
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
    }, {
        type: string;
        error: string;
    }>]>;
};
export type post_Activity_createEventWithGroupId = typeof post_Activity_createEventWithGroupId;
export declare const post_Activity_createEventWithGroupId: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/activity/{groupId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            groupId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            groupId: string;
        }, {
            groupId: string;
        }>;
        body: z.ZodUnion<[z.ZodObject<{
            activityType: z.ZodString;
            datetime: z.ZodNumber;
            groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            data: z.ZodUnion<[z.ZodObject<{
                app: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                app: string;
            }, {
                type: string;
                app: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            }, {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
                isInitiallyInstalled: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            }, {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
            }, {
                type: string;
                chromeExtensionId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                chromeExtensionId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                chromeExtensionId: string;
            }, {
                type: string;
                chromeExtensionId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                app: z.ZodString;
                authUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                app: string;
                authUrl: string;
            }, {
                type: string;
                app: string;
                authUrl: string;
            }>]>;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        }, {
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        }>, z.ZodObject<{
            activityType: z.ZodString;
            browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
            datetime: z.ZodNumber;
            groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            data: z.ZodUnion<[z.ZodObject<{
                type: z.ZodString;
                sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                apps: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            }, {
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodString;
                anonUserId: z.ZodString;
                apps: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: string;
                apps: string[];
                anonUserId: string;
            }, {
                type: string;
                apps: string[];
                anonUserId: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            }, {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
                errorStack: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                errorStack: string;
            }, {
                type: string;
                error: string;
                errorStack: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                service: z.ZodString;
                sessionId: z.ZodString;
                cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            }, {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
            }, {
                type: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                url: z.ZodString;
                base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                isOnAuthenticatedPage: z.ZodBoolean;
                isLoggedIn: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }, {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }>]>;
            userId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        }, {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        body: ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        }) & ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        } | undefined);
        path: {
            groupId: string;
        };
    }, {
        body: ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        }) & ({
            data: ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            }) & ({
                type: string;
                app: string;
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
            } | {
                type: string;
                chromeExtensionId: string;
                isInitiallyInstalled: boolean;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                chromeExtensionId: string;
            } | {
                type: string;
                app: string;
                authUrl: string;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            groupId?: string | null | undefined;
        } | {
            data: ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            }) & ({
                type: string;
                apps: string[];
                sdkVersion?: string | null | undefined;
            } | {
                type: string;
                apps: string[];
                anonUserId: string;
            } | {
                type: string;
                error: string;
                errorType: "injectSessionError" | "proxyConnectionError";
            } | {
                type: string;
            } | {
                type: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                error: string;
                errorStack: string;
            } | {
                type: string;
                service: string;
                sessionId: string;
                cdpUrl?: string | null | undefined;
                liveStreamingUrl?: string | null | undefined;
            } | {
                type: string;
            } | {
                type: string;
                url: string;
                isOnAuthenticatedPage: boolean;
                isLoggedIn: boolean;
                base64ImageUrl?: string | null | undefined;
            } | undefined);
            activityType: string;
            userId: string;
            datetime: number;
            browserType: "local" | "managed" | "remote";
            groupId?: string | null | undefined;
        } | undefined);
        path: {
            groupId: string;
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        type: z.ZodString;
        groupId: z.ZodString;
        id: z.ZodString;
        activityType: z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: string;
        groupId: string;
        activityType: "Link" | "runtime";
    }, {
        type: string;
        id: string;
        groupId: string;
        activityType: "Link" | "runtime";
    }>, z.ZodObject<{
        type: z.ZodString;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        error: string;
    }, {
        type: string;
        error: string;
    }>]>;
};
export type get_AppIntegrations_listAppIntegrations = typeof get_AppIntegrations_listAppIntegrations;
export declare const get_AppIntegrations_listAppIntegrations: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/account/api/v1/appIntegrations">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodNever;
    response: z.ZodObject<{
        apps: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            iconUrl: z.ZodString;
            experimental: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            domains: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            id: string;
            iconUrl: string;
            name: string;
            domains: string[];
            experimental?: boolean | null | undefined;
        }, {
            id: string;
            iconUrl: string;
            name: string;
            domains: string[];
            experimental?: boolean | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        apps: {
            id: string;
            iconUrl: string;
            name: string;
            domains: string[];
            experimental?: boolean | null | undefined;
        }[];
    }, {
        apps: {
            id: string;
            iconUrl: string;
            name: string;
            domains: string[];
            experimental?: boolean | null | undefined;
        }[];
    }>;
};
export type post_AppUserIdToken_createAppUserIdToken = typeof post_AppUserIdToken_createAppUserIdToken;
export declare const post_AppUserIdToken_createAppUserIdToken: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/org/appUserIdToken">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodUnion<[z.ZodObject<{
            appUserId: z.ZodString;
            exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            exp?: number | null | undefined;
        }, {
            appUserId: string;
            exp?: number | null | undefined;
        }>, z.ZodObject<{
            sdkClientId: z.ZodString;
            appUserId: z.ZodString;
            exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        }, {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        }>, z.ZodObject<{
            userPoolId: z.ZodString;
            appUserId: z.ZodString;
            exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        }, {
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        body: ({
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            exp?: number | null | undefined;
        }) & ({
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            exp?: number | null | undefined;
        } | undefined);
    }, {
        body: ({
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            exp?: number | null | undefined;
        }) & ({
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            exp?: number | null | undefined;
        } | undefined);
    }>;
    response: z.ZodObject<{
        appUserIdToken: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        appUserIdToken: string;
    }, {
        appUserIdToken: string;
    }>;
};
export type post_Link_initiateLink = typeof post_Link_initiateLink;
export declare const post_Link_initiateLink: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/link">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            app: z.ZodUnion<[z.ZodLiteral<"rippling">, z.ZodLiteral<"gusto">]>;
            appUserId: z.ZodString;
            provider: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"browserbase">, z.ZodLiteral<"rebrowser">, z.ZodLiteral<"undetect">]>, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            app: "rippling" | "gusto";
            provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
        }, {
            appUserId: string;
            app: "rippling" | "gusto";
            provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            appUserId: string;
            app: "rippling" | "gusto";
            provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
        };
    }, {
        body: {
            appUserId: string;
            app: "rippling" | "gusto";
            provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
        };
    }>;
    response: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
        status: z.ZodOptional<z.ZodLiteral<"SUCCESS">>;
    }, "strip", z.ZodTypeAny, {
        status?: "SUCCESS" | undefined;
    }, {
        status?: "SUCCESS" | undefined;
    }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodOptional<z.ZodLiteral<"FAILURE">>;
    }, "strip", z.ZodTypeAny, {
        status?: "FAILURE" | undefined;
    }, {
        status?: "FAILURE" | undefined;
    }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodOptional<z.ZodLiteral<"IN_PROGRESS">>;
    }, "strip", z.ZodTypeAny, {
        status?: "IN_PROGRESS" | undefined;
    }, {
        status?: "IN_PROGRESS" | undefined;
    }>, z.ZodObject<{
        schema: z.ZodArray<z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
            label: z.ZodOptional<z.ZodLiteral<"email">>;
        }, "strip", z.ZodTypeAny, {
            label?: "email" | undefined;
        }, {
            label?: "email" | undefined;
        }>, z.ZodObject<{
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
        }, {
            description: string;
        }>>, z.ZodIntersection<z.ZodObject<{
            label: z.ZodOptional<z.ZodLiteral<"password">>;
        }, "strip", z.ZodTypeAny, {
            label?: "password" | undefined;
        }, {
            label?: "password" | undefined;
        }>, z.ZodObject<{
            description: z.ZodString;
            sensitive: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            description: string;
            sensitive: boolean;
        }, {
            description: string;
            sensitive: boolean;
        }>>, z.ZodIntersection<z.ZodObject<{
            label: z.ZodOptional<z.ZodLiteral<"mfa">>;
        }, "strip", z.ZodTypeAny, {
            label?: "mfa" | undefined;
        }, {
            label?: "mfa" | undefined;
        }>, z.ZodObject<{
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
        }, {
            description: string;
        }>>]>, "many">;
        url: z.ZodString;
        method: z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"PATCH">]>;
        linkId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        url: string;
        schema: (({
            label?: "email" | undefined;
        } & {
            description: string;
        }) | ({
            label?: "password" | undefined;
        } & {
            description: string;
            sensitive: boolean;
        }) | ({
            label?: "mfa" | undefined;
        } & {
            description: string;
        }))[];
        linkId: string;
    }, {
        method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        url: string;
        schema: (({
            label?: "email" | undefined;
        } & {
            description: string;
        }) | ({
            label?: "password" | undefined;
        } & {
            description: string;
            sensitive: boolean;
        }) | ({
            label?: "mfa" | undefined;
        } & {
            description: string;
        }))[];
        linkId: string;
    }>>]>;
};
export type patch_Link_continueLink = typeof patch_Link_continueLink;
export declare const patch_Link_continueLink: {
    method: z.ZodLiteral<"PATCH">;
    path: z.ZodLiteral<"/account/api/v1/link/{linkId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            linkId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            linkId: string;
        }, {
            linkId: string;
        }>;
        body: z.ZodUnion<[z.ZodObject<{
            email: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            password: string;
            email: string;
        }, {
            password: string;
            email: string;
        }>, z.ZodObject<{
            mfa: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            mfa: string;
        }, {
            mfa: string;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        body: ({
            password: string;
            email: string;
        } | {
            mfa: string;
        }) & ({
            password: string;
            email: string;
        } | {
            mfa: string;
        } | undefined);
        path: {
            linkId: string;
        };
    }, {
        body: ({
            password: string;
            email: string;
        } | {
            mfa: string;
        }) & ({
            password: string;
            email: string;
        } | {
            mfa: string;
        } | undefined);
        path: {
            linkId: string;
        };
    }>;
    response: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
        status: z.ZodOptional<z.ZodLiteral<"SUCCESS">>;
    }, "strip", z.ZodTypeAny, {
        status?: "SUCCESS" | undefined;
    }, {
        status?: "SUCCESS" | undefined;
    }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodOptional<z.ZodLiteral<"FAILURE">>;
    }, "strip", z.ZodTypeAny, {
        status?: "FAILURE" | undefined;
    }, {
        status?: "FAILURE" | undefined;
    }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodOptional<z.ZodLiteral<"IN_PROGRESS">>;
    }, "strip", z.ZodTypeAny, {
        status?: "IN_PROGRESS" | undefined;
    }, {
        status?: "IN_PROGRESS" | undefined;
    }>, z.ZodObject<{
        schema: z.ZodArray<z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
            label: z.ZodOptional<z.ZodLiteral<"email">>;
        }, "strip", z.ZodTypeAny, {
            label?: "email" | undefined;
        }, {
            label?: "email" | undefined;
        }>, z.ZodObject<{
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
        }, {
            description: string;
        }>>, z.ZodIntersection<z.ZodObject<{
            label: z.ZodOptional<z.ZodLiteral<"password">>;
        }, "strip", z.ZodTypeAny, {
            label?: "password" | undefined;
        }, {
            label?: "password" | undefined;
        }>, z.ZodObject<{
            description: z.ZodString;
            sensitive: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            description: string;
            sensitive: boolean;
        }, {
            description: string;
            sensitive: boolean;
        }>>, z.ZodIntersection<z.ZodObject<{
            label: z.ZodOptional<z.ZodLiteral<"mfa">>;
        }, "strip", z.ZodTypeAny, {
            label?: "mfa" | undefined;
        }, {
            label?: "mfa" | undefined;
        }>, z.ZodObject<{
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
        }, {
            description: string;
        }>>]>, "many">;
        url: z.ZodString;
        method: z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"PATCH">]>;
        linkId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        url: string;
        schema: (({
            label?: "email" | undefined;
        } & {
            description: string;
        }) | ({
            label?: "password" | undefined;
        } & {
            description: string;
            sensitive: boolean;
        }) | ({
            label?: "mfa" | undefined;
        } & {
            description: string;
        }))[];
        linkId: string;
    }, {
        method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        url: string;
        schema: (({
            label?: "email" | undefined;
        } & {
            description: string;
        }) | ({
            label?: "password" | undefined;
        } & {
            description: string;
            sensitive: boolean;
        }) | ({
            label?: "mfa" | undefined;
        } & {
            description: string;
        }))[];
        linkId: string;
    }>>]>;
};
export type get_Link_createLinkUrl = typeof get_Link_createLinkUrl;
export declare const get_Link_createLinkUrl: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/link/url">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            app: z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>;
            appUserId: z.ZodString;
            chromeExtensionId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            companyLogoUrl: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            companyName: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            redirectUrl: z.ZodString;
            state: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            authUrl: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            checkUrl: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            displayName: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            iconUrl: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            app: string;
            redirectUrl: string;
            chromeExtensionId?: string | null | undefined;
            companyLogoUrl?: string | null | undefined;
            companyName?: string | null | undefined;
            state?: string | null | undefined;
            authUrl?: string | null | undefined;
            checkUrl?: string | null | undefined;
            displayName?: string | null | undefined;
            iconUrl?: string | null | undefined;
        }, {
            appUserId: string;
            app: string;
            redirectUrl: string;
            chromeExtensionId?: string | null | undefined;
            companyLogoUrl?: string | null | undefined;
            companyName?: string | null | undefined;
            state?: string | null | undefined;
            authUrl?: string | null | undefined;
            checkUrl?: string | null | undefined;
            displayName?: string | null | undefined;
            iconUrl?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId: string;
            app: string;
            redirectUrl: string;
            chromeExtensionId?: string | null | undefined;
            companyLogoUrl?: string | null | undefined;
            companyName?: string | null | undefined;
            state?: string | null | undefined;
            authUrl?: string | null | undefined;
            checkUrl?: string | null | undefined;
            displayName?: string | null | undefined;
            iconUrl?: string | null | undefined;
        };
    }, {
        query: {
            appUserId: string;
            app: string;
            redirectUrl: string;
            chromeExtensionId?: string | null | undefined;
            companyLogoUrl?: string | null | undefined;
            companyName?: string | null | undefined;
            state?: string | null | undefined;
            authUrl?: string | null | undefined;
            checkUrl?: string | null | undefined;
            displayName?: string | null | undefined;
            iconUrl?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
};
export type post_Member_createMember = typeof post_Member_createMember;
export declare const post_Member_createMember: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/org/member">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            name: z.ZodString;
            email: z.ZodString;
            password: z.ZodString;
            role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            password: string;
            email: string;
            name: string;
            role: string;
        }, {
            password: string;
            email: string;
            name: string;
            role: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            password: string;
            email: string;
            name: string;
            role: string;
        };
    }, {
        body: {
            password: string;
            email: string;
            name: string;
            role: string;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        email: z.ZodString;
        organizationId: z.ZodString;
        role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        email: string;
        id: string;
        name: string;
        organizationId: string;
        role: string;
    }, {
        email: string;
        id: string;
        name: string;
        organizationId: string;
        role: string;
    }>;
};
export type get_Member_getMember = typeof get_Member_getMember;
export declare const get_Member_getMember: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/member/{memberId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            memberId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            memberId: string;
        }, {
            memberId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        path: {
            memberId: string;
        };
    }, {
        path: {
            memberId: string;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        email: z.ZodString;
        organizationId: z.ZodString;
        role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        email: string;
        id: string;
        name: string;
        organizationId: string;
        role: string;
    }, {
        email: string;
        id: string;
        name: string;
        organizationId: string;
        role: string;
    }>;
};
export type get_Member_listMembers = typeof get_Member_listMembers;
export declare const get_Member_listMembers: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/members">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodNever;
    response: z.ZodObject<{
        resource: z.ZodString;
        items: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            email: z.ZodString;
            role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
            createdAt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            email: string;
            id: string;
            name: string;
            createdAt: string;
            role: string;
        }, {
            email: string;
            id: string;
            name: string;
            createdAt: string;
            role: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        items: {
            email: string;
            id: string;
            name: string;
            createdAt: string;
            role: string;
        }[];
    }, {
        resource: string;
        items: {
            email: string;
            id: string;
            name: string;
            createdAt: string;
            role: string;
        }[];
    }>;
};
export type post_Member_login = typeof post_Member_login;
export declare const post_Member_login: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/org/login">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            email: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            password: string;
            email: string;
        }, {
            password: string;
            email: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            password: string;
            email: string;
        };
    }, {
        body: {
            password: string;
            email: string;
        };
    }>;
    response: z.ZodObject<{
        token: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        token: string;
    }, {
        token: string;
    }>;
};
export type post_Organization_createOrganization = typeof post_Organization_createOrganization;
export declare const post_Organization_createOrganization: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/org/organization">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            name: z.ZodString;
            member: z.ZodObject<{
                name: z.ZodString;
                email: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                password: string;
                email: string;
                name: string;
            }, {
                password: string;
                email: string;
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            member: {
                password: string;
                email: string;
                name: string;
            };
        }, {
            name: string;
            member: {
                password: string;
                email: string;
                name: string;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            name: string;
            member: {
                password: string;
                email: string;
                name: string;
            };
        };
    }, {
        body: {
            name: string;
            member: {
                password: string;
                email: string;
                name: string;
            };
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        members: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            email: z.ZodString;
            organizationId: z.ZodString;
            role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            email: string;
            id: string;
            name: string;
            organizationId: string;
            role: string;
        }, {
            email: string;
            id: string;
            name: string;
            organizationId: string;
            role: string;
        }>, "many">;
        apiKey: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        sdkAccessToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        members: {
            email: string;
            id: string;
            name: string;
            organizationId: string;
            role: string;
        }[];
        logoUrl?: string | null | undefined;
        apiKey?: string | null | undefined;
        sdkAccessToken?: string | null | undefined;
    }, {
        id: string;
        name: string;
        members: {
            email: string;
            id: string;
            name: string;
            organizationId: string;
            role: string;
        }[];
        logoUrl?: string | null | undefined;
        apiKey?: string | null | undefined;
        sdkAccessToken?: string | null | undefined;
    }>;
};
export type get_Organization_getOrganization = typeof get_Organization_getOrganization;
export declare const get_Organization_getOrganization: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/organization/{organizationId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            organizationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            organizationId: string;
        }, {
            organizationId: string;
        }>;
        header: z.ZodObject<{
            userId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            orgId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            userId?: string | null | undefined;
            orgId?: string | null | undefined;
        }, {
            userId?: string | null | undefined;
            orgId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        path: {
            organizationId: string;
        };
        header: {
            userId?: string | null | undefined;
            orgId?: string | null | undefined;
        };
    }, {
        path: {
            organizationId: string;
        };
        header: {
            userId?: string | null | undefined;
            orgId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        members: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            email: z.ZodString;
            organizationId: z.ZodString;
            role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            email: string;
            id: string;
            name: string;
            organizationId: string;
            role: string;
        }, {
            email: string;
            id: string;
            name: string;
            organizationId: string;
            role: string;
        }>, "many">;
        apiKey: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        sdkAccessToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        members: {
            email: string;
            id: string;
            name: string;
            organizationId: string;
            role: string;
        }[];
        logoUrl?: string | null | undefined;
        apiKey?: string | null | undefined;
        sdkAccessToken?: string | null | undefined;
    }, {
        id: string;
        name: string;
        members: {
            email: string;
            id: string;
            name: string;
            organizationId: string;
            role: string;
        }[];
        logoUrl?: string | null | undefined;
        apiKey?: string | null | undefined;
        sdkAccessToken?: string | null | undefined;
    }>;
};
export type delete_Organization_deleteOrganization = typeof delete_Organization_deleteOrganization;
export declare const delete_Organization_deleteOrganization: {
    method: z.ZodLiteral<"DELETE">;
    path: z.ZodLiteral<"/org/organization/{organizationId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            organizationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            organizationId: string;
        }, {
            organizationId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        path: {
            organizationId: string;
        };
    }, {
        path: {
            organizationId: string;
        };
    }>;
    response: z.ZodBoolean;
};
export type patch_Organization_updateOrganization = typeof patch_Organization_updateOrganization;
export declare const patch_Organization_updateOrganization: {
    method: z.ZodLiteral<"PATCH">;
    path: z.ZodLiteral<"/org/organization/{organizationId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            organizationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            organizationId: string;
        }, {
            organizationId: string;
        }>;
        body: z.ZodObject<{
            name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | null | undefined;
            logoUrl?: string | null | undefined;
        }, {
            name?: string | null | undefined;
            logoUrl?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            name?: string | null | undefined;
            logoUrl?: string | null | undefined;
        };
        path: {
            organizationId: string;
        };
    }, {
        body: {
            name?: string | null | undefined;
            logoUrl?: string | null | undefined;
        };
        path: {
            organizationId: string;
        };
    }>;
    response: z.ZodBoolean;
};
export type post_Organization_createAppUser = typeof post_Organization_createAppUser;
export declare const post_Organization_createAppUser: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/org/user">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodUnion<[z.ZodObject<{
            appUserId: z.ZodString;
            exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            exp?: number | null | undefined;
        }, {
            appUserId: string;
            exp?: number | null | undefined;
        }>, z.ZodObject<{
            sdkClientId: z.ZodString;
            appUserId: z.ZodString;
            exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        }, {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        }>, z.ZodObject<{
            userPoolId: z.ZodString;
            appUserId: z.ZodString;
            exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        }, {
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        body: ({
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            exp?: number | null | undefined;
        }) & ({
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            exp?: number | null | undefined;
        } | undefined);
    }, {
        body: ({
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            exp?: number | null | undefined;
        }) & ({
            appUserId: string;
            userPoolId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            sdkClientId: string;
            exp?: number | null | undefined;
        } | {
            appUserId: string;
            exp?: number | null | undefined;
        } | undefined);
    }>;
    response: z.ZodObject<{
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
    }, {
        success: boolean;
    }>;
};
export type get_Organization_appUser = typeof get_Organization_appUser;
export declare const get_Organization_appUser: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/user">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            externalUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            id?: string | null | undefined;
            email?: string | null | undefined;
            phoneNumber?: string | null | undefined;
            externalUserId?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        }, {
            id?: string | null | undefined;
            email?: string | null | undefined;
            phoneNumber?: string | null | undefined;
            externalUserId?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            id?: string | null | undefined;
            email?: string | null | undefined;
            phoneNumber?: string | null | undefined;
            externalUserId?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }, {
        query: {
            id?: string | null | undefined;
            email?: string | null | undefined;
            phoneNumber?: string | null | undefined;
            externalUserId?: string | null | undefined;
            appUserPoolId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        externalUserId: z.ZodString;
        createdAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        externalUserId: string;
        createdAt: string;
        email?: string | null | undefined;
        phoneNumber?: string | null | undefined;
    }, {
        id: string;
        externalUserId: string;
        createdAt: string;
        email?: string | null | undefined;
        phoneNumber?: string | null | undefined;
    }>;
};
export type get_Organization_listAppUsers = typeof get_Organization_listAppUsers;
export declare const get_Organization_listAppUsers: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/users">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodNever;
    response: z.ZodObject<{
        appUsers: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            appUserPoolId: z.ZodString;
            createdAt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            appUserPoolId: string;
            id: string;
            createdAt: string;
            email?: string | null | undefined;
            phoneNumber?: string | null | undefined;
        }, {
            appUserPoolId: string;
            id: string;
            createdAt: string;
            email?: string | null | undefined;
            phoneNumber?: string | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        appUsers: {
            appUserPoolId: string;
            id: string;
            createdAt: string;
            email?: string | null | undefined;
            phoneNumber?: string | null | undefined;
        }[];
    }, {
        appUsers: {
            appUserPoolId: string;
            id: string;
            createdAt: string;
            email?: string | null | undefined;
            phoneNumber?: string | null | undefined;
        }[];
    }>;
};
export type post_Run_createCdpUrl = typeof post_Run_createCdpUrl;
export declare const post_Run_createCdpUrl: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/cdpUrl">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            apps: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>, "many">, z.ZodString]>;
            appUserId: z.ZodString;
            activityGroupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            proxy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
                server: z.ZodString;
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
                server: string;
            }, {
                username: string;
                password: string;
                server: string;
            }>]>, z.ZodUndefined]>>;
            cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            sessionDuration: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            keepAlive: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            provider: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"browserbase">, z.ZodLiteral<"rebrowser">, z.ZodLiteral<"undetect">]>, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            apps: (string | string[]) & (string | string[] | undefined);
            activityGroupId?: string | null | undefined;
            proxy?: boolean | {
                username: string;
                password: string;
                server: string;
            } | undefined;
            cdpUrl?: string | null | undefined;
            sessionDuration?: number | null | undefined;
            keepAlive?: boolean | null | undefined;
            provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
        }, {
            appUserId: string;
            apps: (string | string[]) & (string | string[] | undefined);
            activityGroupId?: string | null | undefined;
            proxy?: boolean | {
                username: string;
                password: string;
                server: string;
            } | undefined;
            cdpUrl?: string | null | undefined;
            sessionDuration?: number | null | undefined;
            keepAlive?: boolean | null | undefined;
            provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            appUserId: string;
            apps: (string | string[]) & (string | string[] | undefined);
            activityGroupId?: string | null | undefined;
            proxy?: boolean | {
                username: string;
                password: string;
                server: string;
            } | undefined;
            cdpUrl?: string | null | undefined;
            sessionDuration?: number | null | undefined;
            keepAlive?: boolean | null | undefined;
            provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
        };
    }, {
        body: {
            appUserId: string;
            apps: (string | string[]) & (string | string[] | undefined);
            activityGroupId?: string | null | undefined;
            proxy?: boolean | {
                username: string;
                password: string;
                server: string;
            } | undefined;
            cdpUrl?: string | null | undefined;
            sessionDuration?: number | null | undefined;
            keepAlive?: boolean | null | undefined;
            provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
        };
    }>;
    response: z.ZodObject<{
        cdpUrl: z.ZodString;
        liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        cdpUrl: string;
        liveStreamingUrl?: string | null | undefined;
    }, {
        cdpUrl: string;
        liveStreamingUrl?: string | null | undefined;
    }>;
};
export type post_RuntimeLog_recordLog = typeof post_RuntimeLog_recordLog;
export declare const post_RuntimeLog_recordLog: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/logs">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            environment: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"development">, z.ZodLiteral<"staging">, z.ZodLiteral<"sandbox">, z.ZodLiteral<"prod">]>;
            userMetadata: z.ZodObject<{
                anonSessionId: z.ZodString;
                externalUserId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                externalUserId: string;
                anonSessionId: string;
            }, {
                externalUserId: string;
                anonSessionId: string;
            }>;
            browserConfig: z.ZodUnion<[z.ZodObject<{
                browserType: z.ZodString;
                proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    isAnonProxyEnabled: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    isAnonProxyEnabled: boolean;
                }, {
                    isAnonProxyEnabled: boolean;
                }>, z.ZodUndefined]>>;
                browserbase: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    sessionId: z.ZodString;
                    sessionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                }, {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                }>, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            }, {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            }>, z.ZodObject<{
                browserType: z.ZodString;
                isHeadless: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    isAnonProxyEnabled: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    isAnonProxyEnabled: boolean;
                }, {
                    isAnonProxyEnabled: boolean;
                }>, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            }, {
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            }>, z.ZodObject<{
                browserType: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                browserType: string;
            }, {
                browserType: string;
            }>, z.ZodObject<{
                browserType: z.ZodString;
                proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    ip: z.ZodString;
                    username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    ip: string;
                    username?: string | null | undefined;
                }, {
                    ip: string;
                    username?: string | null | undefined;
                }>, z.ZodUndefined]>>;
                connectionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            }, {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            }>]>;
            app: z.ZodString;
            runtimeResult: z.ZodUnion<[z.ZodObject<{
                type: z.ZodString;
                startSdkTime: z.ZodNumber;
                startRuntimeExecutionTime: z.ZodNumber;
                endRuntimeExecutionTime: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            }, {
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            }>, z.ZodObject<{
                type: z.ZodString;
                startSdkTime: z.ZodNumber;
                classification: z.ZodString;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            }, {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                startSdkTime: z.ZodNumber;
                classification: z.ZodString;
                error: z.ZodString;
                startRuntimeExecutionTime: z.ZodNumber;
                endRuntimeExecutionTime: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            }, {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            }>, z.ZodObject<{
                type: z.ZodString;
                startSdkTime: z.ZodNumber;
                classification: z.ZodString;
                error: z.ZodString;
                startRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                endRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            }, {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            app: string;
            environment: "local" | "development" | "staging" | "sandbox" | "prod";
            userMetadata: {
                externalUserId: string;
                anonSessionId: string;
            };
            browserConfig: ({
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            } | {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            } | {
                browserType: string;
            } | {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            }) & ({
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            } | {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            } | {
                browserType: string;
            } | {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            } | undefined);
            runtimeResult: ({
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            }) & ({
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            } | undefined);
        }, {
            app: string;
            environment: "local" | "development" | "staging" | "sandbox" | "prod";
            userMetadata: {
                externalUserId: string;
                anonSessionId: string;
            };
            browserConfig: ({
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            } | {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            } | {
                browserType: string;
            } | {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            }) & ({
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            } | {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            } | {
                browserType: string;
            } | {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            } | undefined);
            runtimeResult: ({
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            }) & ({
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            } | undefined);
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            app: string;
            environment: "local" | "development" | "staging" | "sandbox" | "prod";
            userMetadata: {
                externalUserId: string;
                anonSessionId: string;
            };
            browserConfig: ({
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            } | {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            } | {
                browserType: string;
            } | {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            }) & ({
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            } | {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            } | {
                browserType: string;
            } | {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            } | undefined);
            runtimeResult: ({
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            }) & ({
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            } | undefined);
        };
    }, {
        body: {
            app: string;
            environment: "local" | "development" | "staging" | "sandbox" | "prod";
            userMetadata: {
                externalUserId: string;
                anonSessionId: string;
            };
            browserConfig: ({
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            } | {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            } | {
                browserType: string;
            } | {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            }) & ({
                browserType: string;
                isHeadless?: boolean | null | undefined;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
            } | {
                browserType: string;
                proxy?: {
                    isAnonProxyEnabled: boolean;
                } | undefined;
                browserbase?: {
                    sessionId: string;
                    sessionUrl?: string | null | undefined;
                } | undefined;
            } | {
                browserType: string;
            } | {
                browserType: string;
                proxy?: {
                    ip: string;
                    username?: string | null | undefined;
                } | undefined;
                connectionUrl?: string | null | undefined;
            } | undefined);
            runtimeResult: ({
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            }) & ({
                type: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                startRuntimeExecutionTime: number;
                endRuntimeExecutionTime: number;
                classification: string;
            } | {
                type: string;
                error: string;
                startSdkTime: number;
                classification: string;
                startRuntimeExecutionTime?: number | null | undefined;
                endRuntimeExecutionTime?: number | null | undefined;
            } | undefined);
        };
    }>;
    response: z.ZodObject<{
        message: z.ZodString;
        recordedAt: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        recordedAt?: string | null | undefined;
    }, {
        message: string;
        recordedAt?: string | null | undefined;
    }>;
};
export type post_SdkClient_createSdkClient = typeof post_SdkClient_createSdkClient;
export declare const post_SdkClient_createSdkClient: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/org/sdkClient">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            name: z.ZodString;
            kind: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodObject<{
                application: z.ZodObject<{
                    userPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    oauthConfig: z.ZodOptional<z.ZodObject<{
                        logoUrl: z.ZodString;
                        chromeExtensionId: z.ZodString;
                        redirectUrls: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    }, {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    userPoolId?: string | null | undefined;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                }, {
                    userPoolId?: string | null | undefined;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                application: {
                    userPoolId?: string | null | undefined;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                };
            }, {
                application: {
                    userPoolId?: string | null | undefined;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                };
            }>]>, z.ZodUndefined]>>;
            description: z.ZodString;
            oauthDisabled: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
            authorization: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                jwksUri: z.ZodString;
                idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                jwksUri: string;
                idClaim?: string | null | undefined;
            }, {
                jwksUri: string;
                idClaim?: string | null | undefined;
            }>, z.ZodUndefined]>>;
            organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            kind?: string | {
                application: {
                    userPoolId?: string | null | undefined;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                };
            } | undefined;
            oauthDisabled?: boolean | null | undefined;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
            organizationId?: string | undefined;
        }, {
            name: string;
            description: string;
            kind?: string | {
                application: {
                    userPoolId?: string | null | undefined;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                };
            } | undefined;
            oauthDisabled?: boolean | null | undefined;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
            organizationId?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            name: string;
            description: string;
            kind?: string | {
                application: {
                    userPoolId?: string | null | undefined;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                };
            } | undefined;
            oauthDisabled?: boolean | null | undefined;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
            organizationId?: string | undefined;
        };
    }, {
        body: {
            name: string;
            description: string;
            kind?: string | {
                application: {
                    userPoolId?: string | null | undefined;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                };
            } | undefined;
            oauthDisabled?: boolean | null | undefined;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
            organizationId?: string | undefined;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        auth: z.ZodUnion<[z.ZodObject<{
            type: z.ZodString;
            userPoolId: z.ZodString;
            oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                logoUrl: z.ZodString;
                chromeExtensionId: z.ZodString;
                redirectUrls: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            }, {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            }>, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        }, {
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodString;
            secret: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            secret: string;
        }, {
            type: string;
            secret: string;
        }>]>;
        organizationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        auth: ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
            secret: string;
        }) & ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
            secret: string;
        } | undefined);
    }, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        auth: ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
            secret: string;
        }) & ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
            secret: string;
        } | undefined);
    }>;
};
export type get_SdkClient_getSdkClient = typeof get_SdkClient_getSdkClient;
export declare const get_SdkClient_getSdkClient: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/sdkClient/{sdkClientId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            sdkClientId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            sdkClientId: string;
        }, {
            sdkClientId: string;
        }>;
        header: z.ZodObject<{
            userId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            orgId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            userId?: string | null | undefined;
            orgId?: string | null | undefined;
        }, {
            userId?: string | null | undefined;
            orgId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        path: {
            sdkClientId: string;
        };
        header: {
            userId?: string | null | undefined;
            orgId?: string | null | undefined;
        };
    }, {
        path: {
            sdkClientId: string;
        };
        header: {
            userId?: string | null | undefined;
            orgId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        auth: z.ZodUnion<[z.ZodObject<{
            type: z.ZodString;
            userPoolId: z.ZodString;
            oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                logoUrl: z.ZodString;
                chromeExtensionId: z.ZodString;
                redirectUrls: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            }, {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            }>, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        }, {
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
        }, {
            type: string;
        }>]>;
        organizationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        auth: ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
        }) & ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
        } | undefined);
    }, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        auth: ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
        }) & ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
        } | undefined);
    }>;
};
export type patch_SdkClient_updateSdkClient = typeof patch_SdkClient_updateSdkClient;
export declare const patch_SdkClient_updateSdkClient: {
    method: z.ZodLiteral<"PATCH">;
    path: z.ZodLiteral<"/org/sdkClient/{sdkClientId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            sdkClientId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            sdkClientId: string;
        }, {
            sdkClientId: string;
        }>;
        body: z.ZodObject<{
            name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            oauthConfig: z.ZodOptional<z.ZodObject<{
                logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                chromeExtensionId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                redirectUrls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                logoUrl?: string | null | undefined;
                chromeExtensionId?: string | null | undefined;
                redirectUrls?: string[] | null | undefined;
            }, {
                logoUrl?: string | null | undefined;
                chromeExtensionId?: string | null | undefined;
                redirectUrls?: string[] | null | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | null | undefined;
            description?: string | null | undefined;
            oauthConfig?: {
                logoUrl?: string | null | undefined;
                chromeExtensionId?: string | null | undefined;
                redirectUrls?: string[] | null | undefined;
            } | undefined;
        }, {
            name?: string | null | undefined;
            description?: string | null | undefined;
            oauthConfig?: {
                logoUrl?: string | null | undefined;
                chromeExtensionId?: string | null | undefined;
                redirectUrls?: string[] | null | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            name?: string | null | undefined;
            description?: string | null | undefined;
            oauthConfig?: {
                logoUrl?: string | null | undefined;
                chromeExtensionId?: string | null | undefined;
                redirectUrls?: string[] | null | undefined;
            } | undefined;
        };
        path: {
            sdkClientId: string;
        };
    }, {
        body: {
            name?: string | null | undefined;
            description?: string | null | undefined;
            oauthConfig?: {
                logoUrl?: string | null | undefined;
                chromeExtensionId?: string | null | undefined;
                redirectUrls?: string[] | null | undefined;
            } | undefined;
        };
        path: {
            sdkClientId: string;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        auth: z.ZodUnion<[z.ZodObject<{
            type: z.ZodString;
            userPoolId: z.ZodString;
            oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                logoUrl: z.ZodString;
                chromeExtensionId: z.ZodString;
                redirectUrls: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            }, {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            }>, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        }, {
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
        }, {
            type: string;
        }>]>;
        organizationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        auth: ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
        }) & ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
        } | undefined);
    }, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        auth: ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
        }) & ({
            type: string;
            userPoolId: string;
            oauthConfig?: {
                chromeExtensionId: string;
                logoUrl: string;
                redirectUrls: string[];
            } | undefined;
        } | {
            type: string;
        } | undefined);
    }>;
};
export type get_SdkClient_auth = typeof get_SdkClient_auth;
export declare const get_SdkClient_auth: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/sdkClient/auth">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodNever;
    response: z.ZodObject<{
        authenticatorId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        authenticatorId: string;
    }, {
        authenticatorId: string;
    }>;
};
export type get_SdkClient_listSdkClients = typeof get_SdkClient_listSdkClients;
export declare const get_SdkClient_listSdkClients: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/sdkClients">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodNever;
    response: z.ZodObject<{
        resource: z.ZodString;
        items: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            description: z.ZodString;
            appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            createdAt: z.ZodString;
            logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            chromeExtensionId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            redirectUrls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            createdAt: string;
            description: string;
            appUserPoolId?: string | null | undefined;
            logoUrl?: string | null | undefined;
            chromeExtensionId?: string | null | undefined;
            redirectUrls?: string[] | null | undefined;
        }, {
            id: string;
            name: string;
            createdAt: string;
            description: string;
            appUserPoolId?: string | null | undefined;
            logoUrl?: string | null | undefined;
            chromeExtensionId?: string | null | undefined;
            redirectUrls?: string[] | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        items: {
            id: string;
            name: string;
            createdAt: string;
            description: string;
            appUserPoolId?: string | null | undefined;
            logoUrl?: string | null | undefined;
            chromeExtensionId?: string | null | undefined;
            redirectUrls?: string[] | null | undefined;
        }[];
    }, {
        resource: string;
        items: {
            id: string;
            name: string;
            createdAt: string;
            description: string;
            appUserPoolId?: string | null | undefined;
            logoUrl?: string | null | undefined;
            chromeExtensionId?: string | null | undefined;
            redirectUrls?: string[] | null | undefined;
        }[];
    }>;
};
export type get_Session_getAppIntegration = typeof get_Session_getAppIntegration;
export declare const get_Session_getAppIntegration: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/account/api/v1/appIntegration">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            id: string;
        };
    }, {
        query: {
            id: string;
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        app: z.ZodObject<{
            authUrl: z.ZodString;
            displayName: z.ZodString;
            iconUrl: z.ZodString;
            domCompletionIndicator: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            completionIndicators: z.ZodArray<z.ZodObject<{
                storage: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"session">, z.ZodLiteral<"cookie">]>;
                key: z.ZodString;
                domains: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                key: string;
                storage: "local" | "session" | "cookie";
                domains?: string[] | null | undefined;
            }, {
                key: string;
                storage: "local" | "session" | "cookie";
                domains?: string[] | null | undefined;
            }>, "many">;
            sessionExtractionDomains: z.ZodArray<z.ZodObject<{
                domain: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                domain: string;
            }, {
                domain: string;
            }>, "many">;
            sessionValidation: z.ZodObject<{
                sessionValidityChecks: z.ZodArray<z.ZodObject<{
                    url: z.ZodString;
                    criteria: z.ZodArray<z.ZodObject<{
                        selector: z.ZodString;
                        exists: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        selector: string;
                        exists: boolean;
                    }, {
                        selector: string;
                        exists: boolean;
                    }>, "many">;
                    matchRule: z.ZodUnion<[z.ZodLiteral<"ALL">, z.ZodLiteral<"ANY">]>;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    criteria: {
                        selector: string;
                        exists: boolean;
                    }[];
                    matchRule: "ALL" | "ANY";
                }, {
                    url: string;
                    criteria: {
                        selector: string;
                        exists: boolean;
                    }[];
                    matchRule: "ALL" | "ANY";
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                sessionValidityChecks: {
                    url: string;
                    criteria: {
                        selector: string;
                        exists: boolean;
                    }[];
                    matchRule: "ALL" | "ANY";
                }[];
            }, {
                sessionValidityChecks: {
                    url: string;
                    criteria: {
                        selector: string;
                        exists: boolean;
                    }[];
                    matchRule: "ALL" | "ANY";
                }[];
            }>;
        }, "strip", z.ZodTypeAny, {
            authUrl: string;
            displayName: string;
            iconUrl: string;
            completionIndicators: {
                key: string;
                storage: "local" | "session" | "cookie";
                domains?: string[] | null | undefined;
            }[];
            sessionExtractionDomains: {
                domain: string;
            }[];
            sessionValidation: {
                sessionValidityChecks: {
                    url: string;
                    criteria: {
                        selector: string;
                        exists: boolean;
                    }[];
                    matchRule: "ALL" | "ANY";
                }[];
            };
            domCompletionIndicator?: string | null | undefined;
        }, {
            authUrl: string;
            displayName: string;
            iconUrl: string;
            completionIndicators: {
                key: string;
                storage: "local" | "session" | "cookie";
                domains?: string[] | null | undefined;
            }[];
            sessionExtractionDomains: {
                domain: string;
            }[];
            sessionValidation: {
                sessionValidityChecks: {
                    url: string;
                    criteria: {
                        selector: string;
                        exists: boolean;
                    }[];
                    matchRule: "ALL" | "ANY";
                }[];
            };
            domCompletionIndicator?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        app: {
            authUrl: string;
            displayName: string;
            iconUrl: string;
            completionIndicators: {
                key: string;
                storage: "local" | "session" | "cookie";
                domains?: string[] | null | undefined;
            }[];
            sessionExtractionDomains: {
                domain: string;
            }[];
            sessionValidation: {
                sessionValidityChecks: {
                    url: string;
                    criteria: {
                        selector: string;
                        exists: boolean;
                    }[];
                    matchRule: "ALL" | "ANY";
                }[];
            };
            domCompletionIndicator?: string | null | undefined;
        };
    }, {
        app: {
            authUrl: string;
            displayName: string;
            iconUrl: string;
            completionIndicators: {
                key: string;
                storage: "local" | "session" | "cookie";
                domains?: string[] | null | undefined;
            }[];
            sessionExtractionDomains: {
                domain: string;
            }[];
            sessionValidation: {
                sessionValidityChecks: {
                    url: string;
                    criteria: {
                        selector: string;
                        exists: boolean;
                    }[];
                    matchRule: "ALL" | "ANY";
                }[];
            };
            domCompletionIndicator?: string | null | undefined;
        };
    }>, z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>]>;
};
export type post_Session_createRuntimeBrowserEnvironment = typeof post_Session_createRuntimeBrowserEnvironment;
export declare const post_Session_createRuntimeBrowserEnvironment: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/browser/environment">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            proxy: z.ZodOptional<z.ZodObject<{
                server: z.ZodString;
                bypass: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                password: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                server: string;
                bypass?: string | null | undefined;
                username?: string | null | undefined;
                password?: string | null | undefined;
            }, {
                server: string;
                bypass?: string | null | undefined;
                username?: string | null | undefined;
                password?: string | null | undefined;
            }>>;
            isLiveStreamingSession: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            proxy?: {
                server: string;
                bypass?: string | null | undefined;
                username?: string | null | undefined;
                password?: string | null | undefined;
            } | undefined;
            isLiveStreamingSession?: boolean | null | undefined;
        }, {
            proxy?: {
                server: string;
                bypass?: string | null | undefined;
                username?: string | null | undefined;
                password?: string | null | undefined;
            } | undefined;
            isLiveStreamingSession?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            proxy?: {
                server: string;
                bypass?: string | null | undefined;
                username?: string | null | undefined;
                password?: string | null | undefined;
            } | undefined;
            isLiveStreamingSession?: boolean | null | undefined;
        };
    }, {
        body: {
            proxy?: {
                server: string;
                bypass?: string | null | undefined;
                username?: string | null | undefined;
                password?: string | null | undefined;
            } | undefined;
            isLiveStreamingSession?: boolean | null | undefined;
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>, z.ZodObject<{
        id: z.ZodString;
        ownerId: z.ZodString;
        environment: z.ZodObject<{
            connectUrl: z.ZodString;
            liveStreamingSession: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            connectUrl: string;
            liveStreamingSession?: string | null | undefined;
        }, {
            connectUrl: string;
            liveStreamingSession?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        ownerId: string;
        environment: {
            connectUrl: string;
            liveStreamingSession?: string | null | undefined;
        };
    }, {
        id: string;
        ownerId: string;
        environment: {
            connectUrl: string;
            liveStreamingSession?: string | null | undefined;
        };
    }>]>;
};
export type get_Session_getSession = typeof get_Session_getSession;
export declare const get_Session_getSession: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/account/api/v1/session">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            ownerId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            appUserId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            domain: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            domain: string;
            ownerId?: string | null | undefined;
            appUserId?: string | null | undefined;
        }, {
            domain: string;
            ownerId?: string | null | undefined;
            appUserId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            domain: string;
            ownerId?: string | null | undefined;
            appUserId?: string | null | undefined;
        };
    }, {
        query: {
            domain: string;
            ownerId?: string | null | undefined;
            appUserId?: string | null | undefined;
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>, z.ZodObject<{
        ownerId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        domain: z.ZodString;
        session: z.ZodObject<{
            id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
            cookies: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodString;
                domain: z.ZodString;
                path: z.ZodString;
                expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                secure: z.ZodBoolean;
                httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                name: string;
                domain: string;
                path: string;
                secure: boolean;
                expires?: number | null | undefined;
                httpOnly?: boolean | null | undefined;
                sameSite?: "Lax" | "Strict" | "None" | undefined;
            }, {
                value: string;
                name: string;
                domain: string;
                path: string;
                secure: boolean;
                expires?: number | null | undefined;
                httpOnly?: boolean | null | undefined;
                sameSite?: "Lax" | "Strict" | "None" | undefined;
            }>, "many">;
            localStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
            sessionStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
            proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            url: z.ZodString;
            metadata: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            cookies: {
                value: string;
                name: string;
                domain: string;
                path: string;
                secure: boolean;
                expires?: number | null | undefined;
                httpOnly?: boolean | null | undefined;
                sameSite?: "Lax" | "Strict" | "None" | undefined;
            }[];
            localStorage: unknown[][];
            sessionStorage: unknown[][];
            id?: string | null | undefined;
            status?: "unknown" | "active" | "revoked" | undefined;
            proxyId?: string | null | undefined;
            metadata?: unknown;
        }, {
            url: string;
            cookies: {
                value: string;
                name: string;
                domain: string;
                path: string;
                secure: boolean;
                expires?: number | null | undefined;
                httpOnly?: boolean | null | undefined;
                sameSite?: "Lax" | "Strict" | "None" | undefined;
            }[];
            localStorage: unknown[][];
            sessionStorage: unknown[][];
            id?: string | null | undefined;
            status?: "unknown" | "active" | "revoked" | undefined;
            proxyId?: string | null | undefined;
            metadata?: unknown;
        }>;
    }, "strip", z.ZodTypeAny, {
        session: {
            url: string;
            cookies: {
                value: string;
                name: string;
                domain: string;
                path: string;
                secure: boolean;
                expires?: number | null | undefined;
                httpOnly?: boolean | null | undefined;
                sameSite?: "Lax" | "Strict" | "None" | undefined;
            }[];
            localStorage: unknown[][];
            sessionStorage: unknown[][];
            id?: string | null | undefined;
            status?: "unknown" | "active" | "revoked" | undefined;
            proxyId?: string | null | undefined;
            metadata?: unknown;
        };
        domain: string;
        ownerId?: string | null | undefined;
        appUserId?: string | null | undefined;
    }, {
        session: {
            url: string;
            cookies: {
                value: string;
                name: string;
                domain: string;
                path: string;
                secure: boolean;
                expires?: number | null | undefined;
                httpOnly?: boolean | null | undefined;
                sameSite?: "Lax" | "Strict" | "None" | undefined;
            }[];
            localStorage: unknown[][];
            sessionStorage: unknown[][];
            id?: string | null | undefined;
            status?: "unknown" | "active" | "revoked" | undefined;
            proxyId?: string | null | undefined;
            metadata?: unknown;
        };
        domain: string;
        ownerId?: string | null | undefined;
        appUserId?: string | null | undefined;
    }>]>;
};
export type post_Session_addSession = typeof post_Session_addSession;
export declare const post_Session_addSession: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/session">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            ownerId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            domain: z.ZodString;
            session: z.ZodObject<{
                id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
                cookies: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodString;
                    domain: z.ZodString;
                    path: z.ZodString;
                    expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                    secure: z.ZodBoolean;
                    hostOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    discard: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    session: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    partitioned: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>, z.ZodUndefined]>>;
                    sameSitePolicy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>, z.ZodUndefined]>>;
                    storeId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    storeId?: string | null | undefined;
                }, {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    storeId?: string | null | undefined;
                }>, "many">;
                localStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                sessionStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            }, {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            session: {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            };
            domain: string;
            ownerId?: string | null | undefined;
        }, {
            session: {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            };
            domain: string;
            ownerId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            session: {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            };
            domain: string;
            ownerId?: string | null | undefined;
        };
    }, {
        body: {
            session: {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            };
            domain: string;
            ownerId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        message: z.ZodString;
        ownerId: z.ZodString;
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        ownerId: string;
        domain: string;
    }, {
        message: string;
        ownerId: string;
        domain: string;
    }>;
};
export type put_Session_updateSession = typeof put_Session_updateSession;
export declare const put_Session_updateSession: {
    method: z.ZodLiteral<"PUT">;
    path: z.ZodLiteral<"/account/api/v1/session">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            ownerId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            domain: z.ZodString;
            session: z.ZodObject<{
                id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
                cookies: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    value: z.ZodString;
                    domain: z.ZodString;
                    path: z.ZodString;
                    expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                    secure: z.ZodBoolean;
                    hostOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    discard: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    session: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    partitioned: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
                    sameSitePolicy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
                    storeId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    storeId?: string | null | undefined;
                }, {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    storeId?: string | null | undefined;
                }>, "many">;
                localStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                sessionStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            }, {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            session: {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            };
            domain: string;
            ownerId?: string | null | undefined;
        }, {
            session: {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            };
            domain: string;
            ownerId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            session: {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            };
            domain: string;
            ownerId?: string | null | undefined;
        };
    }, {
        body: {
            session: {
                url: string;
                cookies: {
                    value: string;
                    name: string;
                    domain: string;
                    path: string;
                    secure: boolean;
                    expires?: number | null | undefined;
                    hostOnly?: boolean | null | undefined;
                    httpOnly?: boolean | null | undefined;
                    discard?: boolean | null | undefined;
                    session?: boolean | null | undefined;
                    partitioned?: boolean | null | undefined;
                    sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                    storeId?: string | null | undefined;
                }[];
                localStorage: string[][];
                sessionStorage: string[][];
                id?: string | null | undefined;
                status?: "unknown" | "active" | "revoked" | undefined;
                proxyId?: string | null | undefined;
            };
            domain: string;
            ownerId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        message: z.ZodString;
        ownerId: z.ZodString;
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        ownerId: string;
        domain: string;
    }, {
        message: string;
        ownerId: string;
        domain: string;
    }>;
};
export type delete_Session_removeSession = typeof delete_Session_removeSession;
export declare const delete_Session_removeSession: {
    method: z.ZodLiteral<"DELETE">;
    path: z.ZodLiteral<"/account/api/v1/session">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            appUserId: z.ZodString;
            app: z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            app: string;
        }, {
            appUserId: string;
            app: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId: string;
            app: string;
        };
    }, {
        query: {
            appUserId: string;
            app: string;
        };
    }>;
    response: z.ZodObject<{
        appUserId: z.ZodString;
        app: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        appUserId: string;
        app: string;
    }, {
        appUserId: string;
        app: string;
    }>;
};
export type get_Session_getSessionStatus = typeof get_Session_getSessionStatus;
export declare const get_Session_getSessionStatus: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/account/api/v1/session/status">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            appUserId: z.ZodString;
            app: z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            app: string;
        }, {
            appUserId: string;
            app: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId: string;
            app: string;
        };
    }, {
        query: {
            appUserId: string;
            app: string;
        };
    }>;
    response: z.ZodObject<{
        status: z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"unknown">, z.ZodLiteral<"revoked">]>;
    }, "strip", z.ZodTypeAny, {
        status: "unknown" | "active" | "revoked";
    }, {
        status: "unknown" | "active" | "revoked";
    }>;
};
export type get_Session_getSessionRequestStatus = typeof get_Session_getSessionRequestStatus;
export declare const get_Session_getSessionRequestStatus: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/account/api/v1/session/request">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            id: string;
        };
    }, {
        query: {
            id: string;
        };
    }>;
    response: z.ZodObject<{
        message: z.ZodString;
        succeeded: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
        status: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        details: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            requestId: z.ZodString;
            appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            appSdkClientId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            domain: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            requestId: string;
            appUserId?: string | null | undefined;
            appSdkClientId?: string | null | undefined;
            domain?: string | null | undefined;
        }, {
            requestId: string;
            appUserId?: string | null | undefined;
            appSdkClientId?: string | null | undefined;
            domain?: string | null | undefined;
        }>, z.ZodUndefined]>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        succeeded?: boolean | null | undefined;
        status?: string | null | undefined;
        details?: {
            requestId: string;
            appUserId?: string | null | undefined;
            appSdkClientId?: string | null | undefined;
            domain?: string | null | undefined;
        } | undefined;
    }, {
        message: string;
        succeeded?: boolean | null | undefined;
        status?: string | null | undefined;
        details?: {
            requestId: string;
            appUserId?: string | null | undefined;
            appSdkClientId?: string | null | undefined;
            domain?: string | null | undefined;
        } | undefined;
    }>;
};
export type post_Session_createSessionRequest = typeof post_Session_createSessionRequest;
export declare const post_Session_createSessionRequest: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/session/request">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodUnion<[z.ZodObject<{
            iosPushAuthorization: z.ZodObject<{
                iosAppId: z.ZodString;
                authToken: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                iosAppId: string;
                authToken: string;
            }, {
                iosAppId: string;
                authToken: string;
            }>;
            account: z.ZodObject<{
                ownerId: z.ZodString;
                domain: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                ownerId: string;
                domain: string;
            }, {
                ownerId: string;
                domain: string;
            }>;
            appSdkClientId: z.ZodString;
            alertBody: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            alertTitle: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            appSdkClientId: string;
            iosPushAuthorization: {
                iosAppId: string;
                authToken: string;
            };
            account: {
                ownerId: string;
                domain: string;
            };
            alertBody?: string | null | undefined;
            alertTitle?: string | null | undefined;
        }, {
            appSdkClientId: string;
            iosPushAuthorization: {
                iosAppId: string;
                authToken: string;
            };
            account: {
                ownerId: string;
                domain: string;
            };
            alertBody?: string | null | undefined;
            alertTitle?: string | null | undefined;
        }>, z.ZodObject<{
            appUserId: z.ZodString;
            app: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            app: string;
        }, {
            appUserId: string;
            app: string;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        body: ({
            appSdkClientId: string;
            iosPushAuthorization: {
                iosAppId: string;
                authToken: string;
            };
            account: {
                ownerId: string;
                domain: string;
            };
            alertBody?: string | null | undefined;
            alertTitle?: string | null | undefined;
        } | {
            appUserId: string;
            app: string;
        }) & ({
            appSdkClientId: string;
            iosPushAuthorization: {
                iosAppId: string;
                authToken: string;
            };
            account: {
                ownerId: string;
                domain: string;
            };
            alertBody?: string | null | undefined;
            alertTitle?: string | null | undefined;
        } | {
            appUserId: string;
            app: string;
        } | undefined);
    }, {
        body: ({
            appSdkClientId: string;
            iosPushAuthorization: {
                iosAppId: string;
                authToken: string;
            };
            account: {
                ownerId: string;
                domain: string;
            };
            alertBody?: string | null | undefined;
            alertTitle?: string | null | undefined;
        } | {
            appUserId: string;
            app: string;
        }) & ({
            appSdkClientId: string;
            iosPushAuthorization: {
                iosAppId: string;
                authToken: string;
            };
            account: {
                ownerId: string;
                domain: string;
            };
            alertBody?: string | null | undefined;
            alertTitle?: string | null | undefined;
        } | {
            appUserId: string;
            app: string;
        } | undefined);
    }>;
    response: z.ZodObject<{
        message: z.ZodString;
        status: z.ZodString;
        requestId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        status: string;
        requestId: string;
    }, {
        message: string;
        status: string;
        requestId: string;
    }>;
};
export type get_Session_listSessions = typeof get_Session_listSessions;
export declare const get_Session_listSessions: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/account/api/v1/sessions">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        query: z.ZodObject<{
            appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            appUserId?: string | null | undefined;
        }, {
            appUserId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        query: {
            appUserId?: string | null | undefined;
        };
    }, {
        query: {
            appUserId?: string | null | undefined;
        };
    }>;
    response: z.ZodObject<{
        sessions: z.ZodArray<z.ZodObject<{
            sessionId: z.ZodString;
            app: z.ZodString;
            appUser: z.ZodObject<{
                id: z.ZodString;
                email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                email?: string | null | undefined;
            }, {
                id: string;
                email?: string | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            app: string;
            sessionId: string;
            appUser: {
                id: string;
                email?: string | null | undefined;
            };
        }, {
            app: string;
            sessionId: string;
            appUser: {
                id: string;
                email?: string | null | undefined;
            };
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        sessions: {
            app: string;
            sessionId: string;
            appUser: {
                id: string;
                email?: string | null | undefined;
            };
        }[];
    }, {
        sessions: {
            app: string;
            sessionId: string;
            appUser: {
                id: string;
                email?: string | null | undefined;
            };
        }[];
    }>;
};
export type post_Session_addSessionAccessGrant = typeof post_Session_addSessionAccessGrant;
export declare const post_Session_addSessionAccessGrant: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/account/api/v1/sessionAccessGrant">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            sessionId: z.ZodString;
            appUserId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            sessionId: string;
        }, {
            appUserId: string;
            sessionId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            appUserId: string;
            sessionId: string;
        };
    }, {
        body: {
            appUserId: string;
            sessionId: string;
        };
    }>;
    response: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
};
export type delete_Session_deleteSessionAccessGrant = typeof delete_Session_deleteSessionAccessGrant;
export declare const delete_Session_deleteSessionAccessGrant: {
    method: z.ZodLiteral<"DELETE">;
    path: z.ZodLiteral<"/account/api/v1/sessionAccessGrant">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            sessionId: z.ZodString;
            appUserId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            appUserId: string;
            sessionId: string;
        }, {
            appUserId: string;
            sessionId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            appUserId: string;
            sessionId: string;
        };
    }, {
        body: {
            appUserId: string;
            sessionId: string;
        };
    }>;
    response: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
};
export type post_UserPool_createUserPool = typeof post_UserPool_createUserPool;
export declare const post_UserPool_createUserPool: {
    method: z.ZodLiteral<"POST">;
    path: z.ZodLiteral<"/org/userPool">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        body: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            authorization: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                jwksUri: z.ZodString;
                idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                jwksUri: string;
                idClaim?: string | null | undefined;
            }, {
                jwksUri: string;
                idClaim?: string | null | undefined;
            }>, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
        }, {
            name: string;
            description: string;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            name: string;
            description: string;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
        };
    }, {
        body: {
            name: string;
            description: string;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        authorization: z.ZodObject<{
            jwksUri: z.ZodString;
            idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            jwksUri: string;
            idClaim?: string | null | undefined;
        }, {
            jwksUri: string;
            idClaim?: string | null | undefined;
        }>;
        organizationId: z.ZodString;
        hosted: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        authorization: {
            jwksUri: string;
            idClaim?: string | null | undefined;
        };
        hosted: boolean;
    }, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        authorization: {
            jwksUri: string;
            idClaim?: string | null | undefined;
        };
        hosted: boolean;
    }>;
};
export type get_UserPool_getUserPool = typeof get_UserPool_getUserPool;
export declare const get_UserPool_getUserPool: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/userPool/{userPoolId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            userPoolId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userPoolId: string;
        }, {
            userPoolId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        path: {
            userPoolId: string;
        };
    }, {
        path: {
            userPoolId: string;
        };
    }>;
    response: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        authorization: z.ZodObject<{
            jwksUri: z.ZodString;
            idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            jwksUri: string;
            idClaim?: string | null | undefined;
        }, {
            jwksUri: string;
            idClaim?: string | null | undefined;
        }>;
        organizationId: z.ZodString;
        hosted: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        authorization: {
            jwksUri: string;
            idClaim?: string | null | undefined;
        };
        hosted: boolean;
    }, {
        id: string;
        name: string;
        organizationId: string;
        description: string;
        authorization: {
            jwksUri: string;
            idClaim?: string | null | undefined;
        };
        hosted: boolean;
    }>;
};
export type patch_UserPool_updateUserPool = typeof patch_UserPool_updateUserPool;
export declare const patch_UserPool_updateUserPool: {
    method: z.ZodLiteral<"PATCH">;
    path: z.ZodLiteral<"/org/userPool/{userPoolId}">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodObject<{
        path: z.ZodObject<{
            userPoolId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            userPoolId: string;
        }, {
            userPoolId: string;
        }>;
        body: z.ZodObject<{
            name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            authorization: z.ZodOptional<z.ZodObject<{
                jwksUri: z.ZodString;
                idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                jwksUri: string;
                idClaim?: string | null | undefined;
            }, {
                jwksUri: string;
                idClaim?: string | null | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | null | undefined;
            description?: string | null | undefined;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
        }, {
            name?: string | null | undefined;
            description?: string | null | undefined;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        body: {
            name?: string | null | undefined;
            description?: string | null | undefined;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
        };
        path: {
            userPoolId: string;
        };
    }, {
        body: {
            name?: string | null | undefined;
            description?: string | null | undefined;
            authorization?: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            } | undefined;
        };
        path: {
            userPoolId: string;
        };
    }>;
    response: z.ZodBoolean;
};
export type get_UserPool_listUserPools = typeof get_UserPool_listUserPools;
export declare const get_UserPool_listUserPools: {
    method: z.ZodLiteral<"GET">;
    path: z.ZodLiteral<"/org/userPools">;
    requestFormat: z.ZodLiteral<"json">;
    parameters: z.ZodNever;
    response: z.ZodObject<{
        resource: z.ZodString;
        items: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            description: z.ZodString;
            authorization: z.ZodObject<{
                jwksUri: z.ZodString;
                idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                jwksUri: string;
                idClaim?: string | null | undefined;
            }, {
                jwksUri: string;
                idClaim?: string | null | undefined;
            }>;
            hosted: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            description: string;
            authorization: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            };
            hosted: boolean;
        }, {
            id: string;
            name: string;
            description: string;
            authorization: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            };
            hosted: boolean;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        resource: string;
        items: {
            id: string;
            name: string;
            description: string;
            authorization: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            };
            hosted: boolean;
        }[];
    }, {
        resource: string;
        items: {
            id: string;
            name: string;
            description: string;
            authorization: {
                jwksUri: string;
                idClaim?: string | null | undefined;
            };
            hosted: boolean;
        }[];
    }>;
};
export declare const EndpointByMethod: {
    get: {
        "/actions/linkedin/listConversations": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/actions/linkedin/listConversations">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    profileName: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    profileId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    appUserId: z.ZodString;
                    contentType: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    profileName?: string | null | undefined;
                    profileId?: string | null | undefined;
                    contentType?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }, {
                    appUserId: string;
                    profileName?: string | null | undefined;
                    profileId?: string | null | undefined;
                    contentType?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId: string;
                    profileName?: string | null | undefined;
                    profileId?: string | null | undefined;
                    contentType?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                query: {
                    appUserId: string;
                    profileName?: string | null | undefined;
                    profileId?: string | null | undefined;
                    contentType?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                conversations: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
                    profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    unreadCount: z.ZodNumber;
                    archived: z.ZodBoolean;
                    mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
                    readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
                    subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
                    organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
                    profiles: z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                        profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        isSelf: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }, {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }>, "many">;
                    seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                }, {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                }>, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                conversations: {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                }[];
                count: number;
            }, {
                conversations: {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                }[];
                count: number;
            }>;
        };
        "/actions/linkedin/listConnections": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/actions/linkedin/listConnections">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    cursor: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    profileName: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    appUserId: z.ZodString;
                    appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    cursor?: string | null | undefined;
                    profileName?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }, {
                    appUserId: string;
                    cursor?: string | null | undefined;
                    profileName?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId: string;
                    cursor?: string | null | undefined;
                    profileName?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                query: {
                    appUserId: string;
                    cursor?: string | null | undefined;
                    profileName?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                connections: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    publicIdentifier: z.ZodString;
                    publicProfileUrl: z.ZodString;
                    createdAt: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    publicIdentifier: string;
                    publicProfileUrl: string;
                    headline?: string | null | undefined;
                    profilePictureUrl?: string | null | undefined;
                    createdAt?: number | null | undefined;
                }, {
                    id: string;
                    name: string;
                    publicIdentifier: string;
                    publicProfileUrl: string;
                    headline?: string | null | undefined;
                    profilePictureUrl?: string | null | undefined;
                    createdAt?: number | null | undefined;
                }>, "many">;
                cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                pageCount: z.ZodNumber;
                totalCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                connections: {
                    id: string;
                    name: string;
                    publicIdentifier: string;
                    publicProfileUrl: string;
                    headline?: string | null | undefined;
                    profilePictureUrl?: string | null | undefined;
                    createdAt?: number | null | undefined;
                }[];
                pageCount: number;
                cursor?: string | null | undefined;
                totalCount?: number | null | undefined;
            }, {
                connections: {
                    id: string;
                    name: string;
                    publicIdentifier: string;
                    publicProfileUrl: string;
                    headline?: string | null | undefined;
                    profilePictureUrl?: string | null | undefined;
                    createdAt?: number | null | undefined;
                }[];
                pageCount: number;
                cursor?: string | null | undefined;
                totalCount?: number | null | undefined;
            }>;
        };
        "/actions/linkedin/getConversation": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/actions/linkedin/getConversation">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    id: z.ZodString;
                    appUserId: z.ZodString;
                    appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                }, {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                query: {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                conversation: z.ZodObject<{
                    messages: z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        text: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        edited: z.ZodBoolean;
                        deleted: z.ZodBoolean;
                        delivered: z.ZodBoolean;
                        timestamp: z.ZodString;
                        senderProfileId: z.ZodString;
                        senderProfileName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }, {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }>, "many">;
                    id: z.ZodString;
                    type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
                    profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    unreadCount: z.ZodNumber;
                    archived: z.ZodBoolean;
                    mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
                    readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
                    subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
                    organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
                    profiles: z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                        profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        isSelf: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }, {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }>, "many">;
                    seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    messages: {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                }, {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    messages: {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                }>;
            }, "strip", z.ZodTypeAny, {
                conversation: {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    messages: {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                };
            }, {
                conversation: {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    messages: {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                };
            }>;
        };
        "/actions/linkedin/listMessages": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/actions/linkedin/listMessages">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    id: z.ZodString;
                    appUserId: z.ZodString;
                    appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                }, {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                query: {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                conversation: z.ZodObject<{
                    messages: z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        text: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        edited: z.ZodBoolean;
                        deleted: z.ZodBoolean;
                        delivered: z.ZodBoolean;
                        timestamp: z.ZodString;
                        senderProfileId: z.ZodString;
                        senderProfileName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }, {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }>, "many">;
                    id: z.ZodString;
                    type: z.ZodUnion<[z.ZodLiteral<"SINGLE">, z.ZodLiteral<"GROUP">]>;
                    profileId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    timestamp: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    unreadCount: z.ZodNumber;
                    archived: z.ZodBoolean;
                    mutedUntil: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUndefined]>>;
                    readOnly: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">, z.ZodLiteral<"2">]>;
                    subject: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    folder: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"INBOX">, z.ZodLiteral<"INBOX_LINKEDIN_CLASSIC">, z.ZodLiteral<"INBOX_LINKEDIN_RECRUITER">, z.ZodLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, z.ZodLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
                    organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    mailboxId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    contentType: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"inmail">, z.ZodLiteral<"sponsored">, z.ZodLiteral<"linkedin_offer">]>, z.ZodUndefined]>>;
                    profiles: z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                        profileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        isSelf: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }, {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }>, "many">;
                    seen: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    seenBy: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    messages: {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                }, {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    messages: {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                }>;
            }, "strip", z.ZodTypeAny, {
                conversation: {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    messages: {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                };
            }, {
                conversation: {
                    type: "SINGLE" | "GROUP";
                    id: string;
                    unreadCount: number;
                    archived: boolean;
                    readOnly: "0" | "1" | "2";
                    profiles: {
                        id: string;
                        name: string;
                        isSelf: boolean;
                        profileUrl?: string | null | undefined;
                    }[];
                    messages: {
                        id: string;
                        timestamp: string;
                        edited: boolean;
                        deleted: boolean;
                        delivered: boolean;
                        senderProfileId: string;
                        senderProfileName: string;
                        text?: string | null | undefined;
                    }[];
                    profileId?: string | null | undefined;
                    timestamp?: string | null | undefined;
                    mutedUntil?: string | number | undefined;
                    subject?: string | null | undefined;
                    folder?: ("INBOX" | "INBOX_LINKEDIN_CLASSIC" | "INBOX_LINKEDIN_RECRUITER" | "INBOX_LINKEDIN_SALES_NAVIGATOR" | "INBOX_LINKEDIN_ORGANIZATION")[] | null | undefined;
                    organizationId?: string | null | undefined;
                    mailboxId?: string | null | undefined;
                    contentType?: "inmail" | "sponsored" | "linkedin_offer" | undefined;
                    seen?: boolean | null | undefined;
                    seenBy?: unknown;
                };
            }>;
        };
        "/actions/linkedin/getProfile": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/actions/linkedin/getProfile">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    id: z.ZodString;
                    appUserId: z.ZodString;
                    appUserPoolId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                }, {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                query: {
                    appUserId: string;
                    id: string;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                firstName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                lastName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                headline: z.ZodString;
                profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                publicIdentifier: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                publicProfileUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                summary: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                education: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    degree: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    school: z.ZodString;
                    fieldOfStudy: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    school: string;
                    degree?: string | null | undefined;
                    fieldOfStudy?: string | null | undefined;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }, {
                    school: string;
                    degree?: string | null | undefined;
                    fieldOfStudy?: string | null | undefined;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>>;
                languages: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    proficiency: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    proficiency?: string | null | undefined;
                }, {
                    name: string;
                    proficiency?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>>;
                skills: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    endorsementCount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    endorsementCount: number;
                }, {
                    name: string;
                    endorsementCount: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>>;
                certifications: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    organization: z.ZodString;
                    url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    organization: string;
                    url?: string | null | undefined;
                }, {
                    name: string;
                    organization: string;
                    url?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>>;
                networkDistance: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"DISTANCE_1">, z.ZodLiteral<"DISTANCE_2">, z.ZodLiteral<"DISTANCE_3">, z.ZodLiteral<"OUT_OF_NETWORK">]>, z.ZodUndefined]>>;
                contactInfo: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    emails: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
                    phones: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
                    addresses: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
                    socials: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        type: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        name: string;
                    }, {
                        type: string;
                        name: string;
                    }>, "many">, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    emails?: string[] | null | undefined;
                    phones?: string[] | null | undefined;
                    addresses?: string[] | null | undefined;
                    socials?: {
                        type: string;
                        name: string;
                    }[] | null | undefined;
                }, {
                    emails?: string[] | null | undefined;
                    phones?: string[] | null | undefined;
                    addresses?: string[] | null | undefined;
                    socials?: {
                        type: string;
                        name: string;
                    }[] | null | undefined;
                }>, z.ZodUndefined]>>;
                websites: z.ZodArray<z.ZodString, "many">;
                birthdate: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    month: z.ZodNumber;
                    day: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    month: number;
                    day: number;
                }, {
                    month: number;
                    day: number;
                }>, z.ZodUndefined]>>;
                primaryLocale: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    country: z.ZodString;
                    language: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    country: string;
                    language: string;
                }, {
                    country: string;
                    language: string;
                }>, z.ZodUndefined]>>;
                backgroundPictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                hashtags: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
                workExperience: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    position: z.ZodString;
                    companyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    company: z.ZodString;
                    location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    current: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    status: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    position: string;
                    company: string;
                    companyId?: string | null | undefined;
                    location?: string | null | undefined;
                    description?: string | null | undefined;
                    current?: boolean | null | undefined;
                    status?: string | null | undefined;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }, {
                    position: string;
                    company: string;
                    companyId?: string | null | undefined;
                    location?: string | null | undefined;
                    description?: string | null | undefined;
                    current?: boolean | null | undefined;
                    status?: string | null | undefined;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>>;
                volunteeringExperience: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    company: z.ZodString;
                    description: z.ZodString;
                    role: z.ZodString;
                    cause: z.ZodString;
                    start: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    end: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    company: string;
                    description: string;
                    role: string;
                    cause: string;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }, {
                    company: string;
                    description: string;
                    role: string;
                    cause: string;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>>;
                followerCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                connectionsCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                sharedConnectionsCount: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                headline: string;
                websites: string[];
                firstName?: string | null | undefined;
                lastName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                publicIdentifier?: string | null | undefined;
                publicProfileUrl?: string | null | undefined;
                location?: string | null | undefined;
                summary?: string | null | undefined;
                education?: {
                    school: string;
                    degree?: string | null | undefined;
                    fieldOfStudy?: string | null | undefined;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }[] | null | undefined;
                languages?: {
                    name: string;
                    proficiency?: string | null | undefined;
                }[] | null | undefined;
                skills?: {
                    name: string;
                    endorsementCount: number;
                }[] | null | undefined;
                certifications?: {
                    name: string;
                    organization: string;
                    url?: string | null | undefined;
                }[] | null | undefined;
                networkDistance?: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK" | undefined;
                contactInfo?: {
                    emails?: string[] | null | undefined;
                    phones?: string[] | null | undefined;
                    addresses?: string[] | null | undefined;
                    socials?: {
                        type: string;
                        name: string;
                    }[] | null | undefined;
                } | undefined;
                birthdate?: {
                    month: number;
                    day: number;
                } | undefined;
                primaryLocale?: {
                    country: string;
                    language: string;
                } | undefined;
                backgroundPictureUrl?: string | null | undefined;
                hashtags?: string[] | null | undefined;
                workExperience?: {
                    position: string;
                    company: string;
                    companyId?: string | null | undefined;
                    location?: string | null | undefined;
                    description?: string | null | undefined;
                    current?: boolean | null | undefined;
                    status?: string | null | undefined;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }[] | null | undefined;
                volunteeringExperience?: {
                    company: string;
                    description: string;
                    role: string;
                    cause: string;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }[] | null | undefined;
                followerCount?: number | null | undefined;
                connectionsCount?: number | null | undefined;
                sharedConnectionsCount?: number | null | undefined;
            }, {
                id: string;
                headline: string;
                websites: string[];
                firstName?: string | null | undefined;
                lastName?: string | null | undefined;
                profilePictureUrl?: string | null | undefined;
                publicIdentifier?: string | null | undefined;
                publicProfileUrl?: string | null | undefined;
                location?: string | null | undefined;
                summary?: string | null | undefined;
                education?: {
                    school: string;
                    degree?: string | null | undefined;
                    fieldOfStudy?: string | null | undefined;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }[] | null | undefined;
                languages?: {
                    name: string;
                    proficiency?: string | null | undefined;
                }[] | null | undefined;
                skills?: {
                    name: string;
                    endorsementCount: number;
                }[] | null | undefined;
                certifications?: {
                    name: string;
                    organization: string;
                    url?: string | null | undefined;
                }[] | null | undefined;
                networkDistance?: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK" | undefined;
                contactInfo?: {
                    emails?: string[] | null | undefined;
                    phones?: string[] | null | undefined;
                    addresses?: string[] | null | undefined;
                    socials?: {
                        type: string;
                        name: string;
                    }[] | null | undefined;
                } | undefined;
                birthdate?: {
                    month: number;
                    day: number;
                } | undefined;
                primaryLocale?: {
                    country: string;
                    language: string;
                } | undefined;
                backgroundPictureUrl?: string | null | undefined;
                hashtags?: string[] | null | undefined;
                workExperience?: {
                    position: string;
                    company: string;
                    companyId?: string | null | undefined;
                    location?: string | null | undefined;
                    description?: string | null | undefined;
                    current?: boolean | null | undefined;
                    status?: string | null | undefined;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }[] | null | undefined;
                volunteeringExperience?: {
                    company: string;
                    description: string;
                    role: string;
                    cause: string;
                    start?: string | null | undefined;
                    end?: string | null | undefined;
                }[] | null | undefined;
                followerCount?: number | null | undefined;
                connectionsCount?: number | null | undefined;
                sharedConnectionsCount?: number | null | undefined;
            }>;
        };
        "/account/api/v1/activity": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/account/api/v1/activity">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    activityType: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>>;
                    app: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    startTime: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    endTime: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    userId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    order: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    groupId?: string | null | undefined;
                    activityType?: "Link" | "runtime" | undefined;
                    app?: string | null | undefined;
                    startTime?: string | null | undefined;
                    endTime?: string | null | undefined;
                    userId?: string | null | undefined;
                    order?: string | null | undefined;
                }, {
                    groupId?: string | null | undefined;
                    activityType?: "Link" | "runtime" | undefined;
                    app?: string | null | undefined;
                    startTime?: string | null | undefined;
                    endTime?: string | null | undefined;
                    userId?: string | null | undefined;
                    order?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    groupId?: string | null | undefined;
                    activityType?: "Link" | "runtime" | undefined;
                    app?: string | null | undefined;
                    startTime?: string | null | undefined;
                    endTime?: string | null | undefined;
                    userId?: string | null | undefined;
                    order?: string | null | undefined;
                };
            }, {
                query: {
                    groupId?: string | null | undefined;
                    activityType?: "Link" | "runtime" | undefined;
                    app?: string | null | undefined;
                    startTime?: string | null | undefined;
                    endTime?: string | null | undefined;
                    userId?: string | null | undefined;
                    order?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                events: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    activityType: z.ZodString;
                    id: z.ZodString;
                    groupId: z.ZodString;
                    datetime: z.ZodNumber;
                    organizationId: z.ZodString;
                    organizationName: z.ZodString;
                    sdkClientId: z.ZodString;
                    sdkClientName: z.ZodString;
                    anonAppUserId: z.ZodString;
                    data: z.ZodUnion<[z.ZodObject<{
                        app: z.ZodString;
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        app: string;
                    }, {
                        type: string;
                        app: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
                        error: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    }, {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                        isInitiallyInstalled: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        app: z.ZodString;
                        authUrl: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        app: string;
                        authUrl: string;
                    }, {
                        type: string;
                        app: string;
                        authUrl: string;
                    }>]>;
                    anonUserId: z.ZodString;
                    userId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    id: string;
                    groupId: string;
                    activityType: string;
                    userId: string;
                    organizationId: string;
                    anonUserId: string;
                    datetime: number;
                    organizationName: string;
                    sdkClientId: string;
                    sdkClientName: string;
                    anonAppUserId: string;
                }, {
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    id: string;
                    groupId: string;
                    activityType: string;
                    userId: string;
                    organizationId: string;
                    anonUserId: string;
                    datetime: number;
                    organizationName: string;
                    sdkClientId: string;
                    sdkClientName: string;
                    anonAppUserId: string;
                }>, z.ZodObject<{
                    activityType: z.ZodString;
                    browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
                    id: z.ZodString;
                    groupId: z.ZodString;
                    datetime: z.ZodNumber;
                    organizationId: z.ZodString;
                    organizationName: z.ZodString;
                    sdkClientId: z.ZodString;
                    sdkClientName: z.ZodString;
                    anonAppUserId: z.ZodString;
                    data: z.ZodUnion<[z.ZodObject<{
                        type: z.ZodString;
                        sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        apps: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    }, {
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        anonUserId: z.ZodString;
                        apps: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    }, {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    }, {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        service: z.ZodString;
                        sessionId: z.ZodString;
                        cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    }, {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        url: z.ZodString;
                        base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        isOnAuthenticatedPage: z.ZodBoolean;
                        isLoggedIn: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }, {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }>]>;
                    anonUserId: z.ZodString;
                    userId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    id: string;
                    groupId: string;
                    activityType: string;
                    userId: string;
                    organizationId: string;
                    anonUserId: string;
                    datetime: number;
                    organizationName: string;
                    sdkClientId: string;
                    sdkClientName: string;
                    anonAppUserId: string;
                    browserType: "local" | "managed" | "remote";
                }, {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    id: string;
                    groupId: string;
                    activityType: string;
                    userId: string;
                    organizationId: string;
                    anonUserId: string;
                    datetime: number;
                    organizationName: string;
                    sdkClientId: string;
                    sdkClientName: string;
                    anonAppUserId: string;
                    browserType: "local" | "managed" | "remote";
                }>]>, "many">;
            }, "strip", z.ZodTypeAny, {
                events: ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    id: string;
                    groupId: string;
                    activityType: string;
                    userId: string;
                    organizationId: string;
                    anonUserId: string;
                    datetime: number;
                    organizationName: string;
                    sdkClientId: string;
                    sdkClientName: string;
                    anonAppUserId: string;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    id: string;
                    groupId: string;
                    activityType: string;
                    userId: string;
                    organizationId: string;
                    anonUserId: string;
                    datetime: number;
                    organizationName: string;
                    sdkClientId: string;
                    sdkClientName: string;
                    anonAppUserId: string;
                    browserType: "local" | "managed" | "remote";
                })[];
            }, {
                events: ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    id: string;
                    groupId: string;
                    activityType: string;
                    userId: string;
                    organizationId: string;
                    anonUserId: string;
                    datetime: number;
                    organizationName: string;
                    sdkClientId: string;
                    sdkClientName: string;
                    anonAppUserId: string;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    id: string;
                    groupId: string;
                    activityType: string;
                    userId: string;
                    organizationId: string;
                    anonUserId: string;
                    datetime: number;
                    organizationName: string;
                    sdkClientId: string;
                    sdkClientName: string;
                    anonAppUserId: string;
                    browserType: "local" | "managed" | "remote";
                })[];
            }>;
        };
        "/account/api/v1/appIntegrations": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/account/api/v1/appIntegrations">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodNever;
            response: z.ZodObject<{
                apps: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    iconUrl: z.ZodString;
                    experimental: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    domains: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    iconUrl: string;
                    name: string;
                    domains: string[];
                    experimental?: boolean | null | undefined;
                }, {
                    id: string;
                    iconUrl: string;
                    name: string;
                    domains: string[];
                    experimental?: boolean | null | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                apps: {
                    id: string;
                    iconUrl: string;
                    name: string;
                    domains: string[];
                    experimental?: boolean | null | undefined;
                }[];
            }, {
                apps: {
                    id: string;
                    iconUrl: string;
                    name: string;
                    domains: string[];
                    experimental?: boolean | null | undefined;
                }[];
            }>;
        };
        "/link/url": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/link/url">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    app: z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>;
                    appUserId: z.ZodString;
                    chromeExtensionId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    companyLogoUrl: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    companyName: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    redirectUrl: z.ZodString;
                    state: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    authUrl: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    checkUrl: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    displayName: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    iconUrl: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    app: string;
                    redirectUrl: string;
                    chromeExtensionId?: string | null | undefined;
                    companyLogoUrl?: string | null | undefined;
                    companyName?: string | null | undefined;
                    state?: string | null | undefined;
                    authUrl?: string | null | undefined;
                    checkUrl?: string | null | undefined;
                    displayName?: string | null | undefined;
                    iconUrl?: string | null | undefined;
                }, {
                    appUserId: string;
                    app: string;
                    redirectUrl: string;
                    chromeExtensionId?: string | null | undefined;
                    companyLogoUrl?: string | null | undefined;
                    companyName?: string | null | undefined;
                    state?: string | null | undefined;
                    authUrl?: string | null | undefined;
                    checkUrl?: string | null | undefined;
                    displayName?: string | null | undefined;
                    iconUrl?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId: string;
                    app: string;
                    redirectUrl: string;
                    chromeExtensionId?: string | null | undefined;
                    companyLogoUrl?: string | null | undefined;
                    companyName?: string | null | undefined;
                    state?: string | null | undefined;
                    authUrl?: string | null | undefined;
                    checkUrl?: string | null | undefined;
                    displayName?: string | null | undefined;
                    iconUrl?: string | null | undefined;
                };
            }, {
                query: {
                    appUserId: string;
                    app: string;
                    redirectUrl: string;
                    chromeExtensionId?: string | null | undefined;
                    companyLogoUrl?: string | null | undefined;
                    companyName?: string | null | undefined;
                    state?: string | null | undefined;
                    authUrl?: string | null | undefined;
                    checkUrl?: string | null | undefined;
                    displayName?: string | null | undefined;
                    iconUrl?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
            }, {
                url: string;
            }>;
        };
        "/org/member/{memberId}": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/member/{memberId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    memberId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    memberId: string;
                }, {
                    memberId: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                path: {
                    memberId: string;
                };
            }, {
                path: {
                    memberId: string;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                email: z.ZodString;
                organizationId: z.ZodString;
                role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
            }, "strip", z.ZodTypeAny, {
                email: string;
                id: string;
                name: string;
                organizationId: string;
                role: string;
            }, {
                email: string;
                id: string;
                name: string;
                organizationId: string;
                role: string;
            }>;
        };
        "/org/members": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/members">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodNever;
            response: z.ZodObject<{
                resource: z.ZodString;
                items: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    email: z.ZodString;
                    role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
                    createdAt: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    email: string;
                    id: string;
                    name: string;
                    createdAt: string;
                    role: string;
                }, {
                    email: string;
                    id: string;
                    name: string;
                    createdAt: string;
                    role: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                resource: string;
                items: {
                    email: string;
                    id: string;
                    name: string;
                    createdAt: string;
                    role: string;
                }[];
            }, {
                resource: string;
                items: {
                    email: string;
                    id: string;
                    name: string;
                    createdAt: string;
                    role: string;
                }[];
            }>;
        };
        "/org/organization/{organizationId}": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/organization/{organizationId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    organizationId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    organizationId: string;
                }, {
                    organizationId: string;
                }>;
                header: z.ZodObject<{
                    userId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    orgId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    userId?: string | null | undefined;
                    orgId?: string | null | undefined;
                }, {
                    userId?: string | null | undefined;
                    orgId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                path: {
                    organizationId: string;
                };
                header: {
                    userId?: string | null | undefined;
                    orgId?: string | null | undefined;
                };
            }, {
                path: {
                    organizationId: string;
                };
                header: {
                    userId?: string | null | undefined;
                    orgId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                members: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    email: z.ZodString;
                    organizationId: z.ZodString;
                    role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
                }, "strip", z.ZodTypeAny, {
                    email: string;
                    id: string;
                    name: string;
                    organizationId: string;
                    role: string;
                }, {
                    email: string;
                    id: string;
                    name: string;
                    organizationId: string;
                    role: string;
                }>, "many">;
                apiKey: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                sdkAccessToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                members: {
                    email: string;
                    id: string;
                    name: string;
                    organizationId: string;
                    role: string;
                }[];
                logoUrl?: string | null | undefined;
                apiKey?: string | null | undefined;
                sdkAccessToken?: string | null | undefined;
            }, {
                id: string;
                name: string;
                members: {
                    email: string;
                    id: string;
                    name: string;
                    organizationId: string;
                    role: string;
                }[];
                logoUrl?: string | null | undefined;
                apiKey?: string | null | undefined;
                sdkAccessToken?: string | null | undefined;
            }>;
        };
        "/org/user": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/user">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    externalUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    id?: string | null | undefined;
                    email?: string | null | undefined;
                    phoneNumber?: string | null | undefined;
                    externalUserId?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }, {
                    id?: string | null | undefined;
                    email?: string | null | undefined;
                    phoneNumber?: string | null | undefined;
                    externalUserId?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    id?: string | null | undefined;
                    email?: string | null | undefined;
                    phoneNumber?: string | null | undefined;
                    externalUserId?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                query: {
                    id?: string | null | undefined;
                    email?: string | null | undefined;
                    phoneNumber?: string | null | undefined;
                    externalUserId?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                externalUserId: z.ZodString;
                createdAt: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                externalUserId: string;
                createdAt: string;
                email?: string | null | undefined;
                phoneNumber?: string | null | undefined;
            }, {
                id: string;
                externalUserId: string;
                createdAt: string;
                email?: string | null | undefined;
                phoneNumber?: string | null | undefined;
            }>;
        };
        "/org/users": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/users">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodNever;
            response: z.ZodObject<{
                appUsers: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    phoneNumber: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    appUserPoolId: z.ZodString;
                    createdAt: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    appUserPoolId: string;
                    id: string;
                    createdAt: string;
                    email?: string | null | undefined;
                    phoneNumber?: string | null | undefined;
                }, {
                    appUserPoolId: string;
                    id: string;
                    createdAt: string;
                    email?: string | null | undefined;
                    phoneNumber?: string | null | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                appUsers: {
                    appUserPoolId: string;
                    id: string;
                    createdAt: string;
                    email?: string | null | undefined;
                    phoneNumber?: string | null | undefined;
                }[];
            }, {
                appUsers: {
                    appUserPoolId: string;
                    id: string;
                    createdAt: string;
                    email?: string | null | undefined;
                    phoneNumber?: string | null | undefined;
                }[];
            }>;
        };
        "/org/sdkClient/{sdkClientId}": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/sdkClient/{sdkClientId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    sdkClientId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sdkClientId: string;
                }, {
                    sdkClientId: string;
                }>;
                header: z.ZodObject<{
                    userId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    orgId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    userId?: string | null | undefined;
                    orgId?: string | null | undefined;
                }, {
                    userId?: string | null | undefined;
                    orgId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                path: {
                    sdkClientId: string;
                };
                header: {
                    userId?: string | null | undefined;
                    orgId?: string | null | undefined;
                };
            }, {
                path: {
                    sdkClientId: string;
                };
                header: {
                    userId?: string | null | undefined;
                    orgId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                description: z.ZodString;
                auth: z.ZodUnion<[z.ZodObject<{
                    type: z.ZodString;
                    userPoolId: z.ZodString;
                    oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        logoUrl: z.ZodString;
                        chromeExtensionId: z.ZodString;
                        redirectUrls: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    }, {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    }>, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                }, {
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                }>, z.ZodObject<{
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                }, {
                    type: string;
                }>]>;
                organizationId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                auth: ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                }) & ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                } | undefined);
            }, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                auth: ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                }) & ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                } | undefined);
            }>;
        };
        "/org/sdkClient/auth": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/sdkClient/auth">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodNever;
            response: z.ZodObject<{
                authenticatorId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                authenticatorId: string;
            }, {
                authenticatorId: string;
            }>;
        };
        "/org/sdkClients": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/sdkClients">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodNever;
            response: z.ZodObject<{
                resource: z.ZodString;
                items: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    description: z.ZodString;
                    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    createdAt: z.ZodString;
                    logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    chromeExtensionId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    redirectUrls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    createdAt: string;
                    description: string;
                    appUserPoolId?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    chromeExtensionId?: string | null | undefined;
                    redirectUrls?: string[] | null | undefined;
                }, {
                    id: string;
                    name: string;
                    createdAt: string;
                    description: string;
                    appUserPoolId?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    chromeExtensionId?: string | null | undefined;
                    redirectUrls?: string[] | null | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                resource: string;
                items: {
                    id: string;
                    name: string;
                    createdAt: string;
                    description: string;
                    appUserPoolId?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    chromeExtensionId?: string | null | undefined;
                    redirectUrls?: string[] | null | undefined;
                }[];
            }, {
                resource: string;
                items: {
                    id: string;
                    name: string;
                    createdAt: string;
                    description: string;
                    appUserPoolId?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    chromeExtensionId?: string | null | undefined;
                    redirectUrls?: string[] | null | undefined;
                }[];
            }>;
        };
        "/account/api/v1/appIntegration": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/account/api/v1/appIntegration">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    id: string;
                };
            }, {
                query: {
                    id: string;
                };
            }>;
            response: z.ZodUnion<[z.ZodObject<{
                app: z.ZodObject<{
                    authUrl: z.ZodString;
                    displayName: z.ZodString;
                    iconUrl: z.ZodString;
                    domCompletionIndicator: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    completionIndicators: z.ZodArray<z.ZodObject<{
                        storage: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"session">, z.ZodLiteral<"cookie">]>;
                        key: z.ZodString;
                        domains: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        key: string;
                        storage: "local" | "session" | "cookie";
                        domains?: string[] | null | undefined;
                    }, {
                        key: string;
                        storage: "local" | "session" | "cookie";
                        domains?: string[] | null | undefined;
                    }>, "many">;
                    sessionExtractionDomains: z.ZodArray<z.ZodObject<{
                        domain: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        domain: string;
                    }, {
                        domain: string;
                    }>, "many">;
                    sessionValidation: z.ZodObject<{
                        sessionValidityChecks: z.ZodArray<z.ZodObject<{
                            url: z.ZodString;
                            criteria: z.ZodArray<z.ZodObject<{
                                selector: z.ZodString;
                                exists: z.ZodBoolean;
                            }, "strip", z.ZodTypeAny, {
                                selector: string;
                                exists: boolean;
                            }, {
                                selector: string;
                                exists: boolean;
                            }>, "many">;
                            matchRule: z.ZodUnion<[z.ZodLiteral<"ALL">, z.ZodLiteral<"ANY">]>;
                        }, "strip", z.ZodTypeAny, {
                            url: string;
                            criteria: {
                                selector: string;
                                exists: boolean;
                            }[];
                            matchRule: "ALL" | "ANY";
                        }, {
                            url: string;
                            criteria: {
                                selector: string;
                                exists: boolean;
                            }[];
                            matchRule: "ALL" | "ANY";
                        }>, "many">;
                    }, "strip", z.ZodTypeAny, {
                        sessionValidityChecks: {
                            url: string;
                            criteria: {
                                selector: string;
                                exists: boolean;
                            }[];
                            matchRule: "ALL" | "ANY";
                        }[];
                    }, {
                        sessionValidityChecks: {
                            url: string;
                            criteria: {
                                selector: string;
                                exists: boolean;
                            }[];
                            matchRule: "ALL" | "ANY";
                        }[];
                    }>;
                }, "strip", z.ZodTypeAny, {
                    authUrl: string;
                    displayName: string;
                    iconUrl: string;
                    completionIndicators: {
                        key: string;
                        storage: "local" | "session" | "cookie";
                        domains?: string[] | null | undefined;
                    }[];
                    sessionExtractionDomains: {
                        domain: string;
                    }[];
                    sessionValidation: {
                        sessionValidityChecks: {
                            url: string;
                            criteria: {
                                selector: string;
                                exists: boolean;
                            }[];
                            matchRule: "ALL" | "ANY";
                        }[];
                    };
                    domCompletionIndicator?: string | null | undefined;
                }, {
                    authUrl: string;
                    displayName: string;
                    iconUrl: string;
                    completionIndicators: {
                        key: string;
                        storage: "local" | "session" | "cookie";
                        domains?: string[] | null | undefined;
                    }[];
                    sessionExtractionDomains: {
                        domain: string;
                    }[];
                    sessionValidation: {
                        sessionValidityChecks: {
                            url: string;
                            criteria: {
                                selector: string;
                                exists: boolean;
                            }[];
                            matchRule: "ALL" | "ANY";
                        }[];
                    };
                    domCompletionIndicator?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                app: {
                    authUrl: string;
                    displayName: string;
                    iconUrl: string;
                    completionIndicators: {
                        key: string;
                        storage: "local" | "session" | "cookie";
                        domains?: string[] | null | undefined;
                    }[];
                    sessionExtractionDomains: {
                        domain: string;
                    }[];
                    sessionValidation: {
                        sessionValidityChecks: {
                            url: string;
                            criteria: {
                                selector: string;
                                exists: boolean;
                            }[];
                            matchRule: "ALL" | "ANY";
                        }[];
                    };
                    domCompletionIndicator?: string | null | undefined;
                };
            }, {
                app: {
                    authUrl: string;
                    displayName: string;
                    iconUrl: string;
                    completionIndicators: {
                        key: string;
                        storage: "local" | "session" | "cookie";
                        domains?: string[] | null | undefined;
                    }[];
                    sessionExtractionDomains: {
                        domain: string;
                    }[];
                    sessionValidation: {
                        sessionValidityChecks: {
                            url: string;
                            criteria: {
                                selector: string;
                                exists: boolean;
                            }[];
                            matchRule: "ALL" | "ANY";
                        }[];
                    };
                    domCompletionIndicator?: string | null | undefined;
                };
            }>, z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>]>;
        };
        "/account/api/v1/session": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/account/api/v1/session">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    ownerId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    appUserId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    domain: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    domain: string;
                    ownerId?: string | null | undefined;
                    appUserId?: string | null | undefined;
                }, {
                    domain: string;
                    ownerId?: string | null | undefined;
                    appUserId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    domain: string;
                    ownerId?: string | null | undefined;
                    appUserId?: string | null | undefined;
                };
            }, {
                query: {
                    domain: string;
                    ownerId?: string | null | undefined;
                    appUserId?: string | null | undefined;
                };
            }>;
            response: z.ZodUnion<[z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>, z.ZodObject<{
                ownerId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                domain: z.ZodString;
                session: z.ZodObject<{
                    id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
                    cookies: z.ZodArray<z.ZodObject<{
                        name: z.ZodString;
                        value: z.ZodString;
                        domain: z.ZodString;
                        path: z.ZodString;
                        expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                        secure: z.ZodBoolean;
                        httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                        sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        value: string;
                        name: string;
                        domain: string;
                        path: string;
                        secure: boolean;
                        expires?: number | null | undefined;
                        httpOnly?: boolean | null | undefined;
                        sameSite?: "Lax" | "Strict" | "None" | undefined;
                    }, {
                        value: string;
                        name: string;
                        domain: string;
                        path: string;
                        secure: boolean;
                        expires?: number | null | undefined;
                        httpOnly?: boolean | null | undefined;
                        sameSite?: "Lax" | "Strict" | "None" | undefined;
                    }>, "many">;
                    localStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
                    sessionStorage: z.ZodArray<z.ZodArray<z.ZodUnknown, "many">, "many">;
                    proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    url: z.ZodString;
                    metadata: z.ZodOptional<z.ZodUnion<[z.ZodUnknown, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    cookies: {
                        value: string;
                        name: string;
                        domain: string;
                        path: string;
                        secure: boolean;
                        expires?: number | null | undefined;
                        httpOnly?: boolean | null | undefined;
                        sameSite?: "Lax" | "Strict" | "None" | undefined;
                    }[];
                    localStorage: unknown[][];
                    sessionStorage: unknown[][];
                    id?: string | null | undefined;
                    status?: "unknown" | "active" | "revoked" | undefined;
                    proxyId?: string | null | undefined;
                    metadata?: unknown;
                }, {
                    url: string;
                    cookies: {
                        value: string;
                        name: string;
                        domain: string;
                        path: string;
                        secure: boolean;
                        expires?: number | null | undefined;
                        httpOnly?: boolean | null | undefined;
                        sameSite?: "Lax" | "Strict" | "None" | undefined;
                    }[];
                    localStorage: unknown[][];
                    sessionStorage: unknown[][];
                    id?: string | null | undefined;
                    status?: "unknown" | "active" | "revoked" | undefined;
                    proxyId?: string | null | undefined;
                    metadata?: unknown;
                }>;
            }, "strip", z.ZodTypeAny, {
                session: {
                    url: string;
                    cookies: {
                        value: string;
                        name: string;
                        domain: string;
                        path: string;
                        secure: boolean;
                        expires?: number | null | undefined;
                        httpOnly?: boolean | null | undefined;
                        sameSite?: "Lax" | "Strict" | "None" | undefined;
                    }[];
                    localStorage: unknown[][];
                    sessionStorage: unknown[][];
                    id?: string | null | undefined;
                    status?: "unknown" | "active" | "revoked" | undefined;
                    proxyId?: string | null | undefined;
                    metadata?: unknown;
                };
                domain: string;
                ownerId?: string | null | undefined;
                appUserId?: string | null | undefined;
            }, {
                session: {
                    url: string;
                    cookies: {
                        value: string;
                        name: string;
                        domain: string;
                        path: string;
                        secure: boolean;
                        expires?: number | null | undefined;
                        httpOnly?: boolean | null | undefined;
                        sameSite?: "Lax" | "Strict" | "None" | undefined;
                    }[];
                    localStorage: unknown[][];
                    sessionStorage: unknown[][];
                    id?: string | null | undefined;
                    status?: "unknown" | "active" | "revoked" | undefined;
                    proxyId?: string | null | undefined;
                    metadata?: unknown;
                };
                domain: string;
                ownerId?: string | null | undefined;
                appUserId?: string | null | undefined;
            }>]>;
        };
        "/account/api/v1/session/status": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/account/api/v1/session/status">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    appUserId: z.ZodString;
                    app: z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    app: string;
                }, {
                    appUserId: string;
                    app: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId: string;
                    app: string;
                };
            }, {
                query: {
                    appUserId: string;
                    app: string;
                };
            }>;
            response: z.ZodObject<{
                status: z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"unknown">, z.ZodLiteral<"revoked">]>;
            }, "strip", z.ZodTypeAny, {
                status: "unknown" | "active" | "revoked";
            }, {
                status: "unknown" | "active" | "revoked";
            }>;
        };
        "/account/api/v1/session/request": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/account/api/v1/session/request">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    id: string;
                };
            }, {
                query: {
                    id: string;
                };
            }>;
            response: z.ZodObject<{
                message: z.ZodString;
                succeeded: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                status: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                details: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    requestId: z.ZodString;
                    appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    appSdkClientId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    domain: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    requestId: string;
                    appUserId?: string | null | undefined;
                    appSdkClientId?: string | null | undefined;
                    domain?: string | null | undefined;
                }, {
                    requestId: string;
                    appUserId?: string | null | undefined;
                    appSdkClientId?: string | null | undefined;
                    domain?: string | null | undefined;
                }>, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                succeeded?: boolean | null | undefined;
                status?: string | null | undefined;
                details?: {
                    requestId: string;
                    appUserId?: string | null | undefined;
                    appSdkClientId?: string | null | undefined;
                    domain?: string | null | undefined;
                } | undefined;
            }, {
                message: string;
                succeeded?: boolean | null | undefined;
                status?: string | null | undefined;
                details?: {
                    requestId: string;
                    appUserId?: string | null | undefined;
                    appSdkClientId?: string | null | undefined;
                    domain?: string | null | undefined;
                } | undefined;
            }>;
        };
        "/account/api/v1/sessions": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/account/api/v1/sessions">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    appUserId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId?: string | null | undefined;
                }, {
                    appUserId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId?: string | null | undefined;
                };
            }, {
                query: {
                    appUserId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                sessions: z.ZodArray<z.ZodObject<{
                    sessionId: z.ZodString;
                    app: z.ZodString;
                    appUser: z.ZodObject<{
                        id: z.ZodString;
                        email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        email?: string | null | undefined;
                    }, {
                        id: string;
                        email?: string | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    app: string;
                    sessionId: string;
                    appUser: {
                        id: string;
                        email?: string | null | undefined;
                    };
                }, {
                    app: string;
                    sessionId: string;
                    appUser: {
                        id: string;
                        email?: string | null | undefined;
                    };
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                sessions: {
                    app: string;
                    sessionId: string;
                    appUser: {
                        id: string;
                        email?: string | null | undefined;
                    };
                }[];
            }, {
                sessions: {
                    app: string;
                    sessionId: string;
                    appUser: {
                        id: string;
                        email?: string | null | undefined;
                    };
                }[];
            }>;
        };
        "/org/userPool/{userPoolId}": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/userPool/{userPoolId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    userPoolId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    userPoolId: string;
                }, {
                    userPoolId: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                path: {
                    userPoolId: string;
                };
            }, {
                path: {
                    userPoolId: string;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                description: z.ZodString;
                authorization: z.ZodObject<{
                    jwksUri: z.ZodString;
                    idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    jwksUri: string;
                    idClaim?: string | null | undefined;
                }, {
                    jwksUri: string;
                    idClaim?: string | null | undefined;
                }>;
                organizationId: z.ZodString;
                hosted: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                authorization: {
                    jwksUri: string;
                    idClaim?: string | null | undefined;
                };
                hosted: boolean;
            }, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                authorization: {
                    jwksUri: string;
                    idClaim?: string | null | undefined;
                };
                hosted: boolean;
            }>;
        };
        "/org/userPools": {
            method: z.ZodLiteral<"GET">;
            path: z.ZodLiteral<"/org/userPools">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodNever;
            response: z.ZodObject<{
                resource: z.ZodString;
                items: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    description: z.ZodString;
                    authorization: z.ZodObject<{
                        jwksUri: z.ZodString;
                        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    }, {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    }>;
                    hosted: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    description: string;
                    authorization: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    };
                    hosted: boolean;
                }, {
                    id: string;
                    name: string;
                    description: string;
                    authorization: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    };
                    hosted: boolean;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                resource: string;
                items: {
                    id: string;
                    name: string;
                    description: string;
                    authorization: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    };
                    hosted: boolean;
                }[];
            }, {
                resource: string;
                items: {
                    id: string;
                    name: string;
                    description: string;
                    authorization: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    };
                    hosted: boolean;
                }[];
            }>;
        };
    };
    post: {
        "/actions/linkedin/createConversation": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/actions/linkedin/createConversation">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    profileId: z.ZodString;
                    appUserId: z.ZodString;
                    message: z.ZodString;
                    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    profileId: string;
                    appUserId: string;
                    appUserPoolId?: string | null | undefined;
                }, {
                    message: string;
                    profileId: string;
                    appUserId: string;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    message: string;
                    profileId: string;
                    appUserId: string;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                body: {
                    message: string;
                    profileId: string;
                    appUserId: string;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                success: z.ZodBoolean;
                conversationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                success: boolean;
                conversationId?: string | null | undefined;
            }, {
                success: boolean;
                conversationId?: string | null | undefined;
            }>;
        };
        "/actions/linkedin/sendMessage": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/actions/linkedin/sendMessage">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    message: z.ZodString;
                    appUserId: z.ZodString;
                    conversationId: z.ZodString;
                    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    appUserId: string;
                    conversationId: string;
                    appUserPoolId?: string | null | undefined;
                }, {
                    message: string;
                    appUserId: string;
                    conversationId: string;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    message: string;
                    appUserId: string;
                    conversationId: string;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                body: {
                    message: string;
                    appUserId: string;
                    conversationId: string;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                success: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                success: boolean;
            }, {
                success: boolean;
            }>;
        };
        "/actions/linkedin/sendConnectionRequest": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/actions/linkedin/sendConnectionRequest">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    profileId: z.ZodString;
                    appUserId: z.ZodString;
                    message: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    profileId: string;
                    appUserId: string;
                    message?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }, {
                    profileId: string;
                    appUserId: string;
                    message?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    profileId: string;
                    appUserId: string;
                    message?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                body: {
                    profileId: string;
                    appUserId: string;
                    message?: string | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                success: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                success: boolean;
            }, {
                success: boolean;
            }>;
        };
        "/actions/linkedin/search": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/actions/linkedin/search">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    profileName: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    connectionsOf: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    appUserId: z.ZodString;
                    networkDistance: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodLiteral<"1">, z.ZodLiteral<"2">, z.ZodLiteral<"3">, z.ZodLiteral<"4">]>, "many">, z.ZodNull, z.ZodUndefined]>>;
                    appUserPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    cursor?: string | null | undefined;
                    profileName?: string | null | undefined;
                    connectionsOf?: string | null | undefined;
                    networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }, {
                    appUserId: string;
                    cursor?: string | null | undefined;
                    profileName?: string | null | undefined;
                    connectionsOf?: string | null | undefined;
                    networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
                    appUserPoolId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    appUserId: string;
                    cursor?: string | null | undefined;
                    profileName?: string | null | undefined;
                    connectionsOf?: string | null | undefined;
                    networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }, {
                body: {
                    appUserId: string;
                    cursor?: string | null | undefined;
                    profileName?: string | null | undefined;
                    connectionsOf?: string | null | undefined;
                    networkDistance?: ("1" | "2" | "3" | "4")[] | null | undefined;
                    appUserPoolId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                cursor: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                pageCount: z.ZodNumber;
                profiles: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    headline: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    profilePictureUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    publicIdentifier: z.ZodString;
                    publicProfileUrl: z.ZodString;
                    profileUrl: z.ZodString;
                    networkDistance: z.ZodUnion<[z.ZodLiteral<"DISTANCE_1">, z.ZodLiteral<"DISTANCE_2">, z.ZodLiteral<"DISTANCE_3">, z.ZodLiteral<"OUT_OF_NETWORK">]>;
                    location: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    profileUrl: string;
                    publicIdentifier: string;
                    publicProfileUrl: string;
                    networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
                    headline?: string | null | undefined;
                    profilePictureUrl?: string | null | undefined;
                    location?: string | null | undefined;
                }, {
                    id: string;
                    name: string;
                    profileUrl: string;
                    publicIdentifier: string;
                    publicProfileUrl: string;
                    networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
                    headline?: string | null | undefined;
                    profilePictureUrl?: string | null | undefined;
                    location?: string | null | undefined;
                }>, "many">;
                totalCount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                profiles: {
                    id: string;
                    name: string;
                    profileUrl: string;
                    publicIdentifier: string;
                    publicProfileUrl: string;
                    networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
                    headline?: string | null | undefined;
                    profilePictureUrl?: string | null | undefined;
                    location?: string | null | undefined;
                }[];
                pageCount: number;
                totalCount: number;
                cursor?: string | null | undefined;
            }, {
                profiles: {
                    id: string;
                    name: string;
                    profileUrl: string;
                    publicIdentifier: string;
                    publicProfileUrl: string;
                    networkDistance: "DISTANCE_1" | "DISTANCE_2" | "DISTANCE_3" | "OUT_OF_NETWORK";
                    headline?: string | null | undefined;
                    profilePictureUrl?: string | null | undefined;
                    location?: string | null | undefined;
                }[];
                pageCount: number;
                totalCount: number;
                cursor?: string | null | undefined;
            }>;
        };
        "/account/api/v1/activity": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/activity">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodUnion<[z.ZodObject<{
                    activityType: z.ZodString;
                    datetime: z.ZodNumber;
                    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    data: z.ZodUnion<[z.ZodObject<{
                        app: z.ZodString;
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        app: string;
                    }, {
                        type: string;
                        app: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
                        error: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    }, {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                        isInitiallyInstalled: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        app: z.ZodString;
                        authUrl: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        app: string;
                        authUrl: string;
                    }, {
                        type: string;
                        app: string;
                        authUrl: string;
                    }>]>;
                    userId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                }, {
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                }>, z.ZodObject<{
                    activityType: z.ZodString;
                    browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
                    datetime: z.ZodNumber;
                    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    data: z.ZodUnion<[z.ZodObject<{
                        type: z.ZodString;
                        sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        apps: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    }, {
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        anonUserId: z.ZodString;
                        apps: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    }, {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    }, {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        service: z.ZodString;
                        sessionId: z.ZodString;
                        cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    }, {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        url: z.ZodString;
                        base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        isOnAuthenticatedPage: z.ZodBoolean;
                        isLoggedIn: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }, {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }>]>;
                    userId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                }, {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                body: ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                }) & ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                } | undefined);
            }, {
                body: ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                }) & ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                } | undefined);
            }>;
            response: z.ZodUnion<[z.ZodObject<{
                type: z.ZodString;
                groupId: z.ZodString;
                id: z.ZodString;
                activityType: z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                id: string;
                groupId: string;
                activityType: "Link" | "runtime";
            }, {
                type: string;
                id: string;
                groupId: string;
                activityType: "Link" | "runtime";
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
            }, {
                type: string;
                error: string;
            }>]>;
        };
        "/account/api/v1/activity/{groupId}": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/activity/{groupId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    groupId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    groupId: string;
                }, {
                    groupId: string;
                }>;
                body: z.ZodUnion<[z.ZodObject<{
                    activityType: z.ZodString;
                    datetime: z.ZodNumber;
                    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    data: z.ZodUnion<[z.ZodObject<{
                        app: z.ZodString;
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        app: string;
                    }, {
                        type: string;
                        app: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        errorType: z.ZodUnion<[z.ZodLiteral<"SaveSessionError">, z.ZodLiteral<"HangingLoginPage">, z.ZodLiteral<"CompletionIndicatorTimeout">]>;
                        error: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    }, {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                        isInitiallyInstalled: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        chromeExtensionId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        chromeExtensionId: string;
                    }, {
                        type: string;
                        chromeExtensionId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        app: z.ZodString;
                        authUrl: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        app: string;
                        authUrl: string;
                    }, {
                        type: string;
                        app: string;
                        authUrl: string;
                    }>]>;
                    userId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                }, {
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                }>, z.ZodObject<{
                    activityType: z.ZodString;
                    browserType: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"managed">, z.ZodLiteral<"remote">]>;
                    datetime: z.ZodNumber;
                    groupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    data: z.ZodUnion<[z.ZodObject<{
                        type: z.ZodString;
                        sdkVersion: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        apps: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    }, {
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        anonUserId: z.ZodString;
                        apps: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    }, {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorType: z.ZodUnion<[z.ZodLiteral<"injectSessionError">, z.ZodLiteral<"proxyConnectionError">]>;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    }, {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        error: z.ZodString;
                        errorStack: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }, {
                        type: string;
                        error: string;
                        errorStack: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        service: z.ZodString;
                        sessionId: z.ZodString;
                        cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    }, {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                    }, {
                        type: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        url: z.ZodString;
                        base64ImageUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        isOnAuthenticatedPage: z.ZodBoolean;
                        isLoggedIn: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }, {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }>]>;
                    userId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                }, {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                body: ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                }) & ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                } | undefined);
                path: {
                    groupId: string;
                };
            }, {
                body: ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                }) & ({
                    data: ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    }) & ({
                        type: string;
                        app: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "SaveSessionError" | "HangingLoginPage" | "CompletionIndicatorTimeout";
                    } | {
                        type: string;
                        chromeExtensionId: string;
                        isInitiallyInstalled: boolean;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        chromeExtensionId: string;
                    } | {
                        type: string;
                        app: string;
                        authUrl: string;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    groupId?: string | null | undefined;
                } | {
                    data: ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    }) & ({
                        type: string;
                        apps: string[];
                        sdkVersion?: string | null | undefined;
                    } | {
                        type: string;
                        apps: string[];
                        anonUserId: string;
                    } | {
                        type: string;
                        error: string;
                        errorType: "injectSessionError" | "proxyConnectionError";
                    } | {
                        type: string;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        error: string;
                        errorStack: string;
                    } | {
                        type: string;
                        service: string;
                        sessionId: string;
                        cdpUrl?: string | null | undefined;
                        liveStreamingUrl?: string | null | undefined;
                    } | {
                        type: string;
                    } | {
                        type: string;
                        url: string;
                        isOnAuthenticatedPage: boolean;
                        isLoggedIn: boolean;
                        base64ImageUrl?: string | null | undefined;
                    } | undefined);
                    activityType: string;
                    userId: string;
                    datetime: number;
                    browserType: "local" | "managed" | "remote";
                    groupId?: string | null | undefined;
                } | undefined);
                path: {
                    groupId: string;
                };
            }>;
            response: z.ZodUnion<[z.ZodObject<{
                type: z.ZodString;
                groupId: z.ZodString;
                id: z.ZodString;
                activityType: z.ZodUnion<[z.ZodLiteral<"Link">, z.ZodLiteral<"runtime">]>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                id: string;
                groupId: string;
                activityType: "Link" | "runtime";
            }, {
                type: string;
                id: string;
                groupId: string;
                activityType: "Link" | "runtime";
            }>, z.ZodObject<{
                type: z.ZodString;
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                error: string;
            }, {
                type: string;
                error: string;
            }>]>;
        };
        "/org/appUserIdToken": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/org/appUserIdToken">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodUnion<[z.ZodObject<{
                    appUserId: z.ZodString;
                    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    exp?: number | null | undefined;
                }, {
                    appUserId: string;
                    exp?: number | null | undefined;
                }>, z.ZodObject<{
                    sdkClientId: z.ZodString;
                    appUserId: z.ZodString;
                    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                }, {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                }>, z.ZodObject<{
                    userPoolId: z.ZodString;
                    appUserId: z.ZodString;
                    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                }, {
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                body: ({
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    exp?: number | null | undefined;
                }) & ({
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    exp?: number | null | undefined;
                } | undefined);
            }, {
                body: ({
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    exp?: number | null | undefined;
                }) & ({
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    exp?: number | null | undefined;
                } | undefined);
            }>;
            response: z.ZodObject<{
                appUserIdToken: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                appUserIdToken: string;
            }, {
                appUserIdToken: string;
            }>;
        };
        "/account/api/v1/link": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/link">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    app: z.ZodUnion<[z.ZodLiteral<"rippling">, z.ZodLiteral<"gusto">]>;
                    appUserId: z.ZodString;
                    provider: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"browserbase">, z.ZodLiteral<"rebrowser">, z.ZodLiteral<"undetect">]>, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    app: "rippling" | "gusto";
                    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
                }, {
                    appUserId: string;
                    app: "rippling" | "gusto";
                    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    appUserId: string;
                    app: "rippling" | "gusto";
                    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
                };
            }, {
                body: {
                    appUserId: string;
                    app: "rippling" | "gusto";
                    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
                };
            }>;
            response: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
                status: z.ZodOptional<z.ZodLiteral<"SUCCESS">>;
            }, "strip", z.ZodTypeAny, {
                status?: "SUCCESS" | undefined;
            }, {
                status?: "SUCCESS" | undefined;
            }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
                status: z.ZodOptional<z.ZodLiteral<"FAILURE">>;
            }, "strip", z.ZodTypeAny, {
                status?: "FAILURE" | undefined;
            }, {
                status?: "FAILURE" | undefined;
            }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
                status: z.ZodOptional<z.ZodLiteral<"IN_PROGRESS">>;
            }, "strip", z.ZodTypeAny, {
                status?: "IN_PROGRESS" | undefined;
            }, {
                status?: "IN_PROGRESS" | undefined;
            }>, z.ZodObject<{
                schema: z.ZodArray<z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
                    label: z.ZodOptional<z.ZodLiteral<"email">>;
                }, "strip", z.ZodTypeAny, {
                    label?: "email" | undefined;
                }, {
                    label?: "email" | undefined;
                }>, z.ZodObject<{
                    description: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    description: string;
                }, {
                    description: string;
                }>>, z.ZodIntersection<z.ZodObject<{
                    label: z.ZodOptional<z.ZodLiteral<"password">>;
                }, "strip", z.ZodTypeAny, {
                    label?: "password" | undefined;
                }, {
                    label?: "password" | undefined;
                }>, z.ZodObject<{
                    description: z.ZodString;
                    sensitive: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    description: string;
                    sensitive: boolean;
                }, {
                    description: string;
                    sensitive: boolean;
                }>>, z.ZodIntersection<z.ZodObject<{
                    label: z.ZodOptional<z.ZodLiteral<"mfa">>;
                }, "strip", z.ZodTypeAny, {
                    label?: "mfa" | undefined;
                }, {
                    label?: "mfa" | undefined;
                }>, z.ZodObject<{
                    description: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    description: string;
                }, {
                    description: string;
                }>>]>, "many">;
                url: z.ZodString;
                method: z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"PATCH">]>;
                linkId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
                url: string;
                schema: (({
                    label?: "email" | undefined;
                } & {
                    description: string;
                }) | ({
                    label?: "password" | undefined;
                } & {
                    description: string;
                    sensitive: boolean;
                }) | ({
                    label?: "mfa" | undefined;
                } & {
                    description: string;
                }))[];
                linkId: string;
            }, {
                method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
                url: string;
                schema: (({
                    label?: "email" | undefined;
                } & {
                    description: string;
                }) | ({
                    label?: "password" | undefined;
                } & {
                    description: string;
                    sensitive: boolean;
                }) | ({
                    label?: "mfa" | undefined;
                } & {
                    description: string;
                }))[];
                linkId: string;
            }>>]>;
        };
        "/org/member": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/org/member">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    name: z.ZodString;
                    email: z.ZodString;
                    password: z.ZodString;
                    role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
                }, "strip", z.ZodTypeAny, {
                    password: string;
                    email: string;
                    name: string;
                    role: string;
                }, {
                    password: string;
                    email: string;
                    name: string;
                    role: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    password: string;
                    email: string;
                    name: string;
                    role: string;
                };
            }, {
                body: {
                    password: string;
                    email: string;
                    name: string;
                    role: string;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                email: z.ZodString;
                organizationId: z.ZodString;
                role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
            }, "strip", z.ZodTypeAny, {
                email: string;
                id: string;
                name: string;
                organizationId: string;
                role: string;
            }, {
                email: string;
                id: string;
                name: string;
                organizationId: string;
                role: string;
            }>;
        };
        "/org/login": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/org/login">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    email: z.ZodString;
                    password: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    password: string;
                    email: string;
                }, {
                    password: string;
                    email: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    password: string;
                    email: string;
                };
            }, {
                body: {
                    password: string;
                    email: string;
                };
            }>;
            response: z.ZodObject<{
                token: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                token: string;
            }, {
                token: string;
            }>;
        };
        "/org/organization": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/org/organization">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    name: z.ZodString;
                    member: z.ZodObject<{
                        name: z.ZodString;
                        email: z.ZodString;
                        password: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        password: string;
                        email: string;
                        name: string;
                    }, {
                        password: string;
                        email: string;
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    member: {
                        password: string;
                        email: string;
                        name: string;
                    };
                }, {
                    name: string;
                    member: {
                        password: string;
                        email: string;
                        name: string;
                    };
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    name: string;
                    member: {
                        password: string;
                        email: string;
                        name: string;
                    };
                };
            }, {
                body: {
                    name: string;
                    member: {
                        password: string;
                        email: string;
                        name: string;
                    };
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                members: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    email: z.ZodString;
                    organizationId: z.ZodString;
                    role: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodString]>;
                }, "strip", z.ZodTypeAny, {
                    email: string;
                    id: string;
                    name: string;
                    organizationId: string;
                    role: string;
                }, {
                    email: string;
                    id: string;
                    name: string;
                    organizationId: string;
                    role: string;
                }>, "many">;
                apiKey: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                sdkAccessToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                members: {
                    email: string;
                    id: string;
                    name: string;
                    organizationId: string;
                    role: string;
                }[];
                logoUrl?: string | null | undefined;
                apiKey?: string | null | undefined;
                sdkAccessToken?: string | null | undefined;
            }, {
                id: string;
                name: string;
                members: {
                    email: string;
                    id: string;
                    name: string;
                    organizationId: string;
                    role: string;
                }[];
                logoUrl?: string | null | undefined;
                apiKey?: string | null | undefined;
                sdkAccessToken?: string | null | undefined;
            }>;
        };
        "/org/user": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/org/user">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodUnion<[z.ZodObject<{
                    appUserId: z.ZodString;
                    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    exp?: number | null | undefined;
                }, {
                    appUserId: string;
                    exp?: number | null | undefined;
                }>, z.ZodObject<{
                    sdkClientId: z.ZodString;
                    appUserId: z.ZodString;
                    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                }, {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                }>, z.ZodObject<{
                    userPoolId: z.ZodString;
                    appUserId: z.ZodString;
                    exp: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                }, {
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                body: ({
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    exp?: number | null | undefined;
                }) & ({
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    exp?: number | null | undefined;
                } | undefined);
            }, {
                body: ({
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    exp?: number | null | undefined;
                }) & ({
                    appUserId: string;
                    userPoolId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    sdkClientId: string;
                    exp?: number | null | undefined;
                } | {
                    appUserId: string;
                    exp?: number | null | undefined;
                } | undefined);
            }>;
            response: z.ZodObject<{
                success: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                success: boolean;
            }, {
                success: boolean;
            }>;
        };
        "/account/api/v1/cdpUrl": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/cdpUrl">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    apps: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>, "many">, z.ZodString]>;
                    appUserId: z.ZodString;
                    activityGroupId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    proxy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
                        server: z.ZodString;
                        username: z.ZodString;
                        password: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        username: string;
                        password: string;
                        server: string;
                    }, {
                        username: string;
                        password: string;
                        server: string;
                    }>]>, z.ZodUndefined]>>;
                    cdpUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    sessionDuration: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                    keepAlive: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    provider: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"browserbase">, z.ZodLiteral<"rebrowser">, z.ZodLiteral<"undetect">]>, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    apps: (string | string[]) & (string | string[] | undefined);
                    activityGroupId?: string | null | undefined;
                    proxy?: boolean | {
                        username: string;
                        password: string;
                        server: string;
                    } | undefined;
                    cdpUrl?: string | null | undefined;
                    sessionDuration?: number | null | undefined;
                    keepAlive?: boolean | null | undefined;
                    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
                }, {
                    appUserId: string;
                    apps: (string | string[]) & (string | string[] | undefined);
                    activityGroupId?: string | null | undefined;
                    proxy?: boolean | {
                        username: string;
                        password: string;
                        server: string;
                    } | undefined;
                    cdpUrl?: string | null | undefined;
                    sessionDuration?: number | null | undefined;
                    keepAlive?: boolean | null | undefined;
                    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    appUserId: string;
                    apps: (string | string[]) & (string | string[] | undefined);
                    activityGroupId?: string | null | undefined;
                    proxy?: boolean | {
                        username: string;
                        password: string;
                        server: string;
                    } | undefined;
                    cdpUrl?: string | null | undefined;
                    sessionDuration?: number | null | undefined;
                    keepAlive?: boolean | null | undefined;
                    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
                };
            }, {
                body: {
                    appUserId: string;
                    apps: (string | string[]) & (string | string[] | undefined);
                    activityGroupId?: string | null | undefined;
                    proxy?: boolean | {
                        username: string;
                        password: string;
                        server: string;
                    } | undefined;
                    cdpUrl?: string | null | undefined;
                    sessionDuration?: number | null | undefined;
                    keepAlive?: boolean | null | undefined;
                    provider?: "browserbase" | "rebrowser" | "undetect" | undefined;
                };
            }>;
            response: z.ZodObject<{
                cdpUrl: z.ZodString;
                liveStreamingUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                cdpUrl: string;
                liveStreamingUrl?: string | null | undefined;
            }, {
                cdpUrl: string;
                liveStreamingUrl?: string | null | undefined;
            }>;
        };
        "/account/api/v1/logs": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/logs">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    environment: z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"development">, z.ZodLiteral<"staging">, z.ZodLiteral<"sandbox">, z.ZodLiteral<"prod">]>;
                    userMetadata: z.ZodObject<{
                        anonSessionId: z.ZodString;
                        externalUserId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        externalUserId: string;
                        anonSessionId: string;
                    }, {
                        externalUserId: string;
                        anonSessionId: string;
                    }>;
                    browserConfig: z.ZodUnion<[z.ZodObject<{
                        browserType: z.ZodString;
                        proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                            isAnonProxyEnabled: z.ZodBoolean;
                        }, "strip", z.ZodTypeAny, {
                            isAnonProxyEnabled: boolean;
                        }, {
                            isAnonProxyEnabled: boolean;
                        }>, z.ZodUndefined]>>;
                        browserbase: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                            sessionId: z.ZodString;
                            sessionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        }, "strip", z.ZodTypeAny, {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        }, {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        }>, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    }, {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    }>, z.ZodObject<{
                        browserType: z.ZodString;
                        isHeadless: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                        proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                            isAnonProxyEnabled: z.ZodBoolean;
                        }, "strip", z.ZodTypeAny, {
                            isAnonProxyEnabled: boolean;
                        }, {
                            isAnonProxyEnabled: boolean;
                        }>, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    }, {
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    }>, z.ZodObject<{
                        browserType: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        browserType: string;
                    }, {
                        browserType: string;
                    }>, z.ZodObject<{
                        browserType: z.ZodString;
                        proxy: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                            ip: z.ZodString;
                            username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        }, "strip", z.ZodTypeAny, {
                            ip: string;
                            username?: string | null | undefined;
                        }, {
                            ip: string;
                            username?: string | null | undefined;
                        }>, z.ZodUndefined]>>;
                        connectionUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    }, {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    }>]>;
                    app: z.ZodString;
                    runtimeResult: z.ZodUnion<[z.ZodObject<{
                        type: z.ZodString;
                        startSdkTime: z.ZodNumber;
                        startRuntimeExecutionTime: z.ZodNumber;
                        endRuntimeExecutionTime: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    }, {
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        startSdkTime: z.ZodNumber;
                        classification: z.ZodString;
                        error: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    }, {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        startSdkTime: z.ZodNumber;
                        classification: z.ZodString;
                        error: z.ZodString;
                        startRuntimeExecutionTime: z.ZodNumber;
                        endRuntimeExecutionTime: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    }, {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    }>, z.ZodObject<{
                        type: z.ZodString;
                        startSdkTime: z.ZodNumber;
                        classification: z.ZodString;
                        error: z.ZodString;
                        startRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                        endRuntimeExecutionTime: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    }, {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    }>]>;
                }, "strip", z.ZodTypeAny, {
                    app: string;
                    environment: "local" | "development" | "staging" | "sandbox" | "prod";
                    userMetadata: {
                        externalUserId: string;
                        anonSessionId: string;
                    };
                    browserConfig: ({
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    } | {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    } | {
                        browserType: string;
                    } | {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    }) & ({
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    } | {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    } | {
                        browserType: string;
                    } | {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    } | undefined);
                    runtimeResult: ({
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    }) & ({
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    } | undefined);
                }, {
                    app: string;
                    environment: "local" | "development" | "staging" | "sandbox" | "prod";
                    userMetadata: {
                        externalUserId: string;
                        anonSessionId: string;
                    };
                    browserConfig: ({
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    } | {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    } | {
                        browserType: string;
                    } | {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    }) & ({
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    } | {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    } | {
                        browserType: string;
                    } | {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    } | undefined);
                    runtimeResult: ({
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    }) & ({
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    } | undefined);
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    app: string;
                    environment: "local" | "development" | "staging" | "sandbox" | "prod";
                    userMetadata: {
                        externalUserId: string;
                        anonSessionId: string;
                    };
                    browserConfig: ({
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    } | {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    } | {
                        browserType: string;
                    } | {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    }) & ({
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    } | {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    } | {
                        browserType: string;
                    } | {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    } | undefined);
                    runtimeResult: ({
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    }) & ({
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    } | undefined);
                };
            }, {
                body: {
                    app: string;
                    environment: "local" | "development" | "staging" | "sandbox" | "prod";
                    userMetadata: {
                        externalUserId: string;
                        anonSessionId: string;
                    };
                    browserConfig: ({
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    } | {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    } | {
                        browserType: string;
                    } | {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    }) & ({
                        browserType: string;
                        isHeadless?: boolean | null | undefined;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                    } | {
                        browserType: string;
                        proxy?: {
                            isAnonProxyEnabled: boolean;
                        } | undefined;
                        browserbase?: {
                            sessionId: string;
                            sessionUrl?: string | null | undefined;
                        } | undefined;
                    } | {
                        browserType: string;
                    } | {
                        browserType: string;
                        proxy?: {
                            ip: string;
                            username?: string | null | undefined;
                        } | undefined;
                        connectionUrl?: string | null | undefined;
                    } | undefined);
                    runtimeResult: ({
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    }) & ({
                        type: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        startRuntimeExecutionTime: number;
                        endRuntimeExecutionTime: number;
                        classification: string;
                    } | {
                        type: string;
                        error: string;
                        startSdkTime: number;
                        classification: string;
                        startRuntimeExecutionTime?: number | null | undefined;
                        endRuntimeExecutionTime?: number | null | undefined;
                    } | undefined);
                };
            }>;
            response: z.ZodObject<{
                message: z.ZodString;
                recordedAt: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                recordedAt?: string | null | undefined;
            }, {
                message: string;
                recordedAt?: string | null | undefined;
            }>;
        };
        "/org/sdkClient": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/org/sdkClient">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    name: z.ZodString;
                    kind: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodObject<{
                        application: z.ZodObject<{
                            userPoolId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                            oauthConfig: z.ZodOptional<z.ZodObject<{
                                logoUrl: z.ZodString;
                                chromeExtensionId: z.ZodString;
                                redirectUrls: z.ZodArray<z.ZodString, "many">;
                            }, "strip", z.ZodTypeAny, {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            }, {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            }>>;
                        }, "strip", z.ZodTypeAny, {
                            userPoolId?: string | null | undefined;
                            oauthConfig?: {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            } | undefined;
                        }, {
                            userPoolId?: string | null | undefined;
                            oauthConfig?: {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            } | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        application: {
                            userPoolId?: string | null | undefined;
                            oauthConfig?: {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            } | undefined;
                        };
                    }, {
                        application: {
                            userPoolId?: string | null | undefined;
                            oauthConfig?: {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            } | undefined;
                        };
                    }>]>, z.ZodUndefined]>>;
                    description: z.ZodString;
                    oauthDisabled: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                    authorization: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        jwksUri: z.ZodString;
                        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    }, {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    }>, z.ZodUndefined]>>;
                    organizationId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description: string;
                    kind?: string | {
                        application: {
                            userPoolId?: string | null | undefined;
                            oauthConfig?: {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            } | undefined;
                        };
                    } | undefined;
                    oauthDisabled?: boolean | null | undefined;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                    organizationId?: string | undefined;
                }, {
                    name: string;
                    description: string;
                    kind?: string | {
                        application: {
                            userPoolId?: string | null | undefined;
                            oauthConfig?: {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            } | undefined;
                        };
                    } | undefined;
                    oauthDisabled?: boolean | null | undefined;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                    organizationId?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    name: string;
                    description: string;
                    kind?: string | {
                        application: {
                            userPoolId?: string | null | undefined;
                            oauthConfig?: {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            } | undefined;
                        };
                    } | undefined;
                    oauthDisabled?: boolean | null | undefined;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                    organizationId?: string | undefined;
                };
            }, {
                body: {
                    name: string;
                    description: string;
                    kind?: string | {
                        application: {
                            userPoolId?: string | null | undefined;
                            oauthConfig?: {
                                chromeExtensionId: string;
                                logoUrl: string;
                                redirectUrls: string[];
                            } | undefined;
                        };
                    } | undefined;
                    oauthDisabled?: boolean | null | undefined;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                    organizationId?: string | undefined;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                description: z.ZodString;
                auth: z.ZodUnion<[z.ZodObject<{
                    type: z.ZodString;
                    userPoolId: z.ZodString;
                    oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        logoUrl: z.ZodString;
                        chromeExtensionId: z.ZodString;
                        redirectUrls: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    }, {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    }>, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                }, {
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                }>, z.ZodObject<{
                    type: z.ZodString;
                    secret: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    secret: string;
                }, {
                    type: string;
                    secret: string;
                }>]>;
                organizationId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                auth: ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                    secret: string;
                }) & ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                    secret: string;
                } | undefined);
            }, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                auth: ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                    secret: string;
                }) & ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                    secret: string;
                } | undefined);
            }>;
        };
        "/account/api/v1/browser/environment": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/browser/environment">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    proxy: z.ZodOptional<z.ZodObject<{
                        server: z.ZodString;
                        bypass: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        username: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        password: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        server: string;
                        bypass?: string | null | undefined;
                        username?: string | null | undefined;
                        password?: string | null | undefined;
                    }, {
                        server: string;
                        bypass?: string | null | undefined;
                        username?: string | null | undefined;
                        password?: string | null | undefined;
                    }>>;
                    isLiveStreamingSession: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    proxy?: {
                        server: string;
                        bypass?: string | null | undefined;
                        username?: string | null | undefined;
                        password?: string | null | undefined;
                    } | undefined;
                    isLiveStreamingSession?: boolean | null | undefined;
                }, {
                    proxy?: {
                        server: string;
                        bypass?: string | null | undefined;
                        username?: string | null | undefined;
                        password?: string | null | undefined;
                    } | undefined;
                    isLiveStreamingSession?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    proxy?: {
                        server: string;
                        bypass?: string | null | undefined;
                        username?: string | null | undefined;
                        password?: string | null | undefined;
                    } | undefined;
                    isLiveStreamingSession?: boolean | null | undefined;
                };
            }, {
                body: {
                    proxy?: {
                        server: string;
                        bypass?: string | null | undefined;
                        username?: string | null | undefined;
                        password?: string | null | undefined;
                    } | undefined;
                    isLiveStreamingSession?: boolean | null | undefined;
                };
            }>;
            response: z.ZodUnion<[z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>, z.ZodObject<{
                id: z.ZodString;
                ownerId: z.ZodString;
                environment: z.ZodObject<{
                    connectUrl: z.ZodString;
                    liveStreamingSession: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    connectUrl: string;
                    liveStreamingSession?: string | null | undefined;
                }, {
                    connectUrl: string;
                    liveStreamingSession?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ownerId: string;
                environment: {
                    connectUrl: string;
                    liveStreamingSession?: string | null | undefined;
                };
            }, {
                id: string;
                ownerId: string;
                environment: {
                    connectUrl: string;
                    liveStreamingSession?: string | null | undefined;
                };
            }>]>;
        };
        "/account/api/v1/session": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/session">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    ownerId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    domain: z.ZodString;
                    session: z.ZodObject<{
                        id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
                        cookies: z.ZodArray<z.ZodObject<{
                            name: z.ZodString;
                            value: z.ZodString;
                            domain: z.ZodString;
                            path: z.ZodString;
                            expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                            secure: z.ZodBoolean;
                            hostOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            discard: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            session: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            partitioned: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>, z.ZodUndefined]>>;
                            sameSitePolicy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"strict">, z.ZodLiteral<"None">, z.ZodLiteral<"none">]>, z.ZodUndefined]>>;
                            storeId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        }, "strip", z.ZodTypeAny, {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            storeId?: string | null | undefined;
                        }, {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            storeId?: string | null | undefined;
                        }>, "many">;
                        localStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        sessionStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        url: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    }, {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    session: {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    };
                    domain: string;
                    ownerId?: string | null | undefined;
                }, {
                    session: {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    };
                    domain: string;
                    ownerId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    session: {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    };
                    domain: string;
                    ownerId?: string | null | undefined;
                };
            }, {
                body: {
                    session: {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | "lax" | "strict" | "none" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    };
                    domain: string;
                    ownerId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                message: z.ZodString;
                ownerId: z.ZodString;
                domain: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                ownerId: string;
                domain: string;
            }, {
                message: string;
                ownerId: string;
                domain: string;
            }>;
        };
        "/account/api/v1/session/request": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/session/request">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodUnion<[z.ZodObject<{
                    iosPushAuthorization: z.ZodObject<{
                        iosAppId: z.ZodString;
                        authToken: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        iosAppId: string;
                        authToken: string;
                    }, {
                        iosAppId: string;
                        authToken: string;
                    }>;
                    account: z.ZodObject<{
                        ownerId: z.ZodString;
                        domain: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        ownerId: string;
                        domain: string;
                    }, {
                        ownerId: string;
                        domain: string;
                    }>;
                    appSdkClientId: z.ZodString;
                    alertBody: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    alertTitle: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    appSdkClientId: string;
                    iosPushAuthorization: {
                        iosAppId: string;
                        authToken: string;
                    };
                    account: {
                        ownerId: string;
                        domain: string;
                    };
                    alertBody?: string | null | undefined;
                    alertTitle?: string | null | undefined;
                }, {
                    appSdkClientId: string;
                    iosPushAuthorization: {
                        iosAppId: string;
                        authToken: string;
                    };
                    account: {
                        ownerId: string;
                        domain: string;
                    };
                    alertBody?: string | null | undefined;
                    alertTitle?: string | null | undefined;
                }>, z.ZodObject<{
                    appUserId: z.ZodString;
                    app: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    app: string;
                }, {
                    appUserId: string;
                    app: string;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                body: ({
                    appSdkClientId: string;
                    iosPushAuthorization: {
                        iosAppId: string;
                        authToken: string;
                    };
                    account: {
                        ownerId: string;
                        domain: string;
                    };
                    alertBody?: string | null | undefined;
                    alertTitle?: string | null | undefined;
                } | {
                    appUserId: string;
                    app: string;
                }) & ({
                    appSdkClientId: string;
                    iosPushAuthorization: {
                        iosAppId: string;
                        authToken: string;
                    };
                    account: {
                        ownerId: string;
                        domain: string;
                    };
                    alertBody?: string | null | undefined;
                    alertTitle?: string | null | undefined;
                } | {
                    appUserId: string;
                    app: string;
                } | undefined);
            }, {
                body: ({
                    appSdkClientId: string;
                    iosPushAuthorization: {
                        iosAppId: string;
                        authToken: string;
                    };
                    account: {
                        ownerId: string;
                        domain: string;
                    };
                    alertBody?: string | null | undefined;
                    alertTitle?: string | null | undefined;
                } | {
                    appUserId: string;
                    app: string;
                }) & ({
                    appSdkClientId: string;
                    iosPushAuthorization: {
                        iosAppId: string;
                        authToken: string;
                    };
                    account: {
                        ownerId: string;
                        domain: string;
                    };
                    alertBody?: string | null | undefined;
                    alertTitle?: string | null | undefined;
                } | {
                    appUserId: string;
                    app: string;
                } | undefined);
            }>;
            response: z.ZodObject<{
                message: z.ZodString;
                status: z.ZodString;
                requestId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                status: string;
                requestId: string;
            }, {
                message: string;
                status: string;
                requestId: string;
            }>;
        };
        "/account/api/v1/sessionAccessGrant": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/account/api/v1/sessionAccessGrant">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    sessionId: z.ZodString;
                    appUserId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    sessionId: string;
                }, {
                    appUserId: string;
                    sessionId: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    appUserId: string;
                    sessionId: string;
                };
            }, {
                body: {
                    appUserId: string;
                    sessionId: string;
                };
            }>;
            response: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
        "/org/userPool": {
            method: z.ZodLiteral<"POST">;
            path: z.ZodLiteral<"/org/userPool">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodString;
                    authorization: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        jwksUri: z.ZodString;
                        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    }, {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    }>, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description: string;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                }, {
                    name: string;
                    description: string;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    name: string;
                    description: string;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                };
            }, {
                body: {
                    name: string;
                    description: string;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                description: z.ZodString;
                authorization: z.ZodObject<{
                    jwksUri: z.ZodString;
                    idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    jwksUri: string;
                    idClaim?: string | null | undefined;
                }, {
                    jwksUri: string;
                    idClaim?: string | null | undefined;
                }>;
                organizationId: z.ZodString;
                hosted: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                authorization: {
                    jwksUri: string;
                    idClaim?: string | null | undefined;
                };
                hosted: boolean;
            }, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                authorization: {
                    jwksUri: string;
                    idClaim?: string | null | undefined;
                };
                hosted: boolean;
            }>;
        };
    };
    patch: {
        "/account/api/v1/link/{linkId}": {
            method: z.ZodLiteral<"PATCH">;
            path: z.ZodLiteral<"/account/api/v1/link/{linkId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    linkId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    linkId: string;
                }, {
                    linkId: string;
                }>;
                body: z.ZodUnion<[z.ZodObject<{
                    email: z.ZodString;
                    password: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    password: string;
                    email: string;
                }, {
                    password: string;
                    email: string;
                }>, z.ZodObject<{
                    mfa: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    mfa: string;
                }, {
                    mfa: string;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                body: ({
                    password: string;
                    email: string;
                } | {
                    mfa: string;
                }) & ({
                    password: string;
                    email: string;
                } | {
                    mfa: string;
                } | undefined);
                path: {
                    linkId: string;
                };
            }, {
                body: ({
                    password: string;
                    email: string;
                } | {
                    mfa: string;
                }) & ({
                    password: string;
                    email: string;
                } | {
                    mfa: string;
                } | undefined);
                path: {
                    linkId: string;
                };
            }>;
            response: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
                status: z.ZodOptional<z.ZodLiteral<"SUCCESS">>;
            }, "strip", z.ZodTypeAny, {
                status?: "SUCCESS" | undefined;
            }, {
                status?: "SUCCESS" | undefined;
            }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
                status: z.ZodOptional<z.ZodLiteral<"FAILURE">>;
            }, "strip", z.ZodTypeAny, {
                status?: "FAILURE" | undefined;
            }, {
                status?: "FAILURE" | undefined;
            }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, z.ZodIntersection<z.ZodObject<{
                status: z.ZodOptional<z.ZodLiteral<"IN_PROGRESS">>;
            }, "strip", z.ZodTypeAny, {
                status?: "IN_PROGRESS" | undefined;
            }, {
                status?: "IN_PROGRESS" | undefined;
            }>, z.ZodObject<{
                schema: z.ZodArray<z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
                    label: z.ZodOptional<z.ZodLiteral<"email">>;
                }, "strip", z.ZodTypeAny, {
                    label?: "email" | undefined;
                }, {
                    label?: "email" | undefined;
                }>, z.ZodObject<{
                    description: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    description: string;
                }, {
                    description: string;
                }>>, z.ZodIntersection<z.ZodObject<{
                    label: z.ZodOptional<z.ZodLiteral<"password">>;
                }, "strip", z.ZodTypeAny, {
                    label?: "password" | undefined;
                }, {
                    label?: "password" | undefined;
                }>, z.ZodObject<{
                    description: z.ZodString;
                    sensitive: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    description: string;
                    sensitive: boolean;
                }, {
                    description: string;
                    sensitive: boolean;
                }>>, z.ZodIntersection<z.ZodObject<{
                    label: z.ZodOptional<z.ZodLiteral<"mfa">>;
                }, "strip", z.ZodTypeAny, {
                    label?: "mfa" | undefined;
                }, {
                    label?: "mfa" | undefined;
                }>, z.ZodObject<{
                    description: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    description: string;
                }, {
                    description: string;
                }>>]>, "many">;
                url: z.ZodString;
                method: z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"PATCH">]>;
                linkId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
                url: string;
                schema: (({
                    label?: "email" | undefined;
                } & {
                    description: string;
                }) | ({
                    label?: "password" | undefined;
                } & {
                    description: string;
                    sensitive: boolean;
                }) | ({
                    label?: "mfa" | undefined;
                } & {
                    description: string;
                }))[];
                linkId: string;
            }, {
                method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
                url: string;
                schema: (({
                    label?: "email" | undefined;
                } & {
                    description: string;
                }) | ({
                    label?: "password" | undefined;
                } & {
                    description: string;
                    sensitive: boolean;
                }) | ({
                    label?: "mfa" | undefined;
                } & {
                    description: string;
                }))[];
                linkId: string;
            }>>]>;
        };
        "/org/organization/{organizationId}": {
            method: z.ZodLiteral<"PATCH">;
            path: z.ZodLiteral<"/org/organization/{organizationId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    organizationId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    organizationId: string;
                }, {
                    organizationId: string;
                }>;
                body: z.ZodObject<{
                    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                }, {
                    name?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    name?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                };
                path: {
                    organizationId: string;
                };
            }, {
                body: {
                    name?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                };
                path: {
                    organizationId: string;
                };
            }>;
            response: z.ZodBoolean;
        };
        "/org/sdkClient/{sdkClientId}": {
            method: z.ZodLiteral<"PATCH">;
            path: z.ZodLiteral<"/org/sdkClient/{sdkClientId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    sdkClientId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sdkClientId: string;
                }, {
                    sdkClientId: string;
                }>;
                body: z.ZodObject<{
                    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    oauthConfig: z.ZodOptional<z.ZodObject<{
                        logoUrl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                        chromeExtensionId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                        redirectUrls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        logoUrl?: string | null | undefined;
                        chromeExtensionId?: string | null | undefined;
                        redirectUrls?: string[] | null | undefined;
                    }, {
                        logoUrl?: string | null | undefined;
                        chromeExtensionId?: string | null | undefined;
                        redirectUrls?: string[] | null | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | null | undefined;
                    description?: string | null | undefined;
                    oauthConfig?: {
                        logoUrl?: string | null | undefined;
                        chromeExtensionId?: string | null | undefined;
                        redirectUrls?: string[] | null | undefined;
                    } | undefined;
                }, {
                    name?: string | null | undefined;
                    description?: string | null | undefined;
                    oauthConfig?: {
                        logoUrl?: string | null | undefined;
                        chromeExtensionId?: string | null | undefined;
                        redirectUrls?: string[] | null | undefined;
                    } | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    name?: string | null | undefined;
                    description?: string | null | undefined;
                    oauthConfig?: {
                        logoUrl?: string | null | undefined;
                        chromeExtensionId?: string | null | undefined;
                        redirectUrls?: string[] | null | undefined;
                    } | undefined;
                };
                path: {
                    sdkClientId: string;
                };
            }, {
                body: {
                    name?: string | null | undefined;
                    description?: string | null | undefined;
                    oauthConfig?: {
                        logoUrl?: string | null | undefined;
                        chromeExtensionId?: string | null | undefined;
                        redirectUrls?: string[] | null | undefined;
                    } | undefined;
                };
                path: {
                    sdkClientId: string;
                };
            }>;
            response: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                description: z.ZodString;
                auth: z.ZodUnion<[z.ZodObject<{
                    type: z.ZodString;
                    userPoolId: z.ZodString;
                    oauthConfig: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        logoUrl: z.ZodString;
                        chromeExtensionId: z.ZodString;
                        redirectUrls: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    }, {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    }>, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                }, {
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                }>, z.ZodObject<{
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                }, {
                    type: string;
                }>]>;
                organizationId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                auth: ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                }) & ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                } | undefined);
            }, {
                id: string;
                name: string;
                organizationId: string;
                description: string;
                auth: ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                }) & ({
                    type: string;
                    userPoolId: string;
                    oauthConfig?: {
                        chromeExtensionId: string;
                        logoUrl: string;
                        redirectUrls: string[];
                    } | undefined;
                } | {
                    type: string;
                } | undefined);
            }>;
        };
        "/org/userPool/{userPoolId}": {
            method: z.ZodLiteral<"PATCH">;
            path: z.ZodLiteral<"/org/userPool/{userPoolId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    userPoolId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    userPoolId: string;
                }, {
                    userPoolId: string;
                }>;
                body: z.ZodObject<{
                    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                    authorization: z.ZodOptional<z.ZodObject<{
                        jwksUri: z.ZodString;
                        idClaim: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    }, {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | null | undefined;
                    description?: string | null | undefined;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                }, {
                    name?: string | null | undefined;
                    description?: string | null | undefined;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    name?: string | null | undefined;
                    description?: string | null | undefined;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                };
                path: {
                    userPoolId: string;
                };
            }, {
                body: {
                    name?: string | null | undefined;
                    description?: string | null | undefined;
                    authorization?: {
                        jwksUri: string;
                        idClaim?: string | null | undefined;
                    } | undefined;
                };
                path: {
                    userPoolId: string;
                };
            }>;
            response: z.ZodBoolean;
        };
    };
    delete: {
        "/org/organization/{organizationId}": {
            method: z.ZodLiteral<"DELETE">;
            path: z.ZodLiteral<"/org/organization/{organizationId}">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                path: z.ZodObject<{
                    organizationId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    organizationId: string;
                }, {
                    organizationId: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                path: {
                    organizationId: string;
                };
            }, {
                path: {
                    organizationId: string;
                };
            }>;
            response: z.ZodBoolean;
        };
        "/account/api/v1/session": {
            method: z.ZodLiteral<"DELETE">;
            path: z.ZodLiteral<"/account/api/v1/session">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                query: z.ZodObject<{
                    appUserId: z.ZodString;
                    app: z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodLiteral<"amazon">, z.ZodLiteral<"delta">, z.ZodLiteral<"doordash">, z.ZodLiteral<"facebook">, z.ZodLiteral<"github">, z.ZodLiteral<"instacart">, z.ZodLiteral<"instagram">, z.ZodLiteral<"linkedin">, z.ZodLiteral<"opentable">, z.ZodLiteral<"twitter">, z.ZodLiteral<"resy">, z.ZodLiteral<"uber">, z.ZodLiteral<"united_airlines">, z.ZodLiteral<"nextdoor">, z.ZodLiteral<"example">]>]>;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    app: string;
                }, {
                    appUserId: string;
                    app: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                query: {
                    appUserId: string;
                    app: string;
                };
            }, {
                query: {
                    appUserId: string;
                    app: string;
                };
            }>;
            response: z.ZodObject<{
                appUserId: z.ZodString;
                app: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                appUserId: string;
                app: string;
            }, {
                appUserId: string;
                app: string;
            }>;
        };
        "/account/api/v1/sessionAccessGrant": {
            method: z.ZodLiteral<"DELETE">;
            path: z.ZodLiteral<"/account/api/v1/sessionAccessGrant">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    sessionId: z.ZodString;
                    appUserId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    appUserId: string;
                    sessionId: string;
                }, {
                    appUserId: string;
                    sessionId: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    appUserId: string;
                    sessionId: string;
                };
            }, {
                body: {
                    appUserId: string;
                    sessionId: string;
                };
            }>;
            response: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    put: {
        "/account/api/v1/session": {
            method: z.ZodLiteral<"PUT">;
            path: z.ZodLiteral<"/account/api/v1/session">;
            requestFormat: z.ZodLiteral<"json">;
            parameters: z.ZodObject<{
                body: z.ZodObject<{
                    ownerId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                    domain: z.ZodString;
                    session: z.ZodObject<{
                        id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        status: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"active">, z.ZodLiteral<"revoked">, z.ZodLiteral<"unknown">]>, z.ZodUndefined]>>;
                        cookies: z.ZodArray<z.ZodObject<{
                            name: z.ZodString;
                            value: z.ZodString;
                            domain: z.ZodString;
                            path: z.ZodString;
                            expires: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                            secure: z.ZodBoolean;
                            hostOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            httpOnly: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            discard: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            session: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            partitioned: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull, z.ZodUndefined]>>;
                            sameSite: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
                            sameSitePolicy: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"unspecified">, z.ZodLiteral<"no_restriction">, z.ZodLiteral<"Lax">, z.ZodLiteral<"Strict">, z.ZodLiteral<"None">]>, z.ZodUndefined]>>;
                            storeId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        }, "strip", z.ZodTypeAny, {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            storeId?: string | null | undefined;
                        }, {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            storeId?: string | null | undefined;
                        }>, "many">;
                        localStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        sessionStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        proxyId: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>>;
                        url: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    }, {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    session: {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    };
                    domain: string;
                    ownerId?: string | null | undefined;
                }, {
                    session: {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    };
                    domain: string;
                    ownerId?: string | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                body: {
                    session: {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    };
                    domain: string;
                    ownerId?: string | null | undefined;
                };
            }, {
                body: {
                    session: {
                        url: string;
                        cookies: {
                            value: string;
                            name: string;
                            domain: string;
                            path: string;
                            secure: boolean;
                            expires?: number | null | undefined;
                            hostOnly?: boolean | null | undefined;
                            httpOnly?: boolean | null | undefined;
                            discard?: boolean | null | undefined;
                            session?: boolean | null | undefined;
                            partitioned?: boolean | null | undefined;
                            sameSite?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            sameSitePolicy?: "Lax" | "Strict" | "None" | "unspecified" | "no_restriction" | undefined;
                            storeId?: string | null | undefined;
                        }[];
                        localStorage: string[][];
                        sessionStorage: string[][];
                        id?: string | null | undefined;
                        status?: "unknown" | "active" | "revoked" | undefined;
                        proxyId?: string | null | undefined;
                    };
                    domain: string;
                    ownerId?: string | null | undefined;
                };
            }>;
            response: z.ZodObject<{
                message: z.ZodString;
                ownerId: z.ZodString;
                domain: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                ownerId: string;
                domain: string;
            }, {
                message: string;
                ownerId: string;
                domain: string;
            }>;
        };
    };
};
export type EndpointByMethod = typeof EndpointByMethod;
export type GetEndpoints = EndpointByMethod["get"];
export type PostEndpoints = EndpointByMethod["post"];
export type PatchEndpoints = EndpointByMethod["patch"];
export type DeleteEndpoints = EndpointByMethod["delete"];
export type PutEndpoints = EndpointByMethod["put"];
export type AllEndpoints = EndpointByMethod[keyof EndpointByMethod];
export type EndpointParameters = {
    body?: unknown;
    query?: Record<string, unknown>;
    header?: Record<string, unknown>;
    path?: Record<string, unknown>;
};
export type MutationMethod = "post" | "put" | "patch" | "delete";
export type Method = "get" | "head" | "options" | MutationMethod;
type RequestFormat = "json" | "form-data" | "form-url" | "binary" | "text";
export type DefaultEndpoint = {
    parameters?: EndpointParameters | undefined;
    response: unknown;
};
export type Endpoint<TConfig extends DefaultEndpoint = DefaultEndpoint> = {
    operationId: string;
    method: Method;
    path: string;
    requestFormat: RequestFormat;
    parameters?: TConfig["parameters"];
    meta: {
        alias: string;
        hasParameters: boolean;
        areParametersRequired: boolean;
    };
    response: TConfig["response"];
};
type Fetcher = (method: Method, url: string, parameters?: EndpointParameters | undefined) => Promise<Endpoint["response"]>;
type RequiredKeys<T> = {
    [P in keyof T]-?: undefined extends T[P] ? never : P;
}[keyof T];
type MaybeOptionalArg<T> = RequiredKeys<T> extends never ? [config?: T] : [config: T];
export declare class ApiClient {
    fetcher: Fetcher;
    baseUrl: string;
    constructor(fetcher: Fetcher);
    setBaseUrl(baseUrl: string): this;
    get<Path extends keyof GetEndpoints, TEndpoint extends GetEndpoints[Path]>(path: Path, ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>): Promise<z.infer<TEndpoint["response"]>>;
    post<Path extends keyof PostEndpoints, TEndpoint extends PostEndpoints[Path]>(path: Path, ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>): Promise<z.infer<TEndpoint["response"]>>;
    patch<Path extends keyof PatchEndpoints, TEndpoint extends PatchEndpoints[Path]>(path: Path, ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>): Promise<z.infer<TEndpoint["response"]>>;
    delete<Path extends keyof DeleteEndpoints, TEndpoint extends DeleteEndpoints[Path]>(path: Path, ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>): Promise<z.infer<TEndpoint["response"]>>;
    put<Path extends keyof PutEndpoints, TEndpoint extends PutEndpoints[Path]>(path: Path, ...params: MaybeOptionalArg<z.infer<TEndpoint["parameters"]>>): Promise<z.infer<TEndpoint["response"]>>;
}
export declare function createApiClient(fetcher: Fetcher, baseUrl?: string): ApiClient;
export {};
/**
 Example usage:
 const api = createApiClient((method, url, params) =>
   fetch(url, { method, body: JSON.stringify(params) }).then((res) => res.json()),
 );
 api.get("/users").then((users) => console.log(users));
 api.post("/users", { body: { name: "John" } }).then((user) => console.log(user));
 api.put("/users/:id", { path: { id: 1 }, body: { name: "John" } }).then((user) => console.log(user));
*/
