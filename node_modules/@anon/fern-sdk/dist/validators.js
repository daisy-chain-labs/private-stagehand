"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeErrorType = exports.RuntimeInjectSessionEvent = exports.RuntimeStartEvent = exports.LinkEventPayload = exports.LinkOpenAppAuthPageEvent = exports.LinkInstalledChromeExtensionEvent = exports.LinkOpenChromeExtensionPageEvent = exports.LinkInitialChromeExtensionStatusEvent = exports.LinkFailedEvent = exports.LinkFailedErrorType = exports.LinkSuccessEvent = exports.LinkCloseEvent = exports.LinkStartEvent = exports.LinkedinSearchProfilesBody = exports.LinkedinSendConnectionRequestResponse = exports.LinkedinSendConnectionRequestBody = exports.LinkedinGetProfileResponse = exports.VolunteeringExperience = exports.WorkExperience = exports.PrimaryLocale = exports.Birthdate = exports.ContactInfo = exports.Social = exports.Certification = exports.Skill = exports.Language = exports.Education = exports.LinkedinSearchProfilesResponse = exports.NetworkDistanceNumber = exports.ProfileSearchResult = exports.NetworkDistance = exports.LinkedinProfile = exports.LinkedinCreateConversationResponse = exports.LinkedinListMessagesResponse = exports.LinkedinGetConversationResponse = exports.LinkedinConversation = exports.Message = exports.LinkedinListConnectionsResponse = exports.LinkedinConnection = exports.LinkedinListConversationsResponse = exports.LinkedinConversationListItem = exports.ChatProfile = exports.ContentType = exports.FolderType = exports.ReadOnlyStatus = exports.MutedUntil = exports.ConversationType = exports.LinkedinSendMessageResponse = exports.LinkedinSendMessageBody = exports.LinkedinCreateConversationBody = void 0;
exports.CreateMember = exports.MemberRole = exports.ContinueLinkRequest = exports.ContinueLinkRequestMfa = exports.ContinueLinkRequestEmailPassword = exports.LinkResponse = exports.LinkResponseInProgress = exports.HttpMethod = exports.LinkResponseSchema = exports.MfaSchema = exports.PasswordSchema = exports.EmailSchema = exports.LinkResponseFailure = exports.LinkResponseSuccess = exports.InitiateLinkRequest = exports.BrowserProvider = exports.LinkApp = exports.CreateLinkUrlResponse = exports.MissingFieldErrorType = exports.AppUserIdToken = exports.CreateAppUserIdToken = exports.CreateAppUserIdTokenWithDefault = exports.CreateAppUserIdTokenWithSdkClient = exports.SdkClientId = exports.CreateAppUserIdTokenWithUserPool = exports.UserPoolId = exports.ListAppIntegrationsResponse = exports.ListAppIntegrationsResponseItem = exports.CreateEventResponse = exports.CreateEventResponseFailure = exports.CreateEventResponseSuccess = exports.ActivityEventList = exports.CreateEventRequestBody = exports.Event = exports.RuntimeEvent = exports.CreateRuntimeEvent = exports.LinkEvent = exports.CreateLinkEvent = exports.ActivityType = exports.BrowserType = exports.RuntimeEventPayload = exports.RuntimePageVisitEvent = exports.RuntimeAddedAnonProxyEvent = exports.RuntimeCreateBrowserSessionEvent = exports.RuntimeRemoteConnectionErrorEvent = exports.RuntimeCreateBrowserEnvironmentErrorEvent = exports.RuntimeExecutionErrorEvent = exports.RuntimeExecutionSuccessEvent = exports.RuntimeExecutionStartEvent = exports.RuntimeSetupFailureEvent = void 0;
exports.SdkClientKind = exports.SdkClientKindApplication = exports.SdkClientKindApplicationApplication = exports.SdkClientOauthConfig = exports.RecordLogResponse = exports.RuntimeLogCreateRequest = exports.BrowserConfigCreateRequest = exports.RuntimeLog = exports.CreateUserMetadata = exports.BrowserConfig = exports.UserMetadata = exports.RuntimeResult = exports.OtherError = exports.RuntimePlaywrightError = exports.FailedToInject = exports.SuccessRuntimeResult = exports.BaseRuntimeResult = exports.RuntimeResultType = exports.InferredRuntimeBrowserConfig = exports.InferredRuntimeBrowserConfigProxy = exports.RemoteBrowserConfig = exports.ManagedBrowserConfig = exports.ManagedBrowserConfigProxy = exports.BrowserbaseSession = exports.LocalBrowserConfig = exports.LocalBrowserConfigProxy = exports.AnonEnvironment = exports.CreateCdpUrlRequest = exports.ProxyType = exports.ProxyConfig = exports.CreateCdpUrlResponse = exports.Apps = exports.App = exports.Integration = exports.CreateAppUserResponse = exports.DeleteOrganizationResponse = exports.UpdateOrganization = exports.AppUser = exports.AppUserList = exports.AppUserListItem = exports.Organization = exports.CreateOrganization = exports.CreateOrganizationMember = exports.MemberList = exports.MemberListItem = exports.LoginSession = exports.LoginMember = exports.Member = exports.OrganizationId = exports.MemberId = void 0;
exports.PutAccountApiV1SessionResponse = exports.PutAccountApiV1SessionRequestSession = exports.PutAccountApiV1SessionRequestSessionCookiesItem = exports.PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy = exports.PutAccountApiV1SessionRequestSessionCookiesItemSameSite = exports.PutAccountApiV1SessionRequestSessionStatus = exports.PostAccountApiV1SessionResponse = exports.PostAccountApiV1SessionRequestSession = exports.PostAccountApiV1SessionRequestSessionCookiesItem = exports.PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy = exports.PostAccountApiV1SessionRequestSessionCookiesItemSameSite = exports.PostAccountApiV1SessionRequestSessionStatus = exports.GetAccountApiV1SessionResponse = exports.GetAccountApiV1SessionResponseAppUserId = exports.GetAccountApiV1SessionResponseAppUserIdSession = exports.GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem = exports.GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite = exports.GetAccountApiV1SessionResponseAppUserIdSessionStatus = exports.GetAccountApiV1SessionResponseMessage = exports.PostAccountApiV1BrowserEnvironmentResponse = exports.PostAccountApiV1BrowserEnvironmentResponseEnvironment = exports.PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment = exports.PostAccountApiV1BrowserEnvironmentResponseMessage = exports.PostAccountApiV1BrowserEnvironmentRequest = exports.PostAccountApiV1BrowserEnvironmentRequestProxy = exports.GetAccountApiV1AppIntegrationResponse = exports.GetAccountApiV1AppIntegrationResponseMessage = exports.GetAccountApiV1AppIntegrationResponseApp = exports.GetAccountApiV1AppIntegrationResponseAppApp = exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidation = exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem = exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule = exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem = exports.GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem = exports.GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem = exports.GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage = exports.AuthenticatorResponse = exports.UpdateSdkClient = exports.UpdateOauthConfig = exports.SdkClientList = exports.SdkClientListItem = exports.CreateSdkClient = exports.SdkClientAuthorization = exports.CreatedSdkClient = exports.SdkClient = exports.CreatedSdkAuth = exports.SdkAuth = exports.SdkAuthNewApiKey = exports.SdkAuthApiKey = exports.SdkAuthUserPool = void 0;
exports.patch_Organization_updateOrganization = exports.delete_Organization_deleteOrganization = exports.get_Organization_getOrganization = exports.post_Organization_createOrganization = exports.post_Member_login = exports.get_Member_listMembers = exports.get_Member_getMember = exports.post_Member_createMember = exports.get_Link_createLinkUrl = exports.patch_Link_continueLink = exports.post_Link_initiateLink = exports.post_AppUserIdToken_createAppUserIdToken = exports.get_AppIntegrations_listAppIntegrations = exports.post_Activity_createEventWithGroupId = exports.post_Activity_createEvent = exports.get_Activity_getActivityEvents = exports.post_Actions_linkedinSearchProfiles = exports.post_Actions_linkedinSendConnectionRequest = exports.get_Actions_linkedinGetProfile = exports.post_Actions_linkedinSendMessage = exports.get_Actions_linkedinListMessages = exports.get_Actions_linkedinGetConversation = exports.post_Actions_linkedinCreateConversation = exports.get_Actions_linkedinListConnections = exports.get_Actions_linkedinListConversations = exports.UpdateUserPool = exports.UserPoolList = exports.UserPoolListItem = exports.UserPool = exports.CreateUserPool = exports.AuthorizationTypeInput = exports.AuthorizationType = exports.JwksBody = exports.DeleteAccountApiV1SessionAccessGrantResponse = exports.PostAccountApiV1SessionAccessGrantResponse = exports.ListSessionsResponse = exports.ListSessionsResponseItem = exports.ListSessionsResponseItemAppUser = exports.PostAccountApiV1SessionRequestResponse = exports.PostAccountApiV1SessionRequestRequest = exports.PostAccountApiV1SessionRequestRequestApp = exports.PostAccountApiV1SessionRequestRequestAccount = exports.PostAccountApiV1SessionRequestRequestAccountAccount = exports.PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization = exports.GetAccountApiV1SessionRequestResponse = exports.GetAccountApiV1SessionRequestResponseDetails = exports.GetAccountApiV1SessionStatusResponse = exports.SessionStatus = exports.DeleteSessionResponse = exports.DeleteSessionResponseError = void 0;
exports.ApiClient = exports.EndpointByMethod = exports.get_UserPool_listUserPools = exports.patch_UserPool_updateUserPool = exports.get_UserPool_getUserPool = exports.post_UserPool_createUserPool = exports.delete_Session_deleteSessionAccessGrant = exports.post_Session_addSessionAccessGrant = exports.get_Session_listSessions = exports.post_Session_createSessionRequest = exports.get_Session_getSessionRequestStatus = exports.get_Session_getSessionStatus = exports.delete_Session_removeSession = exports.put_Session_updateSession = exports.post_Session_addSession = exports.get_Session_getSession = exports.post_Session_createRuntimeBrowserEnvironment = exports.get_Session_getAppIntegration = exports.get_SdkClient_listSdkClients = exports.get_SdkClient_auth = exports.patch_SdkClient_updateSdkClient = exports.get_SdkClient_getSdkClient = exports.post_SdkClient_createSdkClient = exports.post_RuntimeLog_recordLog = exports.post_Run_createCdpUrl = exports.get_Organization_listAppUsers = exports.get_Organization_appUser = exports.post_Organization_createAppUser = void 0;
exports.createApiClient = createApiClient;
const zod_1 = require("zod");
exports.LinkedinCreateConversationBody = zod_1.z.object({
    profileId: zod_1.z.string(),
    appUserId: zod_1.z.string(),
    message: zod_1.z.string(),
    appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkedinSendMessageBody = zod_1.z.object({
    message: zod_1.z.string(),
    appUserId: zod_1.z.string(),
    conversationId: zod_1.z.string(),
    appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkedinSendMessageResponse = zod_1.z.object({
    success: zod_1.z.boolean(),
});
exports.ConversationType = zod_1.z.union([
    zod_1.z.literal("SINGLE"),
    zod_1.z.literal("GROUP"),
]);
exports.MutedUntil = zod_1.z.union([zod_1.z.number(), zod_1.z.string()]);
exports.ReadOnlyStatus = zod_1.z.union([
    zod_1.z.literal("0"),
    zod_1.z.literal("1"),
    zod_1.z.literal("2"),
]);
exports.FolderType = zod_1.z.union([
    zod_1.z.literal("INBOX"),
    zod_1.z.literal("INBOX_LINKEDIN_CLASSIC"),
    zod_1.z.literal("INBOX_LINKEDIN_RECRUITER"),
    zod_1.z.literal("INBOX_LINKEDIN_SALES_NAVIGATOR"),
    zod_1.z.literal("INBOX_LINKEDIN_ORGANIZATION"),
]);
exports.ContentType = zod_1.z.union([
    zod_1.z.literal("inmail"),
    zod_1.z.literal("sponsored"),
    zod_1.z.literal("linkedin_offer"),
]);
exports.ChatProfile = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    profileUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    isSelf: zod_1.z.boolean(),
});
exports.LinkedinConversationListItem = zod_1.z.object({
    id: zod_1.z.string(),
    type: exports.ConversationType,
    profileId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    timestamp: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    unreadCount: zod_1.z.number(),
    archived: zod_1.z.boolean(),
    mutedUntil: zod_1.z.union([exports.MutedUntil, zod_1.z.undefined()]).optional(),
    readOnly: exports.ReadOnlyStatus,
    subject: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    folder: zod_1.z.union([zod_1.z.array(exports.FolderType), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    organizationId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    mailboxId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    contentType: zod_1.z.union([exports.ContentType, zod_1.z.undefined()]).optional(),
    profiles: zod_1.z.array(exports.ChatProfile),
    seen: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    seenBy: zod_1.z.union([zod_1.z.unknown(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkedinListConversationsResponse = zod_1.z.object({
    conversations: zod_1.z.array(exports.LinkedinConversationListItem),
    count: zod_1.z.number(),
});
exports.LinkedinConnection = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    headline: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    profilePictureUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    publicIdentifier: zod_1.z.string(),
    publicProfileUrl: zod_1.z.string(),
    createdAt: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkedinListConnectionsResponse = zod_1.z.object({
    connections: zod_1.z.array(exports.LinkedinConnection),
    cursor: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    pageCount: zod_1.z.number(),
    totalCount: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.Message = zod_1.z.object({
    id: zod_1.z.string(),
    text: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    edited: zod_1.z.boolean(),
    deleted: zod_1.z.boolean(),
    delivered: zod_1.z.boolean(),
    timestamp: zod_1.z.string(),
    senderProfileId: zod_1.z.string(),
    senderProfileName: zod_1.z.string(),
});
exports.LinkedinConversation = zod_1.z.object({
    messages: zod_1.z.array(exports.Message),
    id: zod_1.z.string(),
    type: exports.ConversationType,
    profileId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    timestamp: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    unreadCount: zod_1.z.number(),
    archived: zod_1.z.boolean(),
    mutedUntil: zod_1.z.union([exports.MutedUntil, zod_1.z.undefined()]).optional(),
    readOnly: exports.ReadOnlyStatus,
    subject: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    folder: zod_1.z.union([zod_1.z.array(exports.FolderType), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    organizationId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    mailboxId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    contentType: zod_1.z.union([exports.ContentType, zod_1.z.undefined()]).optional(),
    profiles: zod_1.z.array(exports.ChatProfile),
    seen: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    seenBy: zod_1.z.union([zod_1.z.unknown(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkedinGetConversationResponse = zod_1.z.object({
    conversation: exports.LinkedinConversation,
});
exports.LinkedinListMessagesResponse = zod_1.z.object({
    conversation: exports.LinkedinConversation,
});
exports.LinkedinCreateConversationResponse = zod_1.z.object({
    success: zod_1.z.boolean(),
    conversationId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkedinProfile = zod_1.z.object({
    id: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    headline: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    profilePictureUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    publicIdentifier: zod_1.z.string(),
    publicProfileUrl: zod_1.z.string(),
});
exports.NetworkDistance = zod_1.z.union([
    zod_1.z.literal("DISTANCE_1"),
    zod_1.z.literal("DISTANCE_2"),
    zod_1.z.literal("DISTANCE_3"),
    zod_1.z.literal("OUT_OF_NETWORK"),
]);
exports.ProfileSearchResult = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    headline: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    profilePictureUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    publicIdentifier: zod_1.z.string(),
    publicProfileUrl: zod_1.z.string(),
    profileUrl: zod_1.z.string(),
    networkDistance: exports.NetworkDistance,
    location: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.NetworkDistanceNumber = zod_1.z.union([
    zod_1.z.literal("1"),
    zod_1.z.literal("2"),
    zod_1.z.literal("3"),
    zod_1.z.literal("4"),
]);
exports.LinkedinSearchProfilesResponse = zod_1.z.object({
    cursor: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    pageCount: zod_1.z.number(),
    profiles: zod_1.z.array(exports.ProfileSearchResult),
    totalCount: zod_1.z.number(),
});
exports.Education = zod_1.z.object({
    degree: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    school: zod_1.z.string(),
    fieldOfStudy: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    start: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    end: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.Language = zod_1.z.object({
    name: zod_1.z.string(),
    proficiency: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.Skill = zod_1.z.object({
    name: zod_1.z.string(),
    endorsementCount: zod_1.z.number(),
});
exports.Certification = zod_1.z.object({
    name: zod_1.z.string(),
    organization: zod_1.z.string(),
    url: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.Social = zod_1.z.object({
    type: zod_1.z.string(),
    name: zod_1.z.string(),
});
exports.ContactInfo = zod_1.z.object({
    emails: zod_1.z.union([zod_1.z.array(zod_1.z.string()), zod_1.z.null()]).optional(),
    phones: zod_1.z.union([zod_1.z.array(zod_1.z.string()), zod_1.z.null()]).optional(),
    addresses: zod_1.z.union([zod_1.z.array(zod_1.z.string()), zod_1.z.null()]).optional(),
    socials: zod_1.z.union([zod_1.z.array(exports.Social), zod_1.z.null()]).optional(),
});
exports.Birthdate = zod_1.z.object({
    month: zod_1.z.number(),
    day: zod_1.z.number(),
});
exports.PrimaryLocale = zod_1.z.object({
    country: zod_1.z.string(),
    language: zod_1.z.string(),
});
exports.WorkExperience = zod_1.z.object({
    position: zod_1.z.string(),
    companyId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    company: zod_1.z.string(),
    location: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    current: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    start: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    end: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.VolunteeringExperience = zod_1.z.object({
    company: zod_1.z.string(),
    description: zod_1.z.string(),
    role: zod_1.z.string(),
    cause: zod_1.z.string(),
    start: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    end: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkedinGetProfileResponse = zod_1.z.object({
    id: zod_1.z.string(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    headline: zod_1.z.string(),
    profilePictureUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    publicIdentifier: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    publicProfileUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    location: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    summary: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    education: zod_1.z.union([zod_1.z.array(exports.Education), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    languages: zod_1.z.union([zod_1.z.array(exports.Language), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    skills: zod_1.z.union([zod_1.z.array(exports.Skill), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    certifications: zod_1.z
        .union([zod_1.z.array(exports.Certification), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
    networkDistance: zod_1.z.union([exports.NetworkDistance, zod_1.z.undefined()]).optional(),
    contactInfo: zod_1.z.union([exports.ContactInfo, zod_1.z.undefined()]).optional(),
    websites: zod_1.z.array(zod_1.z.string()),
    birthdate: zod_1.z.union([exports.Birthdate, zod_1.z.undefined()]).optional(),
    primaryLocale: zod_1.z.union([exports.PrimaryLocale, zod_1.z.undefined()]).optional(),
    backgroundPictureUrl: zod_1.z
        .union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
    hashtags: zod_1.z.union([zod_1.z.array(zod_1.z.string()), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    workExperience: zod_1.z
        .union([zod_1.z.array(exports.WorkExperience), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
    volunteeringExperience: zod_1.z
        .union([zod_1.z.array(exports.VolunteeringExperience), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
    followerCount: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    connectionsCount: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    sharedConnectionsCount: zod_1.z
        .union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
});
exports.LinkedinSendConnectionRequestBody = zod_1.z.object({
    profileId: zod_1.z.string(),
    appUserId: zod_1.z.string(),
    message: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkedinSendConnectionRequestResponse = zod_1.z.object({
    success: zod_1.z.boolean(),
});
exports.LinkedinSearchProfilesBody = zod_1.z.object({
    cursor: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    profileName: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    connectionsOf: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    appUserId: zod_1.z.string(),
    networkDistance: zod_1.z
        .union([zod_1.z.array(exports.NetworkDistanceNumber), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
    appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.LinkStartEvent = zod_1.z.object({
    app: zod_1.z.string(),
    type: zod_1.z.string(),
});
exports.LinkCloseEvent = zod_1.z.object({
    type: zod_1.z.string(),
});
exports.LinkSuccessEvent = zod_1.z.object({
    type: zod_1.z.string(),
});
exports.LinkFailedErrorType = zod_1.z.union([
    zod_1.z.literal("SaveSessionError"),
    zod_1.z.literal("HangingLoginPage"),
    zod_1.z.literal("CompletionIndicatorTimeout"),
]);
exports.LinkFailedEvent = zod_1.z.object({
    type: zod_1.z.string(),
    errorType: exports.LinkFailedErrorType,
    error: zod_1.z.string(),
});
exports.LinkInitialChromeExtensionStatusEvent = zod_1.z.object({
    type: zod_1.z.string(),
    chromeExtensionId: zod_1.z.string(),
    isInitiallyInstalled: zod_1.z.boolean(),
});
exports.LinkOpenChromeExtensionPageEvent = zod_1.z.object({
    type: zod_1.z.string(),
    chromeExtensionId: zod_1.z.string(),
});
exports.LinkInstalledChromeExtensionEvent = zod_1.z.object({
    type: zod_1.z.string(),
    chromeExtensionId: zod_1.z.string(),
});
exports.LinkOpenAppAuthPageEvent = zod_1.z.object({
    type: zod_1.z.string(),
    app: zod_1.z.string(),
    authUrl: zod_1.z.string(),
});
exports.LinkEventPayload = zod_1.z.union([
    exports.LinkStartEvent,
    exports.LinkCloseEvent,
    exports.LinkSuccessEvent,
    exports.LinkFailedEvent,
    exports.LinkInitialChromeExtensionStatusEvent,
    exports.LinkOpenChromeExtensionPageEvent,
    exports.LinkInstalledChromeExtensionEvent,
    exports.LinkOpenAppAuthPageEvent,
]);
exports.RuntimeStartEvent = zod_1.z.object({
    type: zod_1.z.string(),
    sdkVersion: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    apps: zod_1.z.array(zod_1.z.string()),
});
exports.RuntimeInjectSessionEvent = zod_1.z.object({
    type: zod_1.z.string(),
    anonUserId: zod_1.z.string(),
    apps: zod_1.z.array(zod_1.z.string()),
});
exports.RuntimeErrorType = zod_1.z.union([
    zod_1.z.literal("injectSessionError"),
    zod_1.z.literal("proxyConnectionError"),
]);
exports.RuntimeSetupFailureEvent = zod_1.z.object({
    type: zod_1.z.string(),
    error: zod_1.z.string(),
    errorType: exports.RuntimeErrorType,
});
exports.RuntimeExecutionStartEvent = zod_1.z.object({
    type: zod_1.z.string(),
});
exports.RuntimeExecutionSuccessEvent = zod_1.z.object({
    type: zod_1.z.string(),
});
exports.RuntimeExecutionErrorEvent = zod_1.z.object({
    type: zod_1.z.string(),
    error: zod_1.z.string(),
    errorStack: zod_1.z.string(),
});
exports.RuntimeCreateBrowserEnvironmentErrorEvent = zod_1.z.object({
    type: zod_1.z.string(),
    error: zod_1.z.string(),
    errorStack: zod_1.z.string(),
});
exports.RuntimeRemoteConnectionErrorEvent = zod_1.z.object({
    type: zod_1.z.string(),
    error: zod_1.z.string(),
    errorStack: zod_1.z.string(),
});
exports.RuntimeCreateBrowserSessionEvent = zod_1.z.object({
    type: zod_1.z.string(),
    service: zod_1.z.string(),
    sessionId: zod_1.z.string(),
    cdpUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    liveStreamingUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.RuntimeAddedAnonProxyEvent = zod_1.z.object({
    type: zod_1.z.string(),
});
exports.RuntimePageVisitEvent = zod_1.z.object({
    type: zod_1.z.string(),
    url: zod_1.z.string(),
    base64ImageUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    isOnAuthenticatedPage: zod_1.z.boolean(),
    isLoggedIn: zod_1.z.boolean(),
});
exports.RuntimeEventPayload = zod_1.z.union([
    exports.RuntimeStartEvent,
    exports.RuntimeInjectSessionEvent,
    exports.RuntimeSetupFailureEvent,
    exports.RuntimeExecutionStartEvent,
    exports.RuntimeExecutionSuccessEvent,
    exports.RuntimeExecutionErrorEvent,
    exports.RuntimeCreateBrowserEnvironmentErrorEvent,
    exports.RuntimeRemoteConnectionErrorEvent,
    exports.RuntimeCreateBrowserSessionEvent,
    exports.RuntimeAddedAnonProxyEvent,
    exports.RuntimePageVisitEvent,
]);
exports.BrowserType = zod_1.z.union([
    zod_1.z.literal("local"),
    zod_1.z.literal("managed"),
    zod_1.z.literal("remote"),
]);
exports.ActivityType = zod_1.z.union([zod_1.z.literal("Link"), zod_1.z.literal("runtime")]);
exports.CreateLinkEvent = zod_1.z.object({
    activityType: zod_1.z.string(),
    datetime: zod_1.z.number(),
    groupId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    data: exports.LinkEventPayload,
    userId: zod_1.z.string(),
});
exports.LinkEvent = zod_1.z.object({
    activityType: zod_1.z.string(),
    id: zod_1.z.string(),
    groupId: zod_1.z.string(),
    datetime: zod_1.z.number(),
    organizationId: zod_1.z.string(),
    organizationName: zod_1.z.string(),
    sdkClientId: zod_1.z.string(),
    sdkClientName: zod_1.z.string(),
    anonAppUserId: zod_1.z.string(),
    data: exports.LinkEventPayload,
    anonUserId: zod_1.z.string(),
    userId: zod_1.z.string(),
});
exports.CreateRuntimeEvent = zod_1.z.object({
    activityType: zod_1.z.string(),
    browserType: exports.BrowserType,
    datetime: zod_1.z.number(),
    groupId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    data: exports.RuntimeEventPayload,
    userId: zod_1.z.string(),
});
exports.RuntimeEvent = zod_1.z.object({
    activityType: zod_1.z.string(),
    browserType: exports.BrowserType,
    id: zod_1.z.string(),
    groupId: zod_1.z.string(),
    datetime: zod_1.z.number(),
    organizationId: zod_1.z.string(),
    organizationName: zod_1.z.string(),
    sdkClientId: zod_1.z.string(),
    sdkClientName: zod_1.z.string(),
    anonAppUserId: zod_1.z.string(),
    data: exports.RuntimeEventPayload,
    anonUserId: zod_1.z.string(),
    userId: zod_1.z.string(),
});
exports.Event = zod_1.z.union([exports.LinkEvent, exports.RuntimeEvent]);
exports.CreateEventRequestBody = zod_1.z.union([
    exports.CreateLinkEvent,
    exports.CreateRuntimeEvent,
]);
exports.ActivityEventList = zod_1.z.object({
    events: zod_1.z.array(exports.Event),
});
exports.CreateEventResponseSuccess = zod_1.z.object({
    type: zod_1.z.string(),
    groupId: zod_1.z.string(),
    id: zod_1.z.string(),
    activityType: exports.ActivityType,
});
exports.CreateEventResponseFailure = zod_1.z.object({
    type: zod_1.z.string(),
    error: zod_1.z.string(),
});
exports.CreateEventResponse = zod_1.z.union([
    exports.CreateEventResponseSuccess,
    exports.CreateEventResponseFailure,
]);
exports.ListAppIntegrationsResponseItem = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    iconUrl: zod_1.z.string(),
    experimental: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    domains: zod_1.z.array(zod_1.z.string()),
});
exports.ListAppIntegrationsResponse = zod_1.z.object({
    apps: zod_1.z.array(exports.ListAppIntegrationsResponseItem),
});
exports.UserPoolId = zod_1.z.string();
exports.CreateAppUserIdTokenWithUserPool = zod_1.z.object({
    userPoolId: exports.UserPoolId,
    appUserId: zod_1.z.string(),
    exp: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.SdkClientId = zod_1.z.string();
exports.CreateAppUserIdTokenWithSdkClient = zod_1.z.object({
    sdkClientId: exports.SdkClientId,
    appUserId: zod_1.z.string(),
    exp: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.CreateAppUserIdTokenWithDefault = zod_1.z.object({
    appUserId: zod_1.z.string(),
    exp: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.CreateAppUserIdToken = zod_1.z.union([
    exports.CreateAppUserIdTokenWithDefault,
    exports.CreateAppUserIdTokenWithSdkClient,
    exports.CreateAppUserIdTokenWithUserPool,
]);
exports.AppUserIdToken = zod_1.z.object({
    appUserIdToken: zod_1.z.string(),
});
exports.MissingFieldErrorType = zod_1.z.object({
    field: zod_1.z.string(),
});
exports.CreateLinkUrlResponse = zod_1.z.object({
    url: zod_1.z.string(),
});
exports.LinkApp = zod_1.z.union([zod_1.z.literal("rippling"), zod_1.z.literal("gusto")]);
exports.BrowserProvider = zod_1.z.union([
    zod_1.z.literal("browserbase"),
    zod_1.z.literal("rebrowser"),
    zod_1.z.literal("undetect"),
]);
exports.InitiateLinkRequest = zod_1.z.object({
    app: exports.LinkApp,
    appUserId: zod_1.z.string(),
    provider: zod_1.z.union([exports.BrowserProvider, zod_1.z.undefined()]).optional(),
});
exports.LinkResponseSuccess = zod_1.z.object({});
exports.LinkResponseFailure = zod_1.z.object({});
exports.EmailSchema = zod_1.z.object({
    description: zod_1.z.string(),
});
exports.PasswordSchema = zod_1.z.object({
    description: zod_1.z.string(),
    sensitive: zod_1.z.boolean(),
});
exports.MfaSchema = zod_1.z.object({
    description: zod_1.z.string(),
});
exports.LinkResponseSchema = zod_1.z.union([
    zod_1.z.intersection(zod_1.z.object({
        label: zod_1.z.literal("email").optional(),
    }), exports.EmailSchema),
    zod_1.z.intersection(zod_1.z.object({
        label: zod_1.z.literal("password").optional(),
    }), exports.PasswordSchema),
    zod_1.z.intersection(zod_1.z.object({
        label: zod_1.z.literal("mfa").optional(),
    }), exports.MfaSchema),
]);
exports.HttpMethod = zod_1.z.union([
    zod_1.z.literal("GET"),
    zod_1.z.literal("POST"),
    zod_1.z.literal("PUT"),
    zod_1.z.literal("DELETE"),
    zod_1.z.literal("PATCH"),
]);
exports.LinkResponseInProgress = zod_1.z.object({
    schema: zod_1.z.array(exports.LinkResponseSchema),
    url: zod_1.z.string(),
    method: exports.HttpMethod,
    linkId: zod_1.z.string(),
});
exports.LinkResponse = zod_1.z.union([
    zod_1.z.intersection(zod_1.z.object({
        status: zod_1.z.literal("SUCCESS").optional(),
    }), exports.LinkResponseSuccess),
    zod_1.z.intersection(zod_1.z.object({
        status: zod_1.z.literal("FAILURE").optional(),
    }), exports.LinkResponseFailure),
    zod_1.z.intersection(zod_1.z.object({
        status: zod_1.z.literal("IN_PROGRESS").optional(),
    }), exports.LinkResponseInProgress),
]);
exports.ContinueLinkRequestEmailPassword = zod_1.z.object({
    email: zod_1.z.string(),
    password: zod_1.z.string(),
});
exports.ContinueLinkRequestMfa = zod_1.z.object({
    mfa: zod_1.z.string(),
});
exports.ContinueLinkRequest = zod_1.z.union([
    exports.ContinueLinkRequestEmailPassword,
    exports.ContinueLinkRequestMfa,
]);
exports.MemberRole = zod_1.z.union([zod_1.z.string(), zod_1.z.string(), zod_1.z.string()]);
exports.CreateMember = zod_1.z.object({
    name: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string(),
    role: exports.MemberRole,
});
exports.MemberId = zod_1.z.string();
exports.OrganizationId = zod_1.z.string();
exports.Member = zod_1.z.object({
    id: exports.MemberId,
    name: zod_1.z.string(),
    email: zod_1.z.string(),
    organizationId: exports.OrganizationId,
    role: exports.MemberRole,
});
exports.LoginMember = zod_1.z.object({
    email: zod_1.z.string(),
    password: zod_1.z.string(),
});
exports.LoginSession = zod_1.z.object({
    token: zod_1.z.string(),
});
exports.MemberListItem = zod_1.z.object({
    id: exports.MemberId,
    name: zod_1.z.string(),
    email: zod_1.z.string(),
    role: exports.MemberRole,
    createdAt: zod_1.z.string(),
});
exports.MemberList = zod_1.z.object({
    resource: zod_1.z.string(),
    items: zod_1.z.array(exports.MemberListItem),
});
exports.CreateOrganizationMember = zod_1.z.object({
    name: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string(),
});
exports.CreateOrganization = zod_1.z.object({
    name: zod_1.z.string(),
    member: exports.CreateOrganizationMember,
});
exports.Organization = zod_1.z.object({
    id: exports.OrganizationId,
    name: zod_1.z.string(),
    logoUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    members: zod_1.z.array(exports.Member),
    apiKey: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    sdkAccessToken: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.AppUserListItem = zod_1.z.object({
    id: zod_1.z.string(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    phoneNumber: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    appUserPoolId: zod_1.z.string(),
    createdAt: zod_1.z.string(),
});
exports.AppUserList = zod_1.z.object({
    appUsers: zod_1.z.array(exports.AppUserListItem),
});
exports.AppUser = zod_1.z.object({
    id: zod_1.z.string(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    phoneNumber: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    externalUserId: zod_1.z.string(),
    createdAt: zod_1.z.string(),
});
exports.UpdateOrganization = zod_1.z.object({
    name: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
    logoUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
});
exports.DeleteOrganizationResponse = zod_1.z.boolean();
exports.CreateAppUserResponse = zod_1.z.object({
    success: zod_1.z.boolean(),
});
exports.Integration = zod_1.z.union([
    zod_1.z.literal("amazon"),
    zod_1.z.literal("delta"),
    zod_1.z.literal("doordash"),
    zod_1.z.literal("facebook"),
    zod_1.z.literal("github"),
    zod_1.z.literal("instacart"),
    zod_1.z.literal("instagram"),
    zod_1.z.literal("linkedin"),
    zod_1.z.literal("opentable"),
    zod_1.z.literal("twitter"),
    zod_1.z.literal("resy"),
    zod_1.z.literal("uber"),
    zod_1.z.literal("united_airlines"),
    zod_1.z.literal("nextdoor"),
    zod_1.z.literal("example"),
]);
exports.App = zod_1.z.union([zod_1.z.string(), exports.Integration]);
exports.Apps = zod_1.z.union([zod_1.z.array(exports.App), zod_1.z.string()]);
exports.CreateCdpUrlResponse = zod_1.z.object({
    cdpUrl: zod_1.z.string(),
    liveStreamingUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.ProxyConfig = zod_1.z.object({
    server: zod_1.z.string(),
    username: zod_1.z.string(),
    password: zod_1.z.string(),
});
exports.ProxyType = zod_1.z.union([zod_1.z.boolean(), exports.ProxyConfig]);
exports.CreateCdpUrlRequest = zod_1.z.object({
    apps: exports.Apps,
    appUserId: zod_1.z.string(),
    activityGroupId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    proxy: zod_1.z.union([exports.ProxyType, zod_1.z.undefined()]).optional(),
    cdpUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    sessionDuration: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    keepAlive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    provider: zod_1.z.union([exports.BrowserProvider, zod_1.z.undefined()]).optional(),
});
exports.AnonEnvironment = zod_1.z.union([
    zod_1.z.literal("local"),
    zod_1.z.literal("development"),
    zod_1.z.literal("staging"),
    zod_1.z.literal("sandbox"),
    zod_1.z.literal("prod"),
]);
exports.LocalBrowserConfigProxy = zod_1.z.object({
    isAnonProxyEnabled: zod_1.z.boolean(),
});
exports.LocalBrowserConfig = zod_1.z.object({
    browserType: zod_1.z.string(),
    isHeadless: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    proxy: zod_1.z.union([exports.LocalBrowserConfigProxy, zod_1.z.undefined()]).optional(),
});
exports.BrowserbaseSession = zod_1.z.object({
    sessionId: zod_1.z.string(),
    sessionUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.ManagedBrowserConfigProxy = zod_1.z.object({
    isAnonProxyEnabled: zod_1.z.boolean(),
});
exports.ManagedBrowserConfig = zod_1.z.object({
    browserType: zod_1.z.string(),
    proxy: zod_1.z.union([exports.ManagedBrowserConfigProxy, zod_1.z.undefined()]).optional(),
    browserbase: zod_1.z.union([exports.BrowserbaseSession, zod_1.z.undefined()]).optional(),
});
exports.RemoteBrowserConfig = zod_1.z.object({
    browserType: zod_1.z.string(),
});
exports.InferredRuntimeBrowserConfigProxy = zod_1.z.object({
    ip: zod_1.z.string(),
    username: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.InferredRuntimeBrowserConfig = zod_1.z.object({
    browserType: zod_1.z.string(),
    proxy: zod_1.z.union([exports.InferredRuntimeBrowserConfigProxy, zod_1.z.undefined()]).optional(),
    connectionUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.RuntimeResultType = zod_1.z.union([
    zod_1.z.literal("success"),
    zod_1.z.literal("error"),
]);
exports.BaseRuntimeResult = zod_1.z.object({
    type: exports.RuntimeResultType,
    startSdkTime: zod_1.z.number(),
});
exports.SuccessRuntimeResult = zod_1.z.object({
    type: zod_1.z.string(),
    startSdkTime: zod_1.z.number(),
    startRuntimeExecutionTime: zod_1.z.number(),
    endRuntimeExecutionTime: zod_1.z.number(),
});
exports.FailedToInject = zod_1.z.object({
    type: zod_1.z.string(),
    startSdkTime: zod_1.z.number(),
    classification: zod_1.z.string(),
    error: zod_1.z.string(),
});
exports.RuntimePlaywrightError = zod_1.z.object({
    type: zod_1.z.string(),
    startSdkTime: zod_1.z.number(),
    classification: zod_1.z.string(),
    error: zod_1.z.string(),
    startRuntimeExecutionTime: zod_1.z.number(),
    endRuntimeExecutionTime: zod_1.z.number(),
});
exports.OtherError = zod_1.z.object({
    type: zod_1.z.string(),
    startSdkTime: zod_1.z.number(),
    classification: zod_1.z.string(),
    error: zod_1.z.string(),
    startRuntimeExecutionTime: zod_1.z
        .union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
    endRuntimeExecutionTime: zod_1.z
        .union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
});
exports.RuntimeResult = zod_1.z.union([
    exports.SuccessRuntimeResult,
    exports.FailedToInject,
    exports.RuntimePlaywrightError,
    exports.OtherError,
]);
exports.UserMetadata = zod_1.z.object({
    anonSessionId: zod_1.z.string(),
    anonUserId: zod_1.z.string(),
    externalUserId: zod_1.z.string(),
    orgId: zod_1.z.string(),
    orgName: zod_1.z.string(),
    sdkClientId: zod_1.z.string(),
    sdkClientName: zod_1.z.string(),
    sessionCollectionTime: zod_1.z
        .union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
});
exports.BrowserConfig = zod_1.z.union([
    exports.ManagedBrowserConfig,
    exports.LocalBrowserConfig,
    exports.RemoteBrowserConfig,
]);
exports.CreateUserMetadata = zod_1.z.object({
    anonSessionId: zod_1.z.string(),
    externalUserId: zod_1.z.string(),
});
exports.RuntimeLog = zod_1.z.object({
    environment: exports.AnonEnvironment,
    userMetadata: exports.UserMetadata,
    browserConfig: exports.BrowserConfig,
    app: zod_1.z.string(),
    runtimeResult: exports.RuntimeResult,
});
exports.BrowserConfigCreateRequest = zod_1.z.union([
    exports.ManagedBrowserConfig,
    exports.LocalBrowserConfig,
    exports.RemoteBrowserConfig,
    exports.InferredRuntimeBrowserConfig,
]);
exports.RuntimeLogCreateRequest = zod_1.z.object({
    environment: exports.AnonEnvironment,
    userMetadata: exports.CreateUserMetadata,
    browserConfig: exports.BrowserConfigCreateRequest,
    app: zod_1.z.string(),
    runtimeResult: exports.RuntimeResult,
});
exports.RecordLogResponse = zod_1.z.object({
    message: zod_1.z.string(),
    recordedAt: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.SdkClientOauthConfig = zod_1.z.object({
    logoUrl: zod_1.z.string(),
    chromeExtensionId: zod_1.z.string(),
    redirectUrls: zod_1.z.array(zod_1.z.string()),
});
exports.SdkClientKindApplicationApplication = zod_1.z.object({
    userPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
    oauthConfig: exports.SdkClientOauthConfig.optional(),
});
exports.SdkClientKindApplication = zod_1.z.object({
    application: exports.SdkClientKindApplicationApplication,
});
exports.SdkClientKind = zod_1.z.union([zod_1.z.string(), exports.SdkClientKindApplication]);
exports.SdkAuthUserPool = zod_1.z.object({
    type: zod_1.z.string(),
    userPoolId: zod_1.z.string(),
    oauthConfig: zod_1.z.union([exports.SdkClientOauthConfig, zod_1.z.undefined()]).optional(),
});
exports.SdkAuthApiKey = zod_1.z.object({
    type: zod_1.z.string(),
});
exports.SdkAuthNewApiKey = zod_1.z.object({
    type: zod_1.z.string(),
    secret: zod_1.z.string(),
});
exports.SdkAuth = zod_1.z.union([exports.SdkAuthUserPool, exports.SdkAuthApiKey]);
exports.CreatedSdkAuth = zod_1.z.union([exports.SdkAuthUserPool, exports.SdkAuthNewApiKey]);
exports.SdkClient = zod_1.z.object({
    id: exports.SdkClientId,
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    auth: exports.SdkAuth,
    organizationId: exports.OrganizationId,
});
exports.CreatedSdkClient = zod_1.z.object({
    id: exports.SdkClientId,
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    auth: exports.CreatedSdkAuth,
    organizationId: exports.OrganizationId,
});
exports.SdkClientAuthorization = zod_1.z.object({
    jwksUri: zod_1.z.string(),
    idClaim: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.CreateSdkClient = zod_1.z.object({
    name: zod_1.z.string(),
    kind: zod_1.z.union([exports.SdkClientKind, zod_1.z.undefined()]).optional(),
    description: zod_1.z.string(),
    oauthDisabled: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    authorization: zod_1.z.union([exports.SdkClientAuthorization, zod_1.z.undefined()]).optional(),
    organizationId: zod_1.z.union([exports.OrganizationId, zod_1.z.undefined()]).optional(),
});
exports.SdkClientListItem = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    createdAt: zod_1.z.string(),
    logoUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    chromeExtensionId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    redirectUrls: zod_1.z
        .union([zod_1.z.array(zod_1.z.string()), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
});
exports.SdkClientList = zod_1.z.object({
    resource: zod_1.z.string(),
    items: zod_1.z.array(exports.SdkClientListItem),
});
exports.UpdateOauthConfig = zod_1.z.object({
    logoUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
    chromeExtensionId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
    redirectUrls: zod_1.z.union([zod_1.z.array(zod_1.z.string()), zod_1.z.null()]).optional(),
});
exports.UpdateSdkClient = zod_1.z.object({
    name: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
    oauthConfig: exports.UpdateOauthConfig.optional(),
});
exports.AuthenticatorResponse = zod_1.z.object({
    authenticatorId: zod_1.z.string(),
});
exports.GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage = zod_1.z.union([zod_1.z.literal("local"), zod_1.z.literal("session"), zod_1.z.literal("cookie")]);
exports.GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem = zod_1.z.object({
    storage: exports.GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItemStorage,
    key: zod_1.z.string(),
    domains: zod_1.z.union([zod_1.z.array(zod_1.z.string()), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem = zod_1.z.object({
    domain: zod_1.z.string(),
});
exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem = zod_1.z.object({
    selector: zod_1.z.string(),
    exists: zod_1.z.boolean(),
});
exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule = zod_1.z.union([zod_1.z.literal("ALL"), zod_1.z.literal("ANY")]);
exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem = zod_1.z.object({
    url: zod_1.z.string(),
    criteria: zod_1.z.array(exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemCriteriaItem),
    matchRule: exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItemMatchRule,
});
exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidation = zod_1.z.object({
    sessionValidityChecks: zod_1.z.array(exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidationSessionValidityChecksItem),
});
exports.GetAccountApiV1AppIntegrationResponseAppApp = zod_1.z.object({
    authUrl: zod_1.z.string(),
    displayName: zod_1.z.string(),
    iconUrl: zod_1.z.string(),
    domCompletionIndicator: zod_1.z
        .union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
    completionIndicators: zod_1.z.array(exports.GetAccountApiV1AppIntegrationResponseAppAppCompletionIndicatorsItem),
    sessionExtractionDomains: zod_1.z.array(exports.GetAccountApiV1AppIntegrationResponseAppAppSessionExtractionDomainsItem),
    sessionValidation: exports.GetAccountApiV1AppIntegrationResponseAppAppSessionValidation,
});
exports.GetAccountApiV1AppIntegrationResponseApp = zod_1.z.object({
    app: exports.GetAccountApiV1AppIntegrationResponseAppApp,
});
exports.GetAccountApiV1AppIntegrationResponseMessage = zod_1.z.object({
    message: zod_1.z.string(),
});
exports.GetAccountApiV1AppIntegrationResponse = zod_1.z.union([
    exports.GetAccountApiV1AppIntegrationResponseApp,
    exports.GetAccountApiV1AppIntegrationResponseMessage,
]);
exports.PostAccountApiV1BrowserEnvironmentRequestProxy = zod_1.z.object({
    server: zod_1.z.string(),
    bypass: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    username: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.PostAccountApiV1BrowserEnvironmentRequest = zod_1.z.object({
    proxy: exports.PostAccountApiV1BrowserEnvironmentRequestProxy.optional(),
    isLiveStreamingSession: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null()]).optional(),
});
exports.PostAccountApiV1BrowserEnvironmentResponseMessage = zod_1.z.object({
    message: zod_1.z.string(),
});
exports.PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment = zod_1.z.object({
    connectUrl: zod_1.z.string(),
    liveStreamingSession: zod_1.z
        .union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()])
        .optional(),
});
exports.PostAccountApiV1BrowserEnvironmentResponseEnvironment = zod_1.z.object({
    id: zod_1.z.string(),
    ownerId: zod_1.z.string(),
    environment: exports.PostAccountApiV1BrowserEnvironmentResponseEnvironmentEnvironment,
});
exports.PostAccountApiV1BrowserEnvironmentResponse = zod_1.z.union([
    exports.PostAccountApiV1BrowserEnvironmentResponseMessage,
    exports.PostAccountApiV1BrowserEnvironmentResponseEnvironment,
]);
exports.GetAccountApiV1SessionResponseMessage = zod_1.z.object({
    message: zod_1.z.string(),
});
exports.GetAccountApiV1SessionResponseAppUserIdSessionStatus = zod_1.z.union([
    zod_1.z.literal("active"),
    zod_1.z.literal("revoked"),
    zod_1.z.literal("unknown"),
]);
exports.GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite = zod_1.z.union([zod_1.z.literal("Lax"), zod_1.z.literal("Strict"), zod_1.z.literal("None")]);
exports.GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem = zod_1.z.object({
    name: zod_1.z.string(),
    value: zod_1.z.string(),
    domain: zod_1.z.string(),
    path: zod_1.z.string(),
    expires: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    secure: zod_1.z.boolean(),
    httpOnly: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    sameSite: zod_1.z
        .union([
        exports.GetAccountApiV1SessionResponseAppUserIdSessionCookiesItemSameSite,
        zod_1.z.undefined(),
    ])
        .optional(),
});
exports.GetAccountApiV1SessionResponseAppUserIdSession = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    status: zod_1.z
        .union([
        exports.GetAccountApiV1SessionResponseAppUserIdSessionStatus,
        zod_1.z.undefined(),
    ])
        .optional(),
    cookies: zod_1.z.array(exports.GetAccountApiV1SessionResponseAppUserIdSessionCookiesItem),
    localStorage: zod_1.z.array(zod_1.z.array(zod_1.z.unknown())),
    sessionStorage: zod_1.z.array(zod_1.z.array(zod_1.z.unknown())),
    proxyId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    url: zod_1.z.string(),
    metadata: zod_1.z.union([zod_1.z.unknown(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.GetAccountApiV1SessionResponseAppUserId = zod_1.z.object({
    ownerId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    appUserId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    domain: zod_1.z.string(),
    session: exports.GetAccountApiV1SessionResponseAppUserIdSession,
});
exports.GetAccountApiV1SessionResponse = zod_1.z.union([
    exports.GetAccountApiV1SessionResponseMessage,
    exports.GetAccountApiV1SessionResponseAppUserId,
]);
exports.PostAccountApiV1SessionRequestSessionStatus = zod_1.z.union([
    zod_1.z.literal("active"),
    zod_1.z.literal("revoked"),
    zod_1.z.literal("unknown"),
]);
exports.PostAccountApiV1SessionRequestSessionCookiesItemSameSite = zod_1.z.union([
    zod_1.z.literal("unspecified"),
    zod_1.z.literal("no_restriction"),
    zod_1.z.literal("Lax"),
    zod_1.z.literal("lax"),
    zod_1.z.literal("Strict"),
    zod_1.z.literal("strict"),
    zod_1.z.literal("None"),
    zod_1.z.literal("none"),
]);
exports.PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy = zod_1.z.union([
    zod_1.z.literal("unspecified"),
    zod_1.z.literal("no_restriction"),
    zod_1.z.literal("Lax"),
    zod_1.z.literal("lax"),
    zod_1.z.literal("Strict"),
    zod_1.z.literal("strict"),
    zod_1.z.literal("None"),
    zod_1.z.literal("none"),
]);
exports.PostAccountApiV1SessionRequestSessionCookiesItem = zod_1.z.object({
    name: zod_1.z.string(),
    value: zod_1.z.string(),
    domain: zod_1.z.string(),
    path: zod_1.z.string(),
    expires: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    secure: zod_1.z.boolean(),
    hostOnly: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    httpOnly: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    discard: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    session: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    partitioned: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    sameSite: zod_1.z
        .union([
        exports.PostAccountApiV1SessionRequestSessionCookiesItemSameSite,
        zod_1.z.undefined(),
    ])
        .optional(),
    sameSitePolicy: zod_1.z
        .union([
        exports.PostAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy,
        zod_1.z.undefined(),
    ])
        .optional(),
    storeId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.PostAccountApiV1SessionRequestSession = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    status: zod_1.z
        .union([exports.PostAccountApiV1SessionRequestSessionStatus, zod_1.z.undefined()])
        .optional(),
    cookies: zod_1.z.array(exports.PostAccountApiV1SessionRequestSessionCookiesItem),
    localStorage: zod_1.z.array(zod_1.z.array(zod_1.z.string())),
    sessionStorage: zod_1.z.array(zod_1.z.array(zod_1.z.string())),
    proxyId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    url: zod_1.z.string(),
});
exports.PostAccountApiV1SessionResponse = zod_1.z.object({
    message: zod_1.z.string(),
    ownerId: zod_1.z.string(),
    domain: zod_1.z.string(),
});
exports.PutAccountApiV1SessionRequestSessionStatus = zod_1.z.union([
    zod_1.z.literal("active"),
    zod_1.z.literal("revoked"),
    zod_1.z.literal("unknown"),
]);
exports.PutAccountApiV1SessionRequestSessionCookiesItemSameSite = zod_1.z.union([
    zod_1.z.literal("unspecified"),
    zod_1.z.literal("no_restriction"),
    zod_1.z.literal("Lax"),
    zod_1.z.literal("Strict"),
    zod_1.z.literal("None"),
]);
exports.PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy = zod_1.z.union([
    zod_1.z.literal("unspecified"),
    zod_1.z.literal("no_restriction"),
    zod_1.z.literal("Lax"),
    zod_1.z.literal("Strict"),
    zod_1.z.literal("None"),
]);
exports.PutAccountApiV1SessionRequestSessionCookiesItem = zod_1.z.object({
    name: zod_1.z.string(),
    value: zod_1.z.string(),
    domain: zod_1.z.string(),
    path: zod_1.z.string(),
    expires: zod_1.z.union([zod_1.z.number(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    secure: zod_1.z.boolean(),
    hostOnly: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    httpOnly: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    discard: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    session: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    partitioned: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    sameSite: zod_1.z
        .union([
        exports.PutAccountApiV1SessionRequestSessionCookiesItemSameSite,
        zod_1.z.undefined(),
    ])
        .optional(),
    sameSitePolicy: zod_1.z
        .union([
        exports.PutAccountApiV1SessionRequestSessionCookiesItemSameSitePolicy,
        zod_1.z.undefined(),
    ])
        .optional(),
    storeId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.PutAccountApiV1SessionRequestSession = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    status: zod_1.z
        .union([exports.PutAccountApiV1SessionRequestSessionStatus, zod_1.z.undefined()])
        .optional(),
    cookies: zod_1.z.array(exports.PutAccountApiV1SessionRequestSessionCookiesItem),
    localStorage: zod_1.z.array(zod_1.z.array(zod_1.z.string())),
    sessionStorage: zod_1.z.array(zod_1.z.array(zod_1.z.string())),
    proxyId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    url: zod_1.z.string(),
});
exports.PutAccountApiV1SessionResponse = zod_1.z.object({
    message: zod_1.z.string(),
    ownerId: zod_1.z.string(),
    domain: zod_1.z.string(),
});
exports.DeleteSessionResponseError = zod_1.z.object({
    message: zod_1.z.string(),
});
exports.DeleteSessionResponse = zod_1.z.object({
    appUserId: zod_1.z.string(),
    app: zod_1.z.string(),
});
exports.SessionStatus = zod_1.z.union([
    zod_1.z.literal("active"),
    zod_1.z.literal("unknown"),
    zod_1.z.literal("revoked"),
]);
exports.GetAccountApiV1SessionStatusResponse = zod_1.z.object({
    status: exports.SessionStatus,
});
exports.GetAccountApiV1SessionRequestResponseDetails = zod_1.z.object({
    requestId: zod_1.z.string(),
    appUserId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    appSdkClientId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    domain: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.GetAccountApiV1SessionRequestResponse = zod_1.z.object({
    message: zod_1.z.string(),
    succeeded: zod_1.z.union([zod_1.z.boolean(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    details: zod_1.z
        .union([exports.GetAccountApiV1SessionRequestResponseDetails, zod_1.z.undefined()])
        .optional(),
});
exports.PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization = zod_1.z.object({
    iosAppId: zod_1.z.string(),
    authToken: zod_1.z.string(),
});
exports.PostAccountApiV1SessionRequestRequestAccountAccount = zod_1.z.object({
    ownerId: zod_1.z.string(),
    domain: zod_1.z.string(),
});
exports.PostAccountApiV1SessionRequestRequestAccount = zod_1.z.object({
    iosPushAuthorization: exports.PostAccountApiV1SessionRequestRequestAccountIosPushAuthorization,
    account: exports.PostAccountApiV1SessionRequestRequestAccountAccount,
    appSdkClientId: zod_1.z.string(),
    alertBody: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
    alertTitle: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.PostAccountApiV1SessionRequestRequestApp = zod_1.z.object({
    appUserId: zod_1.z.string(),
    app: zod_1.z.string(),
});
exports.PostAccountApiV1SessionRequestRequest = zod_1.z.union([
    exports.PostAccountApiV1SessionRequestRequestAccount,
    exports.PostAccountApiV1SessionRequestRequestApp,
]);
exports.PostAccountApiV1SessionRequestResponse = zod_1.z.object({
    message: zod_1.z.string(),
    status: zod_1.z.string(),
    requestId: zod_1.z.string(),
});
exports.ListSessionsResponseItemAppUser = zod_1.z.object({
    id: zod_1.z.string(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.ListSessionsResponseItem = zod_1.z.object({
    sessionId: zod_1.z.string(),
    app: zod_1.z.string(),
    appUser: exports.ListSessionsResponseItemAppUser,
});
exports.ListSessionsResponse = zod_1.z.object({
    sessions: zod_1.z.array(exports.ListSessionsResponseItem),
});
exports.PostAccountApiV1SessionAccessGrantResponse = zod_1.z.object({
    message: zod_1.z.string(),
});
exports.DeleteAccountApiV1SessionAccessGrantResponse = zod_1.z.object({
    message: zod_1.z.string(),
});
exports.JwksBody = zod_1.z.object({
    jwksUri: zod_1.z.string(),
    idClaim: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.AuthorizationType = zod_1.z.object({
    jwksUri: zod_1.z.string(),
    idClaim: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.AuthorizationTypeInput = zod_1.z.object({
    jwksUri: zod_1.z.string(),
    idClaim: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
});
exports.CreateUserPool = zod_1.z.object({
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    authorization: zod_1.z.union([exports.JwksBody, zod_1.z.undefined()]).optional(),
});
exports.UserPool = zod_1.z.object({
    id: exports.UserPoolId,
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    authorization: exports.JwksBody,
    organizationId: exports.OrganizationId,
    hosted: zod_1.z.boolean(),
});
exports.UserPoolListItem = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    authorization: exports.JwksBody,
    hosted: zod_1.z.boolean(),
});
exports.UserPoolList = zod_1.z.object({
    resource: zod_1.z.string(),
    items: zod_1.z.array(exports.UserPoolListItem),
});
exports.UpdateUserPool = zod_1.z.object({
    name: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
    authorization: exports.JwksBody.optional(),
});
exports.get_Actions_linkedinListConversations = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/actions/linkedin/listConversations"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            profileName: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            profileId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            appUserId: zod_1.z.string(),
            contentType: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
        }),
    }),
    response: exports.LinkedinListConversationsResponse,
};
exports.get_Actions_linkedinListConnections = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/actions/linkedin/listConnections"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            cursor: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            profileName: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            appUserId: zod_1.z.string(),
            appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
        }),
    }),
    response: exports.LinkedinListConnectionsResponse,
};
exports.post_Actions_linkedinCreateConversation = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/actions/linkedin/createConversation"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.LinkedinCreateConversationBody,
    }),
    response: exports.LinkedinCreateConversationResponse,
};
exports.get_Actions_linkedinGetConversation = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/actions/linkedin/getConversation"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            id: zod_1.z.string(),
            appUserId: zod_1.z.string(),
            appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
        }),
    }),
    response: exports.LinkedinGetConversationResponse,
};
exports.get_Actions_linkedinListMessages = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/actions/linkedin/listMessages"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            id: zod_1.z.string(),
            appUserId: zod_1.z.string(),
            appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
        }),
    }),
    response: exports.LinkedinListMessagesResponse,
};
exports.post_Actions_linkedinSendMessage = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/actions/linkedin/sendMessage"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.LinkedinSendMessageBody,
    }),
    response: exports.LinkedinSendMessageResponse,
};
exports.get_Actions_linkedinGetProfile = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/actions/linkedin/getProfile"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            id: zod_1.z.string(),
            appUserId: zod_1.z.string(),
            appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
        }),
    }),
    response: exports.LinkedinGetProfileResponse,
};
exports.post_Actions_linkedinSendConnectionRequest = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/actions/linkedin/sendConnectionRequest"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.LinkedinSendConnectionRequestBody,
    }),
    response: exports.LinkedinSendConnectionRequestResponse,
};
exports.post_Actions_linkedinSearchProfiles = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/actions/linkedin/search"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.LinkedinSearchProfilesBody,
    }),
    response: exports.LinkedinSearchProfilesResponse,
};
exports.get_Activity_getActivityEvents = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/account/api/v1/activity"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            groupId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            activityType: zod_1.z
                .union([zod_1.z.literal("Link"), zod_1.z.literal("runtime")])
                .optional(),
            app: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            startTime: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            endTime: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            userId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            order: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
        }),
    }),
    response: exports.ActivityEventList,
};
exports.post_Activity_createEvent = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/activity"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.CreateEventRequestBody,
    }),
    response: exports.CreateEventResponse,
};
exports.post_Activity_createEventWithGroupId = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/activity/{groupId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            groupId: zod_1.z.string(),
        }),
        body: exports.CreateEventRequestBody,
    }),
    response: exports.CreateEventResponse,
};
exports.get_AppIntegrations_listAppIntegrations = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/account/api/v1/appIntegrations"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.never(),
    response: exports.ListAppIntegrationsResponse,
};
exports.post_AppUserIdToken_createAppUserIdToken = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/org/appUserIdToken"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.CreateAppUserIdToken,
    }),
    response: exports.AppUserIdToken,
};
exports.post_Link_initiateLink = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/link"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.InitiateLinkRequest,
    }),
    response: exports.LinkResponse,
};
exports.patch_Link_continueLink = {
    method: zod_1.z.literal("PATCH"),
    path: zod_1.z.literal("/account/api/v1/link/{linkId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            linkId: zod_1.z.string(),
        }),
        body: exports.ContinueLinkRequest,
    }),
    response: exports.LinkResponse,
};
exports.get_Link_createLinkUrl = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/link/url"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            app: zod_1.z.union([zod_1.z.string(), exports.Integration]),
            appUserId: zod_1.z.string(),
            chromeExtensionId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            companyLogoUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            companyName: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            redirectUrl: zod_1.z.string(),
            state: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            authUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            checkUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            displayName: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            iconUrl: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
        }),
    }),
    response: exports.CreateLinkUrlResponse,
};
exports.post_Member_createMember = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/org/member"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.CreateMember,
    }),
    response: exports.Member,
};
exports.get_Member_getMember = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/member/{memberId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            memberId: zod_1.z.string(),
        }),
    }),
    response: exports.Member,
};
exports.get_Member_listMembers = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/members"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.never(),
    response: exports.MemberList,
};
exports.post_Member_login = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/org/login"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.LoginMember,
    }),
    response: exports.LoginSession,
};
exports.post_Organization_createOrganization = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/org/organization"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.CreateOrganization,
    }),
    response: exports.Organization,
};
exports.get_Organization_getOrganization = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/organization/{organizationId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            organizationId: zod_1.z.string(),
        }),
        header: zod_1.z.object({
            userId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            orgId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
        }),
    }),
    response: exports.Organization,
};
exports.delete_Organization_deleteOrganization = {
    method: zod_1.z.literal("DELETE"),
    path: zod_1.z.literal("/org/organization/{organizationId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            organizationId: zod_1.z.string(),
        }),
    }),
    response: exports.DeleteOrganizationResponse,
};
exports.patch_Organization_updateOrganization = {
    method: zod_1.z.literal("PATCH"),
    path: zod_1.z.literal("/org/organization/{organizationId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            organizationId: zod_1.z.string(),
        }),
        body: exports.UpdateOrganization,
    }),
    response: zod_1.z.boolean(),
};
exports.post_Organization_createAppUser = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/org/user"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.CreateAppUserIdToken,
    }),
    response: exports.CreateAppUserResponse,
};
exports.get_Organization_appUser = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/user"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            id: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            email: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            phoneNumber: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            externalUserId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            appUserPoolId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
        }),
    }),
    response: exports.AppUser,
};
exports.get_Organization_listAppUsers = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/users"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.never(),
    response: exports.AppUserList,
};
exports.post_Run_createCdpUrl = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/cdpUrl"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.CreateCdpUrlRequest,
    }),
    response: exports.CreateCdpUrlResponse,
};
exports.post_RuntimeLog_recordLog = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/logs"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.RuntimeLogCreateRequest,
    }),
    response: exports.RecordLogResponse,
};
exports.post_SdkClient_createSdkClient = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/org/sdkClient"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.CreateSdkClient,
    }),
    response: exports.CreatedSdkClient,
};
exports.get_SdkClient_getSdkClient = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/sdkClient/{sdkClientId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            sdkClientId: zod_1.z.string(),
        }),
        header: zod_1.z.object({
            userId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
            orgId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
        }),
    }),
    response: exports.SdkClient,
};
exports.patch_SdkClient_updateSdkClient = {
    method: zod_1.z.literal("PATCH"),
    path: zod_1.z.literal("/org/sdkClient/{sdkClientId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            sdkClientId: zod_1.z.string(),
        }),
        body: exports.UpdateSdkClient,
    }),
    response: exports.SdkClient,
};
exports.get_SdkClient_auth = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/sdkClient/auth"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.never(),
    response: exports.AuthenticatorResponse,
};
exports.get_SdkClient_listSdkClients = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/sdkClients"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.never(),
    response: exports.SdkClientList,
};
exports.get_Session_getAppIntegration = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/account/api/v1/appIntegration"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            id: zod_1.z.string(),
        }),
    }),
    response: exports.GetAccountApiV1AppIntegrationResponse,
};
exports.post_Session_createRuntimeBrowserEnvironment = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/browser/environment"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.PostAccountApiV1BrowserEnvironmentRequest,
    }),
    response: exports.PostAccountApiV1BrowserEnvironmentResponse,
};
exports.get_Session_getSession = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/account/api/v1/session"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            ownerId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            appUserId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]),
            domain: zod_1.z.string(),
        }),
    }),
    response: exports.GetAccountApiV1SessionResponse,
};
exports.post_Session_addSession = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/session"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: zod_1.z.object({
            ownerId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
            domain: zod_1.z.string(),
            session: exports.PostAccountApiV1SessionRequestSession,
        }),
    }),
    response: exports.PostAccountApiV1SessionResponse,
};
exports.put_Session_updateSession = {
    method: zod_1.z.literal("PUT"),
    path: zod_1.z.literal("/account/api/v1/session"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: zod_1.z.object({
            ownerId: zod_1.z.union([zod_1.z.string(), zod_1.z.null(), zod_1.z.undefined()]).optional(),
            domain: zod_1.z.string(),
            session: exports.PutAccountApiV1SessionRequestSession,
        }),
    }),
    response: exports.PutAccountApiV1SessionResponse,
};
exports.delete_Session_removeSession = {
    method: zod_1.z.literal("DELETE"),
    path: zod_1.z.literal("/account/api/v1/session"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            appUserId: zod_1.z.string(),
            app: zod_1.z.union([zod_1.z.string(), exports.Integration]),
        }),
    }),
    response: exports.DeleteSessionResponse,
};
exports.get_Session_getSessionStatus = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/account/api/v1/session/status"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            appUserId: zod_1.z.string(),
            app: zod_1.z.union([zod_1.z.string(), exports.Integration]),
        }),
    }),
    response: exports.GetAccountApiV1SessionStatusResponse,
};
exports.get_Session_getSessionRequestStatus = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/account/api/v1/session/request"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            id: zod_1.z.string(),
        }),
    }),
    response: exports.GetAccountApiV1SessionRequestResponse,
};
exports.post_Session_createSessionRequest = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/session/request"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.PostAccountApiV1SessionRequestRequest,
    }),
    response: exports.PostAccountApiV1SessionRequestResponse,
};
exports.get_Session_listSessions = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/account/api/v1/sessions"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        query: zod_1.z.object({
            appUserId: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]).optional(),
        }),
    }),
    response: exports.ListSessionsResponse,
};
exports.post_Session_addSessionAccessGrant = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/account/api/v1/sessionAccessGrant"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: zod_1.z.object({
            sessionId: zod_1.z.string(),
            appUserId: zod_1.z.string(),
        }),
    }),
    response: exports.PostAccountApiV1SessionAccessGrantResponse,
};
exports.delete_Session_deleteSessionAccessGrant = {
    method: zod_1.z.literal("DELETE"),
    path: zod_1.z.literal("/account/api/v1/sessionAccessGrant"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: zod_1.z.object({
            sessionId: zod_1.z.string(),
            appUserId: zod_1.z.string(),
        }),
    }),
    response: exports.DeleteAccountApiV1SessionAccessGrantResponse,
};
exports.post_UserPool_createUserPool = {
    method: zod_1.z.literal("POST"),
    path: zod_1.z.literal("/org/userPool"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        body: exports.CreateUserPool,
    }),
    response: exports.UserPool,
};
exports.get_UserPool_getUserPool = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/userPool/{userPoolId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            userPoolId: zod_1.z.string(),
        }),
    }),
    response: exports.UserPool,
};
exports.patch_UserPool_updateUserPool = {
    method: zod_1.z.literal("PATCH"),
    path: zod_1.z.literal("/org/userPool/{userPoolId}"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.object({
        path: zod_1.z.object({
            userPoolId: zod_1.z.string(),
        }),
        body: exports.UpdateUserPool,
    }),
    response: zod_1.z.boolean(),
};
exports.get_UserPool_listUserPools = {
    method: zod_1.z.literal("GET"),
    path: zod_1.z.literal("/org/userPools"),
    requestFormat: zod_1.z.literal("json"),
    parameters: zod_1.z.never(),
    response: exports.UserPoolList,
};
// <EndpointByMethod>
exports.EndpointByMethod = {
    get: {
        "/actions/linkedin/listConversations": exports.get_Actions_linkedinListConversations,
        "/actions/linkedin/listConnections": exports.get_Actions_linkedinListConnections,
        "/actions/linkedin/getConversation": exports.get_Actions_linkedinGetConversation,
        "/actions/linkedin/listMessages": exports.get_Actions_linkedinListMessages,
        "/actions/linkedin/getProfile": exports.get_Actions_linkedinGetProfile,
        "/account/api/v1/activity": exports.get_Activity_getActivityEvents,
        "/account/api/v1/appIntegrations": exports.get_AppIntegrations_listAppIntegrations,
        "/link/url": exports.get_Link_createLinkUrl,
        "/org/member/{memberId}": exports.get_Member_getMember,
        "/org/members": exports.get_Member_listMembers,
        "/org/organization/{organizationId}": exports.get_Organization_getOrganization,
        "/org/user": exports.get_Organization_appUser,
        "/org/users": exports.get_Organization_listAppUsers,
        "/org/sdkClient/{sdkClientId}": exports.get_SdkClient_getSdkClient,
        "/org/sdkClient/auth": exports.get_SdkClient_auth,
        "/org/sdkClients": exports.get_SdkClient_listSdkClients,
        "/account/api/v1/appIntegration": exports.get_Session_getAppIntegration,
        "/account/api/v1/session": exports.get_Session_getSession,
        "/account/api/v1/session/status": exports.get_Session_getSessionStatus,
        "/account/api/v1/session/request": exports.get_Session_getSessionRequestStatus,
        "/account/api/v1/sessions": exports.get_Session_listSessions,
        "/org/userPool/{userPoolId}": exports.get_UserPool_getUserPool,
        "/org/userPools": exports.get_UserPool_listUserPools,
    },
    post: {
        "/actions/linkedin/createConversation": exports.post_Actions_linkedinCreateConversation,
        "/actions/linkedin/sendMessage": exports.post_Actions_linkedinSendMessage,
        "/actions/linkedin/sendConnectionRequest": exports.post_Actions_linkedinSendConnectionRequest,
        "/actions/linkedin/search": exports.post_Actions_linkedinSearchProfiles,
        "/account/api/v1/activity": exports.post_Activity_createEvent,
        "/account/api/v1/activity/{groupId}": exports.post_Activity_createEventWithGroupId,
        "/org/appUserIdToken": exports.post_AppUserIdToken_createAppUserIdToken,
        "/account/api/v1/link": exports.post_Link_initiateLink,
        "/org/member": exports.post_Member_createMember,
        "/org/login": exports.post_Member_login,
        "/org/organization": exports.post_Organization_createOrganization,
        "/org/user": exports.post_Organization_createAppUser,
        "/account/api/v1/cdpUrl": exports.post_Run_createCdpUrl,
        "/account/api/v1/logs": exports.post_RuntimeLog_recordLog,
        "/org/sdkClient": exports.post_SdkClient_createSdkClient,
        "/account/api/v1/browser/environment": exports.post_Session_createRuntimeBrowserEnvironment,
        "/account/api/v1/session": exports.post_Session_addSession,
        "/account/api/v1/session/request": exports.post_Session_createSessionRequest,
        "/account/api/v1/sessionAccessGrant": exports.post_Session_addSessionAccessGrant,
        "/org/userPool": exports.post_UserPool_createUserPool,
    },
    patch: {
        "/account/api/v1/link/{linkId}": exports.patch_Link_continueLink,
        "/org/organization/{organizationId}": exports.patch_Organization_updateOrganization,
        "/org/sdkClient/{sdkClientId}": exports.patch_SdkClient_updateSdkClient,
        "/org/userPool/{userPoolId}": exports.patch_UserPool_updateUserPool,
    },
    delete: {
        "/org/organization/{organizationId}": exports.delete_Organization_deleteOrganization,
        "/account/api/v1/session": exports.delete_Session_removeSession,
        "/account/api/v1/sessionAccessGrant": exports.delete_Session_deleteSessionAccessGrant,
    },
    put: {
        "/account/api/v1/session": exports.put_Session_updateSession,
    },
};
// </ApiClientTypes>
// <ApiClient>
class ApiClient {
    fetcher;
    baseUrl = "";
    constructor(fetcher) {
        this.fetcher = fetcher;
    }
    setBaseUrl(baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }
    // <ApiClient.get>
    get(path, ...params) {
        return this.fetcher("get", this.baseUrl + path, params[0]);
    }
    // </ApiClient.get>
    // <ApiClient.post>
    post(path, ...params) {
        return this.fetcher("post", this.baseUrl + path, params[0]);
    }
    // </ApiClient.post>
    // <ApiClient.patch>
    patch(path, ...params) {
        return this.fetcher("patch", this.baseUrl + path, params[0]);
    }
    // </ApiClient.patch>
    // <ApiClient.delete>
    delete(path, ...params) {
        return this.fetcher("delete", this.baseUrl + path, params[0]);
    }
    // </ApiClient.delete>
    // <ApiClient.put>
    put(path, ...params) {
        return this.fetcher("put", this.baseUrl + path, params[0]);
    }
}
exports.ApiClient = ApiClient;
function createApiClient(fetcher, baseUrl) {
    return new ApiClient(fetcher).setBaseUrl(baseUrl ?? "");
}
/**
 Example usage:
 const api = createApiClient((method, url, params) =>
   fetch(url, { method, body: JSON.stringify(params) }).then((res) => res.json()),
 );
 api.get("/users").then((users) => console.log(users));
 api.post("/users", { body: { name: "John" } }).then((user) => console.log(user));
 api.put("/users/:id", { path: { id: 1 }, body: { name: "John" } }).then((user) => console.log(user));
*/
// </ApiClient
//# sourceMappingURL=validators.js.map