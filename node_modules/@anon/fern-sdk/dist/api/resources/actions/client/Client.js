"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Actions = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
class Actions {
    _options;
    constructor(_options) {
        this._options = _options;
    }
    /**
     * Output a list of the user's LinkedIn conversations
     *
     * @param {AnonApi.LinkedinListConversationsQuery} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinListConversations({
     *         profileName: "string",
     *         profileId: "string",
     *         appUserId: "string",
     *         contentType: "string",
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinListConversations(request, requestOptions) {
        const { profileName, profileId, appUserId, contentType, appUserPoolId } = request;
        const _queryParams = {};
        if (profileName != null) {
            _queryParams["profileName"] = profileName;
        }
        if (profileId != null) {
            _queryParams["profileId"] = profileId;
        }
        _queryParams["appUserId"] = appUserId;
        if (contentType != null) {
            _queryParams["contentType"] = contentType;
        }
        if (appUserPoolId != null) {
            _queryParams["appUserPoolId"] = appUserPoolId;
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/listConversations"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /actions/linkedin/listConversations.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Output a list of the user's LinkedIn connections
     *
     * @param {AnonApi.LinkedinListConnectionsQuery} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinListConnections({
     *         cursor: "string",
     *         profileName: "string",
     *         appUserId: "string",
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinListConnections(request, requestOptions) {
        const { cursor, profileName, appUserId, appUserPoolId } = request;
        const _queryParams = {};
        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }
        if (profileName != null) {
            _queryParams["profileName"] = profileName;
        }
        _queryParams["appUserId"] = appUserId;
        if (appUserPoolId != null) {
            _queryParams["appUserPoolId"] = appUserPoolId;
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/listConnections"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /actions/linkedin/listConnections.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Create a new LinkedIn conversation
     *
     * @param {AnonApi.LinkedinCreateConversationBody} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinCreateConversation({
     *         profileId: "string",
     *         appUserId: "string",
     *         message: "string",
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinCreateConversation(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/createConversation"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /actions/linkedin/createConversation.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Get the message history and metadata of a specific LinkedIn conversation
     *
     * @param {AnonApi.LinkedinGetConversationQuery} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinGetConversation({
     *         id: "string",
     *         appUserId: "string",
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinGetConversation(request, requestOptions) {
        const { id, appUserId, appUserPoolId } = request;
        const _queryParams = {};
        _queryParams["id"] = id;
        _queryParams["appUserId"] = appUserId;
        if (appUserPoolId != null) {
            _queryParams["appUserPoolId"] = appUserPoolId;
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/getConversation"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /actions/linkedin/getConversation.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Get the message history and metadata of a specific LinkedIn conversation
     *
     * @param {AnonApi.LinkedinListMessagesQuery} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinListMessages({
     *         id: "string",
     *         appUserId: "string",
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinListMessages(request, requestOptions) {
        const { id, appUserId, appUserPoolId } = request;
        const _queryParams = {};
        _queryParams["id"] = id;
        _queryParams["appUserId"] = appUserId;
        if (appUserPoolId != null) {
            _queryParams["appUserPoolId"] = appUserPoolId;
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/listMessages"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /actions/linkedin/listMessages.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Send a message on LinkedIn
     *
     * @param {AnonApi.LinkedinSendMessageBody} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinSendMessage({
     *         message: "string",
     *         appUserId: "string",
     *         conversationId: "string",
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinSendMessage(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/sendMessage"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /actions/linkedin/sendMessage.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Get the profile information of a LinkedIn user
     *
     * @param {AnonApi.LinkedinGetProfileRequest} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinGetProfile({
     *         id: "string",
     *         appUserId: "string",
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinGetProfile(request, requestOptions) {
        const { id, appUserId, appUserPoolId } = request;
        const _queryParams = {};
        _queryParams["id"] = id;
        _queryParams["appUserId"] = appUserId;
        if (appUserPoolId != null) {
            _queryParams["appUserPoolId"] = appUserPoolId;
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/getProfile"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /actions/linkedin/getProfile.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Send a connection request to a LinkedIn user
     *
     * @param {AnonApi.LinkedinSendConnectionRequestBody} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinSendConnectionRequest({
     *         profileId: "string",
     *         appUserId: "string",
     *         message: "string",
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinSendConnectionRequest(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/sendConnectionRequest"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /actions/linkedin/sendConnectionRequest.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Search for LinkedIn profiles by name
     *
     * @param {AnonApi.LinkedinSearchProfilesBody} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.linkedinSearchProfiles({
     *         cursor: "string",
     *         profileName: "string",
     *         connectionsOf: "string",
     *         appUserId: "string",
     *         networkDistance: ["1"],
     *         appUserPoolId: "string"
     *     })
     */
    async linkedinSearchProfiles(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/actions/linkedin/search"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /actions/linkedin/search.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    async _getAuthorizationHeader() {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
exports.Actions = Actions;
//# sourceMappingURL=Client.js.map