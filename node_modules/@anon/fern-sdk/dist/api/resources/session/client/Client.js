"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
class Session {
    _options;
    constructor(_options) {
        this._options = _options;
    }
    /**
     * @param {AnonApi.GetAccountApiV1AppIntegrationRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.getAppIntegration({
     *         id: "string"
     *     })
     */
    async getAppIntegration(request, requestOptions) {
        const { id } = request;
        const _queryParams = {};
        _queryParams["id"] = id;
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/appIntegration"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /account/api/v1/appIntegration.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.PostAccountApiV1BrowserEnvironmentRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.createRuntimeBrowserEnvironment({
     *         proxy: {
     *             server: "string",
     *             bypass: "string",
     *             username: "string",
     *             password: "string"
     *         },
     *         isLiveStreamingSession: true
     *     })
     */
    async createRuntimeBrowserEnvironment(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/browser/environment"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request != null ? request : undefined,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /account/api/v1/browser/environment.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.GetAccountApiV1SessionRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.getSession({
     *         ownerId: "string",
     *         appUserId: "string",
     *         domain: "string"
     *     })
     */
    async getSession(request, requestOptions) {
        const { ownerId, appUserId, domain } = request;
        const _queryParams = {};
        if (ownerId != null) {
            _queryParams["ownerId"] = ownerId;
        }
        if (appUserId != null) {
            _queryParams["appUserId"] = appUserId;
        }
        _queryParams["domain"] = domain;
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/session"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /account/api/v1/session.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.PostAccountApiV1SessionRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.addSession({
     *         ownerId: "string",
     *         domain: "string",
     *         session: {
     *             id: "string",
     *             status: "active",
     *             cookies: [{
     *                     name: "string",
     *                     value: "string",
     *                     domain: "string",
     *                     path: "string",
     *                     expires: 1.1,
     *                     secure: true,
     *                     hostOnly: true,
     *                     httpOnly: true,
     *                     discard: true,
     *                     session: true,
     *                     partitioned: true,
     *                     sameSite: "unspecified",
     *                     sameSitePolicy: "unspecified",
     *                     storeId: "string"
     *                 }],
     *             localStorage: [["string"]],
     *             sessionStorage: [["string"]],
     *             proxyId: "string",
     *             url: "string"
     *         }
     *     })
     */
    async addSession(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/session"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /account/api/v1/session.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.PutAccountApiV1SessionRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.updateSession({
     *         ownerId: "string",
     *         domain: "string",
     *         session: {
     *             id: "string",
     *             status: "active",
     *             cookies: [{
     *                     name: "string",
     *                     value: "string",
     *                     domain: "string",
     *                     path: "string",
     *                     expires: 1.1,
     *                     secure: true,
     *                     hostOnly: true,
     *                     httpOnly: true,
     *                     discard: true,
     *                     session: true,
     *                     partitioned: true,
     *                     sameSite: "unspecified",
     *                     sameSitePolicy: "unspecified",
     *                     storeId: "string"
     *                 }],
     *             localStorage: [["string"]],
     *             sessionStorage: [["string"]],
     *             proxyId: "string",
     *             url: "string"
     *         }
     *     })
     */
    async updateSession(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/session"),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling PUT /account/api/v1/session.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Disconnect a previously connected session.
     *
     * @param {AnonApi.DeleteSessionRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.removeSession({
     *         appUserId: "string",
     *         app: "string"
     *     })
     */
    async removeSession(request, requestOptions) {
        const { appUserId, app } = request;
        const _queryParams = {};
        _queryParams["appUserId"] = appUserId;
        _queryParams["app"] = typeof app === "string" ? app : JSON.stringify(app);
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/session"),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling DELETE /account/api/v1/session.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.GetAccountApiV1SessionStatusRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.getSessionStatus({
     *         appUserId: "string",
     *         app: "string"
     *     })
     */
    async getSessionStatus(request, requestOptions) {
        const { appUserId, app } = request;
        const _queryParams = {};
        _queryParams["appUserId"] = appUserId;
        _queryParams["app"] = typeof app === "string" ? app : JSON.stringify(app);
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/session/status"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /account/api/v1/session/status.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.GetAccountApiV1SessionRequestRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.getSessionRequestStatus({
     *         id: "string"
     *     })
     */
    async getSessionRequestStatus(request, requestOptions) {
        const { id } = request;
        const _queryParams = {};
        _queryParams["id"] = id;
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/session/request"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /account/api/v1/session/request.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.PostAccountApiV1SessionRequestRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.createSessionRequest({
     *         iosPushAuthorization: {
     *             iosAppId: "string",
     *             authToken: "string"
     *         },
     *         account: {
     *             ownerId: "string",
     *             domain: "string"
     *         },
     *         appSdkClientId: "string",
     *         alertBody: "string",
     *         alertTitle: "string"
     *     })
     */
    async createSessionRequest(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/session/request"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /account/api/v1/session/request.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * List all the app user sessions you have access to. Optionally filter by a specific user.
     *
     * @param {AnonApi.ListSessionsRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.listSessions({
     *         appUserId: "string"
     *     })
     */
    async listSessions(request = {}, requestOptions) {
        const { appUserId } = request;
        const _queryParams = {};
        if (appUserId != null) {
            _queryParams["appUserId"] = appUserId;
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/sessions"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /account/api/v1/sessions.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.PostAccountApiV1SessionAccessGrantRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.addSessionAccessGrant({
     *         sessionId: "string",
     *         appUserId: "string"
     *     })
     */
    async addSessionAccessGrant(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/sessionAccessGrant"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /account/api/v1/sessionAccessGrant.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * @param {AnonApi.DeleteAccountApiV1SessionAccessGrantRequest} request
     * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.session.deleteSessionAccessGrant({
     *         sessionId: "string",
     *         appUserId: "string"
     *     })
     */
    async deleteSessionAccessGrant(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/sessionAccessGrant"),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling DELETE /account/api/v1/sessionAccessGrant.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    async _getAuthorizationHeader() {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
exports.Session = Session;
//# sourceMappingURL=Client.js.map