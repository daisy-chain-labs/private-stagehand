"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Activity = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
class Activity {
    _options;
    constructor(_options) {
        this._options = _options;
    }
    /**
     * Retrieve all events for an organization via organizationId. The organizationId is retrieved from the api key via kong. It can also query by both group id and session type.
     *
     * @param {AnonApi.GetActivityEventsRequest} request
     * @param {Activity.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.activity.getActivityEvents({
     *         groupId: "string",
     *         activityType: "Link",
     *         app: "string",
     *         startTime: "string",
     *         endTime: "string",
     *         userId: "string",
     *         order: "string"
     *     })
     */
    async getActivityEvents(request = {}, requestOptions) {
        const { groupId, activityType, app, startTime, endTime, userId, order } = request;
        const _queryParams = {};
        if (groupId != null) {
            _queryParams["groupId"] = groupId;
        }
        if (activityType != null) {
            _queryParams["activityType"] = activityType;
        }
        if (app != null) {
            _queryParams["app"] = app;
        }
        if (startTime != null) {
            _queryParams["startTime"] = startTime;
        }
        if (endTime != null) {
            _queryParams["endTime"] = endTime;
        }
        if (userId != null) {
            _queryParams["userId"] = userId;
        }
        if (order != null) {
            _queryParams["order"] = order;
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/activity"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling GET /account/api/v1/activity.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Create an activity event
     *
     * @param {AnonApi.CreateEventRequestBody} request
     * @param {Activity.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.activity.createEvent({
     *         activityType: "link",
     *         datetime: 1,
     *         groupId: "string",
     *         data: {
     *             app: "string",
     *             type: "linkStart"
     *         },
     *         userId: "string"
     *     })
     */
    async createEvent(request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, "/account/api/v1/activity"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /account/api/v1/activity.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Create an event to an existing activity
     *
     * @param {string} groupId - ID of the activity to add the event to
     * @param {AnonApi.CreateEventRequestBody} request
     * @param {Activity.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.activity.createEventWithGroupId("string", {
     *         activityType: "link",
     *         datetime: 1,
     *         groupId: "string",
     *         data: {
     *             app: "string",
     *             type: "linkStart"
     *         },
     *         userId: "string"
     *     })
     */
    async createEventWithGroupId(groupId, request, requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ??
                environments.AnonApiEnvironment.Sandbox, `/account/api/v1/activity/${encodeURIComponent(groupId)}`),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Anon-Sdk-Client-Id": await core.Supplier.get(this._options.anonSdkClientId),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null
                ? requestOptions.timeoutInSeconds * 1000
                : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            throw new errors.AnonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AnonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AnonApiTimeoutError("Timeout exceeded when calling POST /account/api/v1/activity/{groupId}.");
            case "unknown":
                throw new errors.AnonApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    async _getAuthorizationHeader() {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
exports.Activity = Activity;
//# sourceMappingURL=Client.js.map