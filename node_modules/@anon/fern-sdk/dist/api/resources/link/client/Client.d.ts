/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace Link {
    interface Options {
        environment?: core.Supplier<environments.AnonApiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the X-Anon-Sdk-Client-Id header */
        anonSdkClientId: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Anon-Sdk-Client-Id header */
        anonSdkClientId?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Link {
    protected readonly _options: Link.Options;
    constructor(_options: Link.Options);
    /**
     * Initiate the Linking process
     *
     * @param {AnonApi.InitiateLinkRequest} request
     * @param {Link.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.link.initiateLink({
     *         app: "rippling",
     *         appUserId: "string",
     *         provider: "browserbase"
     *     })
     */
    initiateLink(request: AnonApi.InitiateLinkRequest, requestOptions?: Link.RequestOptions): Promise<AnonApi.LinkResponse>;
    /**
     * Submit more information in the Linking process
     *
     * @param {string} linkId
     * @param {AnonApi.ContinueLinkRequest} request
     * @param {Link.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.link.continueLink("string", {
     *         email: "string",
     *         password: "string"
     *     })
     */
    continueLink(linkId: string, request: AnonApi.ContinueLinkRequest, requestOptions?: Link.RequestOptions): Promise<AnonApi.LinkResponse>;
    /**
     * Generates a url for launching Anon Link.
     *
     * @param {AnonApi.CreateLinkUrlRequest} request
     * @param {Link.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.link.createLinkUrl({
     *         app: "string",
     *         appUserId: "string",
     *         chromeExtensionId: "string",
     *         companyLogoUrl: "string",
     *         companyName: "string",
     *         redirectUrl: "string",
     *         state: "string",
     *         authUrl: "string",
     *         checkUrl: "string",
     *         displayName: "string",
     *         iconUrl: "string"
     *     })
     */
    createLinkUrl(request: AnonApi.CreateLinkUrlRequest, requestOptions?: Link.RequestOptions): Promise<AnonApi.CreateLinkUrlResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
