"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetcher = void 0;
exports.fetcherImpl = fetcherImpl;
const createRequestUrl_1 = require("./createRequestUrl");
const getFetchFn_1 = require("./getFetchFn");
const getRequestBody_1 = require("./getRequestBody");
const getResponseBody_1 = require("./getResponseBody");
const makeRequest_1 = require("./makeRequest");
const requestWithRetries_1 = require("./requestWithRetries");
async function fetcherImpl(args) {
    const headers = {};
    if (args.body !== undefined && args.contentType != null) {
        headers["Content-Type"] = args.contentType;
    }
    if (args.headers != null) {
        for (const [key, value] of Object.entries(args.headers)) {
            if (value != null) {
                headers[key] = value;
            }
        }
    }
    const url = (0, createRequestUrl_1.createRequestUrl)(args.url, args.queryParameters);
    let requestBody = await (0, getRequestBody_1.getRequestBody)({
        body: args.body,
        type: args.requestType === "json" ? "json" : "other",
    });
    const fetchFn = await (0, getFetchFn_1.getFetchFn)();
    try {
        const response = await (0, requestWithRetries_1.requestWithRetries)(async () => (0, makeRequest_1.makeRequest)(fetchFn, url, args.method, headers, requestBody, args.timeoutMs, args.abortSignal, args.withCredentials, args.duplex), args.maxRetries);
        let responseBody = await (0, getResponseBody_1.getResponseBody)(response, args.responseType);
        if (response.status >= 200 && response.status < 400) {
            return {
                ok: true,
                body: responseBody,
                headers: response.headers,
            };
        }
        else {
            return {
                ok: false,
                error: {
                    reason: "status-code",
                    statusCode: response.status,
                    body: responseBody,
                },
            };
        }
    }
    catch (error) {
        if (args.abortSignal != null && args.abortSignal.aborted) {
            return {
                ok: false,
                error: {
                    reason: "unknown",
                    errorMessage: "The user aborted a request",
                },
            };
        }
        else if (error instanceof Error && error.name === "AbortError") {
            return {
                ok: false,
                error: {
                    reason: "timeout",
                },
            };
        }
        else if (error instanceof Error) {
            return {
                ok: false,
                error: {
                    reason: "unknown",
                    errorMessage: error.message,
                },
            };
        }
        return {
            ok: false,
            error: {
                reason: "unknown",
                errorMessage: JSON.stringify(error),
            },
        };
    }
}
exports.fetcher = fetcherImpl;
//# sourceMappingURL=Fetcher.js.map