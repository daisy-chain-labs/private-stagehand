"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.linearSumAssignment = void 0;
const ml_matrix_1 = require("ml-matrix");
const getShortestPath_1 = require("./getShortestPath");
/**
 * Implementation of Jonker-Volgenant shortest augmenting path algorithm based
 * on the publication [On implementing 2D rectangular assignment algorithms](https://doi.org/10.1109/TAES.2016.140952)
 */
function linearSumAssignment(
/**
 * Cost matrix
 */
input, options = {}) {
    const { maximaze = true } = options;
    let matrix = ml_matrix_1.Matrix.checkMatrix(input);
    let didFlip = false;
    if (matrix.columns > matrix.rows) {
        didFlip = true;
        matrix = matrix.transpose();
    }
    const nbRows = matrix.rows;
    const nbColumns = matrix.columns;
    const matrixDelta = maximaze ? matrix.max() : matrix.min();
    matrix = matrix.subtract(matrixDelta);
    if (maximaze)
        matrix = matrix.mul(-1);
    let rowAssignments = new Float64Array(nbRows).fill(-1);
    let columnAssignments = new Float64Array(nbColumns).fill(-1);
    let dualVariableForColumns = new Float64Array(nbColumns);
    let dualVariableForRows = new Float64Array(nbRows);
    for (let currUnAssCol = 0; currUnAssCol < nbColumns; currUnAssCol++) {
        const currentAugmenting = (0, getShortestPath_1.getShortestPath)({
            matrix,
            currUnAssCol,
            dualVariableForColumns,
            dualVariableForRows,
            rowAssignments,
            columnAssignments,
        });
        const { sink, pred } = currentAugmenting;
        if (sink === -1) {
            return {
                rowAssignments,
                columnAssignments,
                gain: -1,
                dualVariableForColumns,
                dualVariableForRows,
            };
        }
        dualVariableForColumns = currentAugmenting.dualVariableForColumns;
        dualVariableForRows = currentAugmenting.dualVariableForRows;
        let j = sink;
        for (let i = pred[j]; true; i = pred[j]) {
            rowAssignments[j] = i;
            const h = columnAssignments[i];
            columnAssignments[i] = j;
            j = h;
            if (i === currUnAssCol)
                break;
        }
    }
    let gain = 0;
    for (let curCol = 0; curCol < nbColumns; curCol++) {
        gain += matrix.get(columnAssignments[curCol], curCol);
    }
    gain = (maximaze ? -1 : 1) * gain + matrixDelta * nbColumns;
    if (didFlip) {
        [columnAssignments, rowAssignments] = [rowAssignments, columnAssignments];
        [dualVariableForColumns, dualVariableForRows] = [
            dualVariableForRows,
            dualVariableForColumns,
        ];
    }
    return {
        rowAssignments,
        columnAssignments,
        gain,
        dualVariableForColumns,
        dualVariableForRows,
    };
}
exports.linearSumAssignment = linearSumAssignment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EseUNBQW1DO0FBRW5DLHVEQUFvRDtBQVVwRDs7O0dBR0c7QUFFSCxTQUFnQixtQkFBbUI7QUFDakM7O0dBRUc7QUFDSCxLQUE2QixFQUM3QixVQUFtQixFQUFFO0lBRXJCLE1BQU0sRUFBRSxRQUFRLEdBQUcsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBRXBDLElBQUksTUFBTSxHQUFHLGtCQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNwQixJQUFJLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDZixNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzNCLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFFakMsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzRCxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxJQUFJLFFBQVE7UUFBRSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRDLElBQUksY0FBYyxHQUFnQixJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRSxJQUFJLGlCQUFpQixHQUFnQixJQUFJLFlBQVksQ0FBQyxTQUFT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