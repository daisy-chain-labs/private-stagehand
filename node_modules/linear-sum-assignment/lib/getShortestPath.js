"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getShortestPath = void 0;
const ml_spectra_processing_1 = require("ml-spectra-processing");
function getShortestPath(options) {
    const { currUnAssCol, dualVariableForColumns, dualVariableForRows, rowAssignments, columnAssignments, matrix, } = options;
    const nbRows = matrix.rows;
    const nbColumns = matrix.columns;
    const pred = new Float64Array(nbRows);
    const scannedColumns = new Float64Array(nbColumns);
    const scannedRows = new Float64Array(nbRows);
    const rows2Scan = Array.from((0, ml_spectra_processing_1.xSequentialFillFromTo)({ from: 0, to: nbRows - 1, size: nbRows }));
    let numRows2Scan = nbRows;
    let sink = -1;
    let delta = 0;
    let curColumn = currUnAssCol;
    const shortestPathCost = new Array(nbRows).fill(Number.POSITIVE_INFINITY);
    while (sink === -1) {
        scannedColumns[curColumn] = 1;
        let minVal = Number.POSITIVE_INFINITY;
        let closestRowScan = -1;
        for (let curRowScan = 0; curRowScan < numRows2Scan; curRowScan++) {
            const curRow = rows2Scan[curRowScan];
            const reducedCost = delta +
                matrix.get(curRow, curColumn) -
                dualVariableForColumns[curColumn] -
                dualVariableForRows[curRow];
            if (reducedCost < shortestPathCost[curRow]) {
                pred[curRow] = curColumn;
                shortestPathCost[curRow] = reducedCost;
            }
            if (shortestPathCost[curRow] < minVal) {
                minVal = shortestPathCost[curRow];
                closestRowScan = curRowScan;
            }
        }
        if (!Number.isFinite(minVal)) {
            return { dualVariableForColumns, dualVariableForRows, sink, pred };
        }
        const closestRow = rows2Scan[closestRowScan];
        scannedRows[closestRow] = 1;
        numRows2Scan -= 1;
        rows2Scan.splice(closestRowScan, 1);
        delta = shortestPathCost[closestRow];
        if (rowAssignments[closestRow] === -1) {
            sink = closestRow;
        }
        else {
            curColumn = rowAssignments[closestRow];
        }
    }
    dualVariableForColumns[currUnAssCol] += delta;
    for (let sel = 0; sel < nbColumns; sel++) {
        if (scannedColumns[sel] === 0)
            continue;
        if (sel === currUnAssCol)
            continue;
        dualVariableForColumns[sel] +=
            delta - shortestPathCost[columnAssignments[sel]];
    }
    for (let sel = 0; sel < nbRows; sel++) {
        if (scannedRows[sel] === 0)
            continue;
        dualVariableForRows[sel] -= delta - shortestPathCost[sel];
    }
    return {
        sink,
        pred,
        dualVariableForColumns,
        dualVariableForRows,
    };
}
exports.getShortestPath = getShortestPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0U2hvcnRlc3RQYXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dldFNob3J0ZXN0UGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxpRUFBOEQ7QUFXOUQsU0FBZ0IsZUFBZSxDQUFDLE9BQStCO0lBQzdELE1BQU0sRUFDSixZQUFZLEVBQ1osc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQixjQUFjLEVBQ2QsaUJBQWlCLEVBQ2pCLE1BQU0sR0FDUCxHQUFHLE9BQU8sQ0FBQztJQUVaLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDM0IsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUVqQyxNQUFNLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxNQUFNLGNBQWMsR0FBRyxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuRCxNQUFNLFdBQVcsR0FBRyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU3QyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUMxQixJQUFBLDZDQUFxQixFQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FDakUsQ0FBQztJQUNGLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQztJQUUxQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNkLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLElBQUksU0FBUyxHQUFHLFlBQVksQ0FBQztJQUM3QixNQUFNLGdCQUFnQixHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMxRSxPQUFPLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxD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